// ===== CARREGADOR SIMPLES DE VARI√ÅVEIS DE AMBIENTE =====

class SimpleEnvLoader {
    constructor() {
        this.envVars = {};
        this.isLoaded = false;
    }

    // Carregar vari√°veis de ambiente do arquivo .env
    async loadEnvFile() {
        try {
            console.log('üîê Carregando configura√ß√µes do arquivo .env...');
            
            // Tentar carregar via backend primeiro
            try {
                const response = await fetch('/api/config/public');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        this.envVars = data.config;
                        this.isLoaded = true;
                        console.log('‚úÖ Configura√ß√µes carregadas via backend');
                        console.log('üìã Configura√ß√µes do backend:', Object.keys(this.envVars));
                        return true;
                    }
                }
            } catch (backendError) {
                console.log('‚ö†Ô∏è Backend n√£o dispon√≠vel, tentando carregar localmente...');
            }
            
            // Fallback: tentar carregar configura√ß√µes do servidor
            console.log('üìÅ Tentando carregar configura√ß√µes do servidor...');
            const response = await fetch('/api/config/public');
            if (!response.ok) {
                throw new Error(`Erro ao carregar configura√ß√µes: ${response.status}`);
            }
            
            const configData = await response.json();
            console.log('üìÑ Configura√ß√µes carregadas do servidor:', configData);
            
            // Converter para formato de vari√°veis de ambiente
            this.envVars = configData;
            console.log('üìã Vari√°veis carregadas:', Object.keys(this.envVars));
            
            // Validar configura√ß√µes cr√≠ticas
            this.validateCriticalConfigs();
            
            this.isLoaded = true;
            console.log('‚úÖ Configura√ß√µes carregadas com sucesso');
            
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao carregar .env:', error);
            this.handleLoadError(error);
            return false;
        }
    }

    // Parsear conte√∫do do arquivo .env
    parseEnvContent(content) {
        const lines = content.split('\n');
        
        for (const line of lines) {
            const trimmedLine = line.trim();
            
            // Ignorar coment√°rios e linhas vazias
            if (trimmedLine.startsWith('#') || trimmedLine === '') {
                continue;
            }
            
            // Parsear vari√°vel=valor
            const equalIndex = trimmedLine.indexOf('=');
            if (equalIndex === -1) {
                continue;
            }
            
            const key = trimmedLine.substring(0, equalIndex).trim();
            const value = trimmedLine.substring(equalIndex + 1).trim();
            
            // Remover aspas se existirem
            const cleanValue = value.replace(/^["']|["']$/g, '');
            
            this.envVars[key] = cleanValue;
            
            // Log especial para a chave da API
            if (key === 'OPENAI_API_KEY') {
                console.log(`üîë Chave da API carregada: ${cleanValue ? cleanValue.substring(0, 20) + '...' : 'VAZIA'}`);
            }
        }
        
        console.log(`üìã ${Object.keys(this.envVars).length} vari√°veis carregadas`);
        console.log('üìã Vari√°veis carregadas:', Object.keys(this.envVars));
    }

    // Validar configura√ß√µes cr√≠ticas
    validateCriticalConfigs() {
        const criticalVars = [
            'OPENAI_MODEL',
            'OPENAI_TEMPERATURE',
            'OPENAI_MAX_TOKENS'
        ];
        
        for (const varName of criticalVars) {
            if (!this.envVars[varName]) {
                console.warn(`‚ö†Ô∏è Vari√°vel cr√≠tica ausente: ${varName}`);
            }
        }
        
        // Validar tipos de dados
        const temperature = parseFloat(this.envVars.OPENAI_TEMPERATURE);
        if (isNaN(temperature) || temperature < 0 || temperature > 1) {
            console.warn('‚ö†Ô∏è OPENAI_TEMPERATURE deve ser um n√∫mero entre 0 e 1');
        }
        
        const maxTokens = parseInt(this.envVars.OPENAI_MAX_TOKENS);
        if (isNaN(maxTokens) || maxTokens < 100 || maxTokens > 4000) {
            console.warn('‚ö†Ô∏è OPENAI_MAX_TOKENS deve ser um n√∫mero entre 100 e 4000');
        }
        
        console.log('‚úÖ Valida√ß√£o de configura√ß√µes conclu√≠da');
    }

    // Obter vari√°vel de ambiente
    get(key, defaultValue = null) {
        if (!this.isLoaded) {
            console.warn('‚ö†Ô∏è Vari√°veis de ambiente n√£o carregadas ainda');
            return defaultValue;
        }
        
        const value = this.envVars[key] || defaultValue;
        console.log(`üîç Buscando ${key}: ${value ? 'encontrado' : 'n√£o encontrado'}`);
        return value;
    }

    // Obter chave da API
    getApiKey() {
        console.log('üîç Buscando chave da API...');
        console.log('üîç Vari√°veis dispon√≠veis:', Object.keys(this.envVars));
        const apiKey = this.get('OPENAI_API_KEY');
        
        if (!apiKey) {
            console.log('‚ùå Chave da API n√£o encontrada no .env');
            console.log('üîç Valor retornado:', apiKey);
            return null;
        }
        
        console.log('‚úÖ Chave da API encontrada:', apiKey.substring(0, 20) + '...');
        
        // Validar formato da chave
        if (!apiKey.startsWith('sk-')) {
            console.warn('‚ö†Ô∏è Formato de chave API suspeito');
            return null;
        }
        
        console.log('‚úÖ Chave da API validada com sucesso');
        return apiKey;
    }

    // Verificar se API est√° configurada
    isApiConfigured() {
        return this.getApiKey() !== null;
    }

    // Tratar erro de carregamento
    handleLoadError(error) {
        console.error('Erro no carregamento de configura√ß√µes:', error);
        
        // Usar configura√ß√µes padr√£o em caso de erro
        this.envVars = {
            OPENAI_MODEL: 'gpt-4o',
            OPENAI_TEMPERATURE: '0.7',
            OPENAI_MAX_TOKENS: '2000',
            OPENAI_BASE_URL: 'https://api.openai.com/v1',
            SESSION_TIMEOUT: '3600000',
            MAX_API_CALLS_PER_HOUR: '100',
            APP_NAME: 'Velotax Bot',
            APP_VERSION: '2.0.0',
            DEBUG_MODE: 'false',
            LOG_LEVEL: 'info'
        };
        
        this.isLoaded = true;
        console.log('üîÑ Usando configura√ß√µes padr√£o');
    }

    // Obter todas as configura√ß√µes (sem dados sens√≠veis)
    getPublicConfig() {
        const publicConfig = { ...this.envVars };
        
        // Remover dados sens√≠veis
        delete publicConfig.OPENAI_API_KEY;
        
        return publicConfig;
    }

    // Verificar integridade das configura√ß√µes
    checkIntegrity() {
        const requiredVars = [
            'OPENAI_MODEL',
            'OPENAI_TEMPERATURE',
            'OPENAI_MAX_TOKENS',
            'OPENAI_BASE_URL'
        ];
        
        console.log('üîç Verificando integridade das configura√ß√µes...');
        console.log('üìã Vari√°veis dispon√≠veis:', Object.keys(this.envVars));
        
        const missing = requiredVars.filter(varName => !this.envVars[varName]);
        
        if (missing.length > 0) {
            console.error('‚ùå Vari√°veis obrigat√≥rias ausentes:', missing);
            return false;
        }
        
        console.log('‚úÖ Integridade das configura√ß√µes verificada');
        return true;
    }
}

// ===== INST√ÇNCIA GLOBAL =====
const simpleEnvLoader = new SimpleEnvLoader();

// ===== FUN√á√ïES GLOBAIS =====

// Inicializar sistema simples
async function initializeSimpleSystem() {
    try {
        console.log('üöÄ Inicializando sistema simples...');
        
        // Carregar vari√°veis de ambiente
        const envLoaded = await simpleEnvLoader.loadEnvFile();
        if (!envLoaded) {
            console.warn('‚ö†Ô∏è Usando configura√ß√µes padr√£o');
        }
        
        // Verificar integridade
        const integrityOk = simpleEnvLoader.checkIntegrity();
        if (!integrityOk) {
            console.warn('‚ö†Ô∏è Problemas de integridade detectados, mas continuando...');
        }
        
        console.log('‚úÖ Sistema simples inicializado');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o do sistema simples:', error);
        return false;
    }
}

// Obter configura√ß√£o
function getSimpleConfig(key, defaultValue = null) {
    return simpleEnvLoader.get(key, defaultValue);
}

// Obter chave da API
function getSimpleApiKey() {
    return simpleEnvLoader.getApiKey();
}

// Verificar se API est√° configurada
function isSimpleApiConfigured() {
    return simpleEnvLoader.isApiConfigured();
}

// Exportar para uso global
window.simpleEnvLoader = simpleEnvLoader;
window.initializeSimpleSystem = initializeSimpleSystem;
window.getSimpleConfig = getSimpleConfig;
window.getSimpleApiKey = getSimpleApiKey;
window.isSimpleApiConfigured = isSimpleApiConfigured;
