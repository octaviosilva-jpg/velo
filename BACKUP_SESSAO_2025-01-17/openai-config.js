// ===== CONFIGURA√á√ÉO SEGURA DA API OPENAI =====

class OpenAIConfig {
    constructor() {
        this.apiKey = null;
        this.baseURL = 'https://api.openai.com/v1';
        this.model = 'gpt-4o';
        this.maxTokens = 2000;
        this.temperature = 0.7;
        this.isConfigured = false;
        this.securityLevel = 'high';
        this.lastApiCall = null;
        this.apiCallCount = 0;
        this.maxCallsPerHour = 100;
    }

    // Configurar a chave da API de forma segura (apenas via .env)
    setApiKey(apiKey) {
        console.warn('‚ö†Ô∏è Configura√ß√£o da API deve ser feita apenas via arquivo .env');
        throw new Error('Configura√ß√£o da API deve ser feita via arquivo .env. Edite o arquivo .env e reinicie o servidor.');
    }

    // Carregar chave salva de forma segura
    loadApiKey() {
        try {
            console.log('üîß Iniciando carregamento da chave da API...');
            console.log('üîç getSimpleApiKey dispon√≠vel?', typeof getSimpleApiKey);
            
            // Primeiro, tentar carregar do arquivo .env (se a fun√ß√£o estiver dispon√≠vel)
            if (typeof getSimpleApiKey === 'function') {
                console.log('üîç Chamando getSimpleApiKey()...');
                const envApiKey = getSimpleApiKey();
                console.log('üîç Chave retornada:', envApiKey ? envApiKey.substring(0, 20) + '...' : 'null');
                
                if (envApiKey && envApiKey !== 'sk-your-api-key-here') {
                    this.apiKey = envApiKey;
                    this.isConfigured = true;
                    console.log('‚úÖ Chave da API OpenAI carregada do arquivo .env');
                    return true;
                } else if (envApiKey === 'sk-your-api-key-here') {
                    console.log('‚ö†Ô∏è Chave da API √© placeholder, precisa ser substitu√≠da por uma chave real');
                } else {
                    console.log('‚ùå Chave da API n√£o encontrada ou inv√°lida');
                }
            } else {
                console.log('‚ÑπÔ∏è Sistema simples n√£o inicializado ainda, tentando localStorage...');
            }
            
            // Se n√£o encontrar no .env, tentar do localStorage
            const savedKey = localStorage.getItem('openai_api_key');
            if (savedKey && savedKey !== 'sk-your-api-key-here') {
                this.apiKey = savedKey;
                this.isConfigured = true;
                console.log('‚úÖ Chave da API OpenAI carregada do localStorage');
                return true;
            }
            
            console.log('‚ÑπÔ∏è Nenhuma chave da API v√°lida encontrada');
            return false;
        } catch (error) {
            console.error('‚ùå Erro ao carregar chave da API:', error);
            return false;
        }
    }

    // Verificar se est√° configurado
    isApiConfigured() {
        return this.isConfigured && this.apiKey !== null;
    }

    // Recarregar chave da API (√∫til ap√≥s inicializa√ß√£o do sistema simples)
    reloadApiKey() {
        console.log('üîÑ Recarregando chave da API...');
        return this.loadApiKey();
    }

    // Fazer requisi√ß√£o para a API com valida√ß√µes de seguran√ßa
    async makeRequest(messages, options = {}) {
        if (!this.isApiConfigured()) {
            throw new Error('API OpenAI n√£o configurada. Configure a chave da API primeiro.');
        }

        // Validar limite de chamadas por hora
        if (!this.validateApiCallLimit()) {
            throw new Error('Limite de chamadas √† API excedido. Tente novamente em uma hora.');
        }

        // Validar mensagens
        if (!messages || !Array.isArray(messages) || messages.length === 0) {
            throw new Error('Mensagens inv√°lidas para a API');
        }

        // Validar op√ß√µes
        const temperature = options.temperature || this.temperature;
        if (temperature < 0 || temperature > 1) {
            throw new Error('Temperature deve estar entre 0 e 1');
        }

        const maxTokens = options.maxTokens || this.maxTokens;
        if (maxTokens < 1 || maxTokens > 4000) {
            throw new Error('Max tokens deve estar entre 1 e 4000');
        }

        const requestBody = {
            model: options.model || this.model,
            messages: messages,
            max_tokens: maxTokens,
            temperature: temperature,
            stream: false
        };

        // Atualizar contador de chamadas
        this.updateApiCallCount();

        try {
            const response = await fetch(`${this.baseURL}/chat/completions`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Erro da API: ${errorData.error?.message || 'Erro desconhecido'}`);
            }

            const data = await response.json();
            return data.choices[0].message.content;
        } catch (error) {
            console.error('Erro na requisi√ß√£o para OpenAI:', error);
            throw error;
        }
    }

    // Limpar configura√ß√£o de forma segura
    clearConfig() {
        this.apiKey = null;
        this.isConfigured = false;
        
        // Limpar do localStorage
        localStorage.removeItem('openai_api_key');
        
        // Limpar contadores
        this.apiCallCount = 0;
        this.lastApiCall = null;
        
        console.log('üóëÔ∏è Configura√ß√£o da API OpenAI removida com seguran√ßa');
    }

    // Validar limite de chamadas √† API
    validateApiCallLimit() {
        const now = Date.now();
        const oneHour = 60 * 60 * 1000; // 1 hora em milissegundos
        
        // Resetar contador se passou uma hora
        if (this.lastApiCall && (now - this.lastApiCall) > oneHour) {
            this.apiCallCount = 0;
        }
        
        // Verificar se excedeu o limite
        if (this.apiCallCount >= this.maxCallsPerHour) {
            console.warn('‚ö†Ô∏è Limite de chamadas √† API excedido');
            return false;
        }
        
        return true;
    }

    // Atualizar contador de chamadas
    updateApiCallCount() {
        this.apiCallCount++;
        this.lastApiCall = Date.now();
        
        console.log(`üìä Chamadas √† API: ${this.apiCallCount}/${this.maxCallsPerHour}`);
    }

    // Obter estat√≠sticas de uso
    getUsageStats() {
        return {
            callsThisHour: this.apiCallCount,
            maxCallsPerHour: this.maxCallsPerHour,
            lastCall: this.lastApiCall,
            isConfigured: this.isConfigured,
            securityLevel: this.securityLevel
        };
    }

    // Validar configura√ß√£o de seguran√ßa
    validateSecurityConfig() {
        const issues = [];
        
        if (!this.apiKey) {
            issues.push('Chave da API n√£o configurada');
        }
        
        if (this.maxCallsPerHour > 1000) {
            issues.push('Limite de chamadas muito alto');
        }
        
        if (this.temperature > 0.9) {
            issues.push('Temperature muito alta pode gerar respostas inconsistentes');
        }
        
        if (issues.length > 0) {
            console.warn('‚ö†Ô∏è Problemas de seguran√ßa detectados:', issues);
            return false;
        }
        
        console.log('‚úÖ Configura√ß√£o de seguran√ßa validada');
        return true;
    }
}

// Inst√¢ncia global
const openaiConfig = new OpenAIConfig();

// Inicializar automaticamente quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üîß Inicializando OpenAIConfig...');
    
    // Aguardar um pouco para o sistema simples estar dispon√≠vel
    setTimeout(async () => {
        try {
            const loaded = await openaiConfig.loadApiKey();
            if (loaded) {
                console.log('‚úÖ OpenAIConfig inicializado com sucesso');
            } else {
                console.log('‚ö†Ô∏è OpenAIConfig n√£o p√¥de carregar a chave da API');
            }
        } catch (error) {
            console.error('‚ùå Erro ao inicializar OpenAIConfig:', error);
        }
    }, 1000);
});

// ===== PROMPTS E BASE DE CONHECIMENTO =====

class KnowledgeBase {
    constructor() {
        this.systemPrompts = {
            // Prompt principal para respostas do Reclame Aqui
            raResponse: `Voc√™ √© um assistente especializado em atendimento ao cliente para a empresa Velotax, especializada em servi√ßos financeiros e de cr√©dito.

CONTEXTO DA EMPRESA:
- Velotax √© uma empresa de servi√ßos financeiros
- Oferece empr√©stimos, cr√©dito pessoal, cr√©dito do trabalhador
- Trabalha com restitui√ß√µes, FGTS, e servi√ßos banc√°rios
- Possui parceria com Celcoin para servi√ßos financeiros
- Oferece chave Pix e servi√ßos de portabilidade

ESTILO DE RESPOSTA OBRIGAT√ìRIO:
- Tom profissional, emp√°tico e respeitoso
- Linguagem clara e acess√≠vel
- Foco na solu√ß√£o e no cliente
- Sempre agradecer o contato
- Demonstrar preocupa√ß√£o genu√≠na
- Oferecer canais de atendimento
- Ser espec√≠fico sobre prazos e procedimentos

ESTRUTURA DA RESPOSTA:
1. Agradecimento inicial
2. Reconhecimento da situa√ß√£o
3. Explica√ß√£o clara da solu√ß√£o
4. Pr√≥ximos passos ou orienta√ß√µes
5. Disponibilidade para esclarecimentos
6. Assinatura da equipe

IMPORTANTE: 
- Sempre entregue o texto final pronto para publica√ß√£o
- Nunca entregue apenas estrutura ou instru√ß√µes
- Formule respostas completas e personalizadas
- Baseie-se nas informa√ß√µes espec√≠ficas fornecidas
- Mantenha o tom profissional da Velotax`,

            // Prompt para modera√ß√£o do Reclame Aqui
            moderation: `Voc√™ √© um especialista em modera√ß√£o de conte√∫do para o Reclame Aqui, com foco em bancos e institui√ß√µes financeiras.

BASE DE CONHECIMENTO - REGRAS DE MODERA√á√ÉO:

REGRAS GERAIS:
- Manter qualidade, seriedade e veracidade das informa√ß√µes
- Liberdade de express√£o respeitando limites legais
- Estado neutro e imparcial
- Prote√ß√£o de dados pessoais (LGPD)
- Combate a fake news e desinforma√ß√£o

CRIT√âRIOS DE MODERA√á√ÉO:
1. Conte√∫do de outra empresa (n√£o relacionado √† Velotax)
2. Reclama√ß√µes trabalhistas (n√£o s√£o de responsabilidade da empresa)
3. Conte√∫do impr√≥prio, ofensivo ou discriminat√≥rio
4. Reclama√ß√µes duplicadas
5. Reclama√ß√µes de terceiros (n√£o do pr√≥prio cliente)
6. Casos de fraude comprovada
7. Empresa n√£o violou direitos do consumidor

ESTRUTURA DA SOLICITA√á√ÉO:
1. Identifica√ß√£o clara do problema
2. Justificativa baseada nas regras
3. Evid√™ncias ou argumentos
4. Solicita√ß√£o formal de modera√ß√£o
5. Tom respeitoso e profissional

IMPORTANTE:
- Analise cuidadosamente cada caso
- Baseie-se nas regras oficiais do Reclame Aqui
- Seja espec√≠fico sobre o motivo da modera√ß√£o
- Mantenha tom profissional e imparcial`,

            // Prompt para explica√ß√µes
            explanations: `Voc√™ √© um especialista em atendimento ao cliente da Velotax, respons√°vel por fornecer explica√ß√µes claras sobre produtos e servi√ßos.

PRODUTOS E SERVI√áOS VELOTAX:

1. CR√âDITO DO TRABALHADOR:
- Linha de cr√©dito consignado
- Parcelas descontadas do sal√°rio
- Valor liberado via Pix (CPF)
- Idade: 18-62 anos (homens) / 18-65 anos (mulheres)
- CLT h√° pelo menos 12 meses
- Empresa com CNPJ ativo h√° 36+ meses

2. CR√âDITO PESSOAL:
- An√°lise baseada em Open Finance
- Faixa et√°ria: 18-75 anos
- Libera√ß√£o em at√© 30 minutos
- Chave Pix obrigatoriamente CPF
- Pagamento via Pix ou cart√£o

3. RESTITUI√á√ÉO:
- Processamento de restitui√ß√µes
- Consulta de malha fina
- Regulariza√ß√£o de pend√™ncias

4. PORTABILIDADE PIX:
- Transfer√™ncia de chave Pix entre institui√ß√µes
- Processo via app Velotax
- Autoriza√ß√£o necess√°ria

ESTILO DE EXPLICA√á√ÉO:
- Linguagem clara e did√°tica
- Explica√ß√£o passo a passo
- Foco na praticidade
- Exemplos quando necess√°rio
- Tom amig√°vel e profissional`
        };
    }

    // Obter prompt do sistema
    getSystemPrompt(type) {
        return this.systemPrompts[type] || this.systemPrompts.raResponse;
    }

    // Construir mensagens para a API
    buildMessages(type, userInput, context = {}) {
        const systemPrompt = this.getSystemPrompt(type);
        const messages = [
            {
                role: "system",
                content: systemPrompt
            }
        ];

        // Adicionar contexto espec√≠fico se fornecido
        if (context.additionalInfo) {
            messages.push({
                role: "system",
                content: `INFORMA√á√ïES ADICIONAIS DO CONTEXTO:\n${context.additionalInfo}`
            });
        }

        // Adicionar entrada do usu√°rio
        messages.push({
            role: "user",
            content: userInput
        });

        return messages;
    }
}

// Inst√¢ncia global da base de conhecimento
const knowledgeBase = new KnowledgeBase();

// ===== FUN√á√ïES DE INTEGRA√á√ÉO =====

// Fun√ß√£o para gerar resposta do Reclame Aqui via API
async function gerarRespostaRAViaAPI(dadosFormulario) {
    try {
        console.log('üîÑ Enviando solicita√ß√£o de resposta RA para o servidor...');
        
        const response = await fetch('/api/generate-response', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                dadosFormulario: dadosFormulario
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro na requisi√ß√£o');
        }
        
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ Resposta RA gerada com sucesso via servidor');
            return data.result;
        } else {
            throw new Error(data.error || 'Erro ao gerar resposta RA');
        }
    } catch (error) {
        console.error('Erro ao gerar resposta RA via API:', error);
        throw error;
    }
}

// Fun√ß√£o para gerar modera√ß√£o via API (usando servidor como proxy)
async function gerarModeracaoViaAPI(dadosModeracao) {
    try {
        console.log('üîÑ Enviando solicita√ß√£o de modera√ß√£o para o servidor...');
        
        const response = await fetch('/api/generate-moderation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                dadosModeracao: dadosModeracao
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Erro na requisi√ß√£o');
        }
        
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ Modera√ß√£o gerada com sucesso via servidor');
            return data.result;
        } else {
            throw new Error(data.error || 'Erro ao gerar modera√ß√£o');
        }
    } catch (error) {
        console.error('Erro ao gerar modera√ß√£o via API:', error);
        throw error;
    }
}

// Fun√ß√£o para gerar explica√ß√£o via API
async function gerarExplicacaoViaAPI(tema, contexto = '') {
    try {
        const prompt = `
TEMA SOLICITADO: ${tema}

${contexto ? `CONTEXTO ADICIONAL: ${contexto}` : ''}

INSTRU√á√ïES:
Forne√ßa uma explica√ß√£o completa e clara sobre o tema solicitado. A explica√ß√£o deve:
1. Ser did√°tica e f√°cil de entender
2. Incluir informa√ß√µes pr√°ticas
3. Explicar procedimentos passo a passo quando aplic√°vel
4. Manter tom profissional e amig√°vel
5. Ser espec√≠fica para os servi√ßos da Velotax

Formule uma explica√ß√£o detalhada e √∫til.`;

        const messages = knowledgeBase.buildMessages('explanations', prompt);
        const explicacao = await openaiConfig.makeRequest(messages);
        
        return explicacao;
    } catch (error) {
        console.error('Erro ao gerar explica√ß√£o via API:', error);
        throw error;
    }
}

// Exportar para uso global
window.openaiConfig = openaiConfig;
window.knowledgeBase = knowledgeBase;
window.gerarRespostaRAViaAPI = gerarRespostaRAViaAPI;
window.gerarModeracaoViaAPI = gerarModeracaoViaAPI;
window.gerarExplicacaoViaAPI = gerarExplicacaoViaAPI;
