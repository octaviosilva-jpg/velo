// Bot Interno Velotax - Assistente Especializado
// Sistema de autentica√ß√£o gerenciado pelo auth.js

// ================== EXEMPLO DE USO COMPLETO ==================
/*
<!DOCTYPE html>
<html>
<head>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
</head>
<body>
    <div id="login-overlay">
        <button id="google-signin-button">Entrar com Google</button>
    </div>
    
    <div id="app" class="hidden">
        <h1>Bem-vindo!</h1>
        <button id="logout-button">Sair</button>
    </div>
    
    <script>
        // Cole todo o c√≥digo JavaScript aqui
    </script>
</body>
</html>
*/

// ================== FIM DO SCRIPT SSO GOOGLE ==================

// ================== CONFIGURA√á√ïES DA EMPRESA ==================
const NOME_EMPRESA = 'Velotax';
const DOMINIO_CORPORATIVO = '@velotax.com.br';
const SITE_EMPRESA = 'https://www.velotax.com.br';

// Sistema de hist√≥rico
let historicoStats = [];
const HISTORICO_KEY = 'velotax_historico_stats';

// Carregar estat√≠sticas globais do servidor
async function carregarEstatisticasGlobais() {
    try {
        console.log('üìä Carregando estat√≠sticas globais do servidor...');
        const response = await fetch('/api/estatisticas-globais');
        const data = await response.json();
        
        if (data.success) {
            estatisticasGlobais = data.estatisticas;
            console.log('‚úÖ Estat√≠sticas globais carregadas:', estatisticasGlobais);
            atualizarEstatisticasNaInterface();
        } else {
            console.error('‚ùå Erro ao carregar estat√≠sticas globais:', data.error);
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar estat√≠sticas globais:', error);
    }
}

// Atualizar estat√≠sticas na interface
function atualizarEstatisticasNaInterface() {
    console.log('üîÑ Atualizando interface com estat√≠sticas globais:', estatisticasGlobais);
    
    // Atualizar contadores na interface com dados globais do servidor
    const statItems = document.querySelectorAll('.stat-item');
    
    if (statItems.length >= 2) {
        // Primeiro item: Respostas Hoje
        const respostasValue = statItems[0].querySelector('.stat-value');
        if (respostasValue) {
            respostasValue.textContent = estatisticasGlobais.respostas_geradas || 0;
            console.log('üìù Respostas atualizadas:', estatisticasGlobais.respostas_geradas);
        }
        
        // Segundo item: Modera√ß√µes
        const moderacoesValue = statItems[1].querySelector('.stat-value');
        if (moderacoesValue) {
            moderacoesValue.textContent = estatisticasGlobais.moderacoes_geradas || 0;
            console.log('‚öñÔ∏è Modera√ß√µes atualizadas:', estatisticasGlobais.moderacoes_geradas);
        }
    } else {
        console.log('‚ö†Ô∏è Elementos de estat√≠sticas n√£o encontrados');
    }
    
    // Atualizar hist√≥rico se estiver vis√≠vel
    const historicoPanel = document.getElementById('historico-panel');
    if (historicoPanel && historicoPanel.style.display !== 'none') {
        exibirHistorico();
    }
}

// Hist√≥rico de respostas
let historicoRespostas = [];

// Rascunhos salvos
let rascunhos = [];

// Prompt mestre para IA OpenAI
const PROMPT_MASTER_OPENAI = `Voc√™ √© o assistente especializado da ${NOME_EMPRESA} para comunica√ß√£o com clientes e modera√ß√£o no Reclame Aqui. Sua fun√ß√£o √© gerar respostas completas, claras e no tom correto com base nos dados recebidos da aba "Respostas RA".

### Regras para formula√ß√£o de respostas:
1. **Respostas Reclame Aqui**
   - Tom formal, t√©cnico, cordial e imparcial
   - Estruture em par√°grafos curtos, objetivos e claros
   - Baseie respostas nas cl√°usulas da CCB quando aplic√°vel
   - Explique quest√µes de chave Pix e exclus√£o de cadastro conforme pol√≠ticas internas
   - Para atrasos de cr√©dito, cite prazos oficiais (ex.: Banco do Brasil: at√© o pr√≥ximo dia √∫til)

2. **E-mails para clientes**
   - Tom pr√≥ximo, amig√°vel e encorajador
   - Explique pr√≥ximos passos de forma simples

3. **Textos de modera√ß√£o (RA)**
   - Seguir rigorosamente os manuais oficiais do RA
   - Justificar decis√µes de forma objetiva e formal
   - Evitar qualquer tom emocional ou subjetivo

4. **Confirma√ß√µes ou avisos internos**
   - Texto curto, informativo e direto

### Instru√ß√£o final:
Com base nos dados fornecidos, formule o texto final pronto para envio ou publica√ß√£o no formato correspondente ao tipo de solicita√ß√£o.
- N√£o inclua r√≥tulos extras
- Entregue apenas o conte√∫do j√° formatado
- Garanta coer√™ncia, clareza e alinhamento com padr√µes da ${NOME_EMPRESA}`;


// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    initializeBot();
    setupEventListeners();
    inicializarHistorico();
    
    // Verificar dados do localStorage ao carregar a p√°gina
    setTimeout(() => {
        sincronizarDadosLocais();
    }, 2000);
});

// Inicializa√ß√£o do bot
function initializeBot() {
    console.log(`Bot Interno ${NOME_EMPRESA} - Assistente Especializado inicializado`);
    console.log('üîß Testando fun√ß√µes b√°sicas...');
    
    // Teste b√°sico
    try {
        console.log('‚úÖ JavaScript funcionando');
        console.log('‚úÖ Fun√ß√µes carregadas:', {
            gerarRespostaOpenAI: typeof gerarRespostaOpenAI,
            avaliarResposta: typeof avaliarResposta,
            avaliarModeracao: typeof avaliarModeracao
        });
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o:', error);
    }
    
    showSuccessMessage('Bot conectado e pronto para uso!');
}

// Configura√ß√£o dos event listeners
function setupEventListeners() {
    // Navega√ß√£o entre ferramentas
    document.querySelectorAll('[data-tool]').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const tool = this.getAttribute('data-tool');
            switchTool(tool);
        });
    });
}

// Troca entre ferramentas
function switchTool(toolName) {
    // Remove active de todos os links e pain√©is
    document.querySelectorAll('.nav-link').forEach(link => link.classList.remove('active'));
    document.querySelectorAll('.tool-panel').forEach(panel => panel.classList.remove('active'));
    
    // Adiciona active ao link e painel selecionado
    document.querySelector(`[data-tool="${toolName}"]`).classList.add('active');
    document.getElementById(`${toolName}-tool`).classList.add('active');
}

// ===== FUN√á√ïES DO RECLAME AQUI COM IA OPENAI =====

async function gerarRespostaOpenAI() {
    console.log('üöÄ Fun√ß√£o gerarRespostaOpenAI chamada');
    console.log('üîç Verificando elementos do DOM...');
    
    const tipoSituacao = document.getElementById('tipo-situacao');
    const motivoSolicitacao = document.getElementById('motivo-solicitacao');
    const reclamacao = document.getElementById('reclamacao-text');
    const solucao = document.getElementById('solucao-implementada');
    const historico = document.getElementById('historico-atendimento');
    const observacoes = document.getElementById('observacoes-internas');
    
    console.log('üîç Elementos encontrados:', {
        tipoSituacao: tipoSituacao ? 'OK' : 'N√ÉO ENCONTRADO',
        motivoSolicitacao: motivoSolicitacao ? 'OK' : 'N√ÉO ENCONTRADO',
        reclamacao: reclamacao ? 'OK' : 'N√ÉO ENCONTRADO',
        solucao: solucao ? 'OK' : 'N√ÉO ENCONTRADO',
        historico: historico ? 'OK' : 'N√ÉO ENCONTRADO',
        observacoes: observacoes ? 'OK' : 'N√ÉO ENCONTRADO'
    });
    
    if (!tipoSituacao || !motivoSolicitacao || !reclamacao || !solucao) {
        console.error('‚ùå Elementos obrigat√≥rios n√£o encontrados!');
        showErrorMessage('Erro: Elementos do formul√°rio n√£o encontrados. Verifique se a p√°gina carregou corretamente.');
        return;
    }
    
    const tipoSituacaoValue = tipoSituacao.value;
    const motivoSolicitacaoValue = motivoSolicitacao.value;
    const reclamacaoValue = reclamacao.value;
    const solucaoValue = solucao.value;
    const historicoValue = historico.value;
    const observacoesValue = observacoes.value;
    
    console.log('Dados coletados:', {
        tipoSituacao: tipoSituacaoValue,
        motivoSolicitacao: motivoSolicitacaoValue,
        reclamacao: reclamacaoValue.substring(0, 50) + '...',
        solucao: solucaoValue.substring(0, 50) + '...'
    });
    
    // Valida√ß√£o dos campos obrigat√≥rios
    if (!tipoSituacaoValue || !motivoSolicitacaoValue || !reclamacaoValue || (typeof reclamacaoValue === 'string' && !reclamacaoValue.trim()) || !solucaoValue || (typeof solucaoValue === 'string' && !solucaoValue.trim())) {
        console.log('Valida√ß√£o falhou - campos obrigat√≥rios n√£o preenchidos');
        showErrorMessage('Por favor, preencha todos os campos obrigat√≥rios (*).');
        return;
    }
    
    console.log('Valida√ß√£o passou - iniciando gera√ß√£o de resposta');
    
    // Mostrar loading
    showLoadingMessage('Gerando resposta com IA OpenAI...');
    
    try {
        console.log('Preparando dados para IA OpenAI');
        
        // Preparar dados para envio ao servidor
        const dadosResposta = {
            tipo_solicitacao: tipoSituacaoValue,
            motivo_solicitacao: motivoSolicitacaoValue,
            texto_cliente: reclamacaoValue,
            solucao_implementada: solucaoValue,
            historico_atendimento: historicoValue,
            observacoes_internas: observacoesValue,
            timestamp: new Date().toISOString()
        };
        
        console.log('Chamando servidor...');
        
        // Chamar servidor para gerar resposta
        const resposta = await gerarRespostaRAViaAPI(dadosResposta);
        
        console.log('Resposta recebida:', resposta.substring(0, 100) + '...');
        
        // Exibir resposta
        document.getElementById('texto-resposta-gpt5').value = resposta;
        document.getElementById('resposta-gpt5').style.display = 'block';
        
        console.log('Resposta exibida na interface');
        
        // Salvar no hist√≥rico
        const itemHistorico = {
            id: Date.now(),
            dados: dadosResposta,
            resposta: resposta,
            status: 'gerada',
            timestamp: new Date().toISOString()
        };
        historicoRespostas.unshift(itemHistorico);
    
    // Recarregar estat√≠sticas globais do servidor
    carregarEstatisticasGlobais();
    
        showSuccessMessage('Resposta gerada com sucesso pela IA OpenAI!');
        
    } catch (error) {
        console.error('Erro ao gerar resposta:', error);
        showErrorMessage('Erro ao gerar resposta. Tente novamente.');
    }
}

// Fun√ß√£o para chamar o endpoint do servidor para gerar resposta RA
async function gerarRespostaRAViaAPI(dadosResposta) {
    try {
        console.log('üì° Enviando dados para o servidor...');
        
        // Obter dados do usu√°rio autenticado
        const userData = window.auth?.dadosUsuario ? {
            nome: window.auth.dadosUsuario().nome,
            email: window.auth.dadosUsuario().email,
            funcao: window.auth.dadosUsuario().funcao,
            departamento: window.auth.dadosUsuario().departamento
        } : null;
        
        console.log('üë§ Dados do usu√°rio para gera√ß√£o:', userData);
        
        const response = await fetch('/api/gerar-resposta', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                dadosFormulario: dadosResposta,
                userData: userData
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ Resposta gerada com sucesso pelo servidor');
            return data.result;
        } else {
            console.error('‚ùå Erro do servidor:', data.error);
            throw new Error(data.error || 'Erro desconhecido do servidor');
        }
        
    } catch (error) {
        console.error('‚ùå Erro na comunica√ß√£o com o servidor:', error);
        throw error;
    }
}

async function chamarOpenAI(dados) {
    console.log('chamarOpenAI iniciada com dados:', dados.tipo_solicitacao);
    
    // Chamada real para API OpenAI via servidor
    
    const prompt = `${PROMPT_MASTER_OPENAI}

### Dados recebidos:
- Tipo de solicita√ß√£o: ${dados.tipo_solicitacao}
- Motivo da solicita√ß√£o: ${dados.motivo_solicitacao}
- Reclama√ß√£o do cliente: ${dados.texto_cliente}
- Solu√ß√£o implementada: ${dados.solucao_implementada}
- Hist√≥rico de atendimento: ${dados.historico_atendimento || 'Nenhum'}
- Observa√ß√µes internas: ${dados.observacoes_internas || 'Nenhuma'}

Gere a resposta apropriada:`;

    console.log('Prompt preparado, simulando delay da API...');
    
    // Simular delay da API
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('Delay conclu√≠do, gerando resposta simulada...');
    
    // Resposta simulada baseada no tipo de situa√ß√£o
    const resposta = gerarRespostaSimulada(dados);
    
    console.log('Resposta simulada gerada:', resposta.substring(0, 50) + '...');
    
    return resposta;
}

function gerarRespostaSimulada(dados) {
    let resposta = '';
    
    // Sauda√ß√£o
    resposta += 'Prezado(a) cliente,\n\n';
    
    // Conte√∫do baseado no tipo de situa√ß√£o
    switch (dados.tipo_solicitacao) {
        case 'exclusao-chave-pix-cpf':
            resposta += 'Informamos que sua solicita√ß√£o de exclus√£o de chave Pix CPF foi processada conforme solicitado.\n\n';
            resposta += 'O prazo para processamento √© de at√© 2 dias √∫teis, conforme regulamenta√ß√£o do Banco Central do Brasil.\n\n';
            break;
        case 'exclusao-cadastro':
            resposta += 'Sua solicita√ß√£o de exclus√£o de cadastro foi devidamente registrada em nossos sistemas.\n\n';
            resposta += 'A exclus√£o ser√° realizada em at√© 15 dias √∫teis, conforme previsto na Lei Geral de Prote√ß√£o de Dados (LGPD - Lei n¬∫ 13.709/2018).\n\n';
            break;
        case 'pagamento-restituicao':
            resposta += 'O pagamento de sua restitui√ß√£o foi processado conforme solicitado.\n\n';
            resposta += 'O valor ser√° creditado em sua conta em at√© 3 dias √∫teis, conforme prazo estabelecido.\n\n';
            break;
        case 'juros-abusivos':
            resposta += 'Informamos que todos os juros aplicados est√£o em conformidade com a legisla√ß√£o vigente e as cl√°usulas contratuais estabelecidas.\n\n';
            resposta += 'Nossos c√°lculos seguem rigorosamente as diretrizes do Banco Central do Brasil.\n\n';
            break;
        case 'demora-resolucao':
            resposta += 'Lamentamos pelo tempo decorrido na resolu√ß√£o de sua solicita√ß√£o.\n\n';
            resposta += 'Nossa equipe est√° trabalhando para acelerar o processo e resolver sua situa√ß√£o o mais breve poss√≠vel.\n\n';
            break;
        default:
            resposta += 'Sua solicita√ß√£o foi devidamente registrada em nossos sistemas.\n\n';
            resposta += 'Nossa equipe est√° analisando o caso e entrar√° em contato em breve.\n\n';
    }
    
    // Adicionar solu√ß√£o implementada
    if (dados.solucao_implementada) {
        resposta += dados.solucao_implementada + '\n\n';
    }
    
    // Adicionar hist√≥rico se houver
    if (dados.historico_atendimento) {
        resposta += 'Conforme j√° hav√≠amos encaminhado anteriormente, ' + dados.historico_atendimento.toLowerCase() + '.\n\n';
    }
    
    // Fechamento baseado no motivo
    switch (dados.motivo_solicitacao) {
        case 'pedido-desculpas':
            resposta += 'Pedimos desculpas pelo transtorno causado e agradecemos sua compreens√£o.\n\n';
            break;
        case 'confirmacao-solucao':
            resposta += 'Consideramos este assunto encerrado e agradecemos sua compreens√£o.\n\n';
            break;
        default:
            resposta += 'Seguimos √† disposi√ß√£o para ajudar.\n\n';
    }
    
    return resposta.trim();
}

// ===== FUN√á√ïES DE AVALIA√á√ÉO E REFORMULA√á√ÉO =====

async function avaliarResposta(tipoAvaliacao) {
    console.log('üéØ Fun√ß√£o avaliarResposta chamada com tipo:', tipoAvaliacao);
    
    const respostaAtual = document.getElementById('texto-resposta-gpt5').value;
    
    console.log('üìù Resposta atual capturada:', respostaAtual ? 'OK' : 'VAZIO');
    
    if (!respostaAtual || (typeof respostaAtual === 'string' && !respostaAtual.trim())) {
        console.log('‚ùå Resposta vazia, mostrando erro');
        showErrorMessage('N√£o h√° resposta para avaliar.');
        return;
    }
    
    // Obter dados atuais do formul√°rio
    const dadosAtuais = {
        tipo_solicitacao: document.getElementById('tipo-situacao').value,
        motivo_solicitacao: document.getElementById('motivo-solicitacao').value,
        texto_cliente: document.getElementById('reclamacao-text').value,
        solucao_implementada: document.getElementById('solucao-implementada').value,
        historico_atendimento: document.getElementById('historico-atendimento').value,
        observacoes_internas: document.getElementById('observacoes-internas').value,
        timestamp: new Date().toISOString()
    };
    
    if (tipoAvaliacao === 'coerente') {
        console.log('‚úÖ Marcando como coerente - iniciando salvamento');
        
        // Marcar como aprovada
        const itemAtual = historicoRespostas[0];
        if (itemAtual) {
            itemAtual.status = 'aprovada';
            itemAtual.resposta_aprovada = respostaAtual;
            console.log('üìù Item atual marcado como aprovado');
        } else {
            console.log('‚ö†Ô∏è Nenhum item atual encontrado no hist√≥rico');
        }
        
        // Salvar como modelo para futuras solicita√ß√µes similares
        console.log('üöÄ Chamando salvarRespostaComoModelo...');
        
        // Verificar se houve feedback anterior para incluir no aprendizado
        const itemComFeedback = historicoRespostas.find(item => 
            item.feedback && item.status === 'reformulada_com_feedback'
        );
        
        if (itemComFeedback) {
            console.log('üß† Incluindo feedback anterior no aprendizado...');
            dadosAtuais.feedback_anterior = itemComFeedback.feedback;
            dadosAtuais.resposta_anterior = itemComFeedback.resposta_anterior;
        }
        
        await salvarRespostaComoModelo(dadosAtuais, respostaAtual);
        
        // Atualizar estat√≠sticas globais ap√≥s salvar
        carregarEstatisticasGlobais();
        
    } else if (tipoAvaliacao === 'reformular') {
        // Solicitar feedback do usu√°rio para aprendizado
        solicitarFeedbackParaReformulacao(dadosAtuais, respostaAtual);
    }
}

// Fun√ß√£o para salvar resposta como modelo quando marcada como coerente
async function salvarRespostaComoModelo(dadosAtuais, respostaAprovada) {
    try {
        console.log('üöÄ FUN√á√ÉO salvarRespostaComoModelo INICIADA!');
        console.log('üíæ Salvando resposta como modelo:', dadosAtuais.tipo_solicitacao);
        console.log('üìù Dados capturados:', {
            tipo_solicitacao: dadosAtuais.tipo_solicitacao,
            motivo_solicitacao: dadosAtuais.motivo_solicitacao,
            resposta_length: respostaAprovada ? respostaAprovada.length : 0
        });
        
        // 1. Salvar no localStorage como backup
        console.log('üíæ Salvando no localStorage como backup...');
        const modeloLocal = {
            id: Date.now(),
            timestamp: new Date().toISOString(),
            tipo_situacao: dadosAtuais.tipo_solicitacao,
            motivo_solicitacao: dadosAtuais.motivo_solicitacao,
            dadosFormulario: dadosAtuais,
            respostaAprovada: respostaAprovada,
            contexto: {
                tipoSituacao: dadosAtuais.tipo_solicitacao,
                motivoSolicitacao: dadosAtuais.motivo_solicitacao
            }
        };
        
        // Carregar modelos existentes do localStorage
        const modelosExistentes = JSON.parse(localStorage.getItem('modelos_respostas_coerentes') || '[]');
        modelosExistentes.unshift(modeloLocal); // Adicionar no in√≠cio
        
        // Manter apenas os √∫ltimos 50 modelos no localStorage
        if (modelosExistentes.length > 50) {
            modelosExistentes.splice(50);
        }
        
        localStorage.setItem('modelos_respostas_coerentes', JSON.stringify(modelosExistentes));
        console.log('‚úÖ Modelo salvo no localStorage:', modeloLocal.id);
        
        // 2. Tentar salvar no servidor
        console.log('üì° Enviando dados para o servidor...');
        
        // Obter dados do usu√°rio autenticado
        const userData = window.auth?.dadosUsuario ? {
            nome: window.auth.dadosUsuario().nome,
            email: window.auth.dadosUsuario().email,
            funcao: window.auth.dadosUsuario().funcao,
            departamento: window.auth.dadosUsuario().departamento
        } : null;
        
        console.log('üë§ Dados do usu√°rio para envio:', userData);
        
        const response = await fetch('/api/save-modelo-resposta', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                dadosFormulario: dadosAtuais,
                respostaAprovada: respostaAprovada,
                userData: userData
            })
        });
        
        console.log('üì° Resposta do servidor:', response.status, response.statusText);
        const data = await response.json();
        console.log('üìù Dados retornados pelo servidor:', data);
        
        if (data.success) {
            console.log('‚úÖ Modelo salvo com sucesso no servidor:', data.modeloId);
            showSuccessMessage(`‚úÖ Resposta salva como modelo para "${dadosAtuais.tipo_solicitacao}"! Futuras solicita√ß√µes similares usar√£o este exemplo como refer√™ncia.`);
        } else {
            console.error('‚ùå Erro do servidor:', data.error);
            console.log('‚ö†Ô∏è Modelo salvo apenas no localStorage devido ao erro do servidor');
            showSuccessMessage(`‚úÖ Resposta salva como modelo (backup local) para "${dadosAtuais.tipo_solicitacao}"!`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar modelo:', error);
        console.log('‚ö†Ô∏è Modelo salvo apenas no localStorage devido ao erro');
        showSuccessMessage(`‚úÖ Resposta salva como modelo (backup local) para "${dadosAtuais.tipo_solicitacao}"!`);
    }
}

// Fun√ß√£o para sincronizar dados do localStorage com o servidor (vers√£o simplificada)
async function sincronizarDadosLocais() {
    try {
        console.log('üîÑ Verificando dados do localStorage...');
        
        // Carregar dados do localStorage
        const modelosRespostas = JSON.parse(localStorage.getItem('modelos_respostas_coerentes') || '[]');
        
        if (modelosRespostas.length === 0) {
            console.log('üì≠ Nenhum modelo local para sincronizar');
            return;
        }
        
        console.log(`üìä Encontrados ${modelosRespostas.length} modelos no localStorage`);
        console.log('üí° Os dados est√£o salvos localmente e ser√£o usados pelo sistema');
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar dados locais:', error);
    }
}

// Fun√ß√£o para visualizar modelos salvos no localStorage
function visualizarModelosSalvos() {
    const modelos = JSON.parse(localStorage.getItem('modelos_respostas_coerentes') || '[]');
    
    if (modelos.length === 0) {
        showErrorMessage('Nenhum modelo salvo encontrado no localStorage.');
        return;
    }
    
    let html = `
        <div class="modal fade" id="modalModelosSalvos" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fas fa-database me-2"></i>
                            Modelos de Respostas Coerentes Salvos
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Total de modelos salvos:</strong> ${modelos.length}
                        </div>
                        <div class="row">
    `;
    
    modelos.forEach((modelo, index) => {
        const dataFormatada = new Date(modelo.timestamp).toLocaleString('pt-BR');
        html += `
            <div class="col-md-6 mb-3">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="fas fa-file-alt me-2"></i>
                            Modelo #${index + 1}
                        </h6>
                        <small class="text-muted">ID: ${modelo.id}</small>
                    </div>
                    <div class="card-body">
                        <p><strong>Tipo:</strong> ${modelo.tipo_situacao}</p>
                        <p><strong>Motivo:</strong> ${modelo.motivo_solicitacao}</p>
                        <p><strong>Data:</strong> ${dataFormatada}</p>
                        <p><strong>Resposta:</strong></p>
                        <div class="bg-light p-2 rounded" style="max-height: 200px; overflow-y: auto;">
                            ${modelo.respostaAprovada.substring(0, 200)}${modelo.respostaAprovada.length > 200 ? '...' : ''}
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    
    html += `
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-danger" onclick="limparModelosSalvos()">
                            <i class="fas fa-trash me-2"></i>
                            Limpar Todos os Modelos
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remover modal existente se houver
    const modalExistente = document.getElementById('modalModelosSalvos');
    if (modalExistente) {
        modalExistente.remove();
    }
    
    // Adicionar modal ao DOM
    document.body.insertAdjacentHTML('beforeend', html);
    
    // Mostrar modal
    const modal = new bootstrap.Modal(document.getElementById('modalModelosSalvos'));
    modal.show();
}

// Fun√ß√£o para limpar modelos salvos
function limparModelosSalvos() {
    if (confirm('Tem certeza que deseja limpar todos os modelos salvos? Esta a√ß√£o n√£o pode ser desfeita.')) {
        localStorage.removeItem('modelos_respostas_coerentes');
        showSuccessMessage('‚úÖ Todos os modelos salvos foram removidos.');
        
        // Fechar modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('modalModelosSalvos'));
        if (modal) {
            modal.hide();
        }
    }
}

// Fun√ß√£o para solicitar feedback do usu√°rio antes da reformula√ß√£o
function solicitarFeedbackParaReformulacao(dadosAtuais, respostaAtual) {
    // Criar modal para feedback
    const modalHTML = `
        <div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="feedbackModalLabel">
                            <i class="fas fa-comment-dots me-2"></i>
                            Feedback para Aprendizado
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="feedback-text" class="form-label">
                                <strong>Por que a resposta est√° incoerente?</strong>
                            </label>
                            <p class="text-muted small">Descreva o que est√° errado para que o sistema aprenda e melhore futuras respostas.</p>
                            <textarea class="form-control" id="feedback-text" rows="4" 
                                placeholder="Ex: Tom inadequado, informa√ß√µes incorretas, falta de clareza, n√£o condiz com a solu√ß√£o implementada..."></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label"><strong>Problemas identificados:</strong></label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="tom-inadequado" id="problema-tom">
                                <label class="form-check-label" for="problema-tom">
                                    Tom inadequado (muito formal/informal)
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="informacoes-incorretas" id="problema-info">
                                <label class="form-check-label" for="problema-info">
                                    Informa√ß√µes incorretas ou imprecisas
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="nao-condiz-solucao" id="problema-solucao">
                                <label class="form-check-label" for="problema-solucao">
                                    N√£o condiz com a solu√ß√£o implementada
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="falta-clareza" id="problema-clareza">
                                <label class="form-check-label" for="problema-clareza">
                                    Falta de clareza ou objetividade
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="nao-empatico" id="problema-empatia">
                                <label class="form-check-label" for="problema-empatia">
                                    Falta de empatia com o cliente
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="outro" id="problema-outro">
                                <label class="form-check-label" for="problema-outro">
                                    Outro problema
                                </label>
                            </div>
                        </div>
                        
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Importante:</strong> Este feedback ser√° usado para melhorar futuras respostas do sistema.
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i>
                            Cancelar
                        </button>
                        <button type="button" class="btn btn-warning" onclick="processarFeedbackReformulacao()">
                            <i class="fas fa-redo me-2"></i>
                            Reformular com Feedback
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remover modal anterior se existir
    const modalAnterior = document.getElementById('feedbackModal');
    if (modalAnterior) {
        modalAnterior.remove();
    }
    
    // Adicionar modal ao body
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // Armazenar dados para uso posterior
    window.dadosReformulacao = dadosAtuais;
    window.respostaReformulacao = respostaAtual;
    
    // Mostrar modal
    const modal = new bootstrap.Modal(document.getElementById('feedbackModal'));
    modal.show();
}

// Fun√ß√£o para processar o feedback e reformular
async function processarFeedbackReformulacao() {
    const feedbackText = document.getElementById('feedback-text').value.trim();
    const checkboxes = document.querySelectorAll('#feedbackModal input[type="checkbox"]:checked');
    const problemas = Array.from(checkboxes).map(cb => cb.value);
    
    if (!feedbackText && problemas.length === 0) {
        showErrorMessage('Por favor, forne√ßa um feedback ou selecione pelo menos um problema identificado.');
        return;
    }
    
    // Combinar feedback
    let feedbackCompleto = '';
    if (feedbackText) {
        feedbackCompleto += feedbackText;
    }
    if (problemas.length > 0) {
        feedbackCompleto += '\n\nProblemas identificados: ' + problemas.join(', ');
    }
    
    // Feedback ser√° aplicado diretamente no script de formula√ß√£o
    // N√£o √© necess√°rio armazenar temporariamente
    console.log('üìù Feedback ser√° aplicado diretamente no script de formula√ß√£o para aprendizado imediato');
    
    // Fechar modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('feedbackModal'));
    modal.hide();
    
    // Mostrar loading
    showLoadingMessage('Reformulando resposta com base no seu feedback...');
    
    try {
        const novaResposta = await reformularRespostaComFeedback(
            window.dadosReformulacao, 
            window.respostaReformulacao, 
            feedbackCompleto
        );
            
            // Atualizar resposta na interface
            document.getElementById('texto-resposta-gpt5').value = novaResposta;
            
            // Salvar no hist√≥rico
            const itemHistorico = {
                id: Date.now(),
            dados: window.dadosReformulacao,
                resposta: novaResposta,
            resposta_anterior: window.respostaReformulacao,
            feedback: feedbackCompleto,
            status: 'reformulada_com_feedback',
                timestamp: new Date().toISOString()
            };
            historicoRespostas.unshift(itemHistorico);
            
        showSuccessMessage('Resposta reformulada com sucesso baseada no seu feedback!');
        
        // Limpar dados tempor√°rios
        delete window.dadosReformulacao;
        delete window.respostaReformulacao;
            
        } catch (error) {
            console.error('Erro ao reformular resposta:', error);
            showErrorMessage('Erro ao reformular resposta. Tente novamente.');
        }
    }

async function reformularRespostaComFeedback(dados, respostaAnterior, feedback) {
    // Obter dados do usu√°rio autenticado
    const userData = window.auth?.dadosUsuario ? {
        nome: window.auth.dadosUsuario().nome,
        email: window.auth.dadosUsuario().email,
        funcao: window.auth.dadosUsuario().funcao,
        departamento: window.auth.dadosUsuario().departamento
    } : null;
    
    // Chamar servidor para reformular com feedback
    const response = await fetch('/api/reformulate-response', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            dadosFormulario: dados,
            respostaAnterior: respostaAnterior,
            feedback: feedback,
            userData: userData
        })
    });
    
    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Erro na requisi√ß√£o');
    }
    
    const data = await response.json();
    
    if (data.success) {
        return data.result;
    } else {
        throw new Error(data.error || 'Erro ao reformular resposta');
    }
}

// Fun√ß√£o para cancelar a reformula√ß√£o
function cancelarReformulacao() {
    // Esconder o modal de feedback se estiver aberto
    const modal = document.getElementById('modal-feedback-reformulacao');
    if (modal) {
        modal.style.display = 'none';
    }
    
    // Limpar qualquer campo de feedback
    const campoFeedback = document.getElementById('feedback-reformulacao');
    if (campoFeedback) {
        campoFeedback.value = '';
    }
    
    // Esconder bot√µes de reformula√ß√£o
    const botoesReformulacao = document.getElementById('botoes-reformulacao');
    if (botoesReformulacao) {
        botoesReformulacao.style.display = 'none';
    }
    
    // Esconder bot√µes de confirma√ß√£o final
    const botoesConfirmacao = document.getElementById('botoes-confirmacao-final');
    if (botoesConfirmacao) {
        botoesConfirmacao.style.display = 'none';
    }
    
    console.log('‚ùå Reformula√ß√£o cancelada');
}

async function reformularRespostaOpenAI(dados, respostaAnterior) {
    // Prompt espec√≠fico para reformula√ß√£o
    const promptReformulacao = `${PROMPT_MASTER_OPENAI}

### Dados recebidos:
- Tipo de solicita√ß√£o: ${dados.tipo_solicitacao}
- Motivo da solicita√ß√£o: ${dados.motivo_solicitacao}
- Reclama√ß√£o do cliente: ${dados.texto_cliente}
- Solu√ß√£o implementada: ${dados.solucao_implementada}
- Hist√≥rico de atendimento: ${dados.historico_atendimento || 'Nenhum'}
- Observa√ß√µes internas: ${dados.observacoes_internas || 'Nenhuma'}

### Resposta anterior (incoerente):
${respostaAnterior}

### Instru√ß√£o:
A resposta anterior foi considerada incoerente. Gere uma nova resposta corrigindo os erros identificados, consultando os manuais de modera√ß√£o do RA, documentos internos da ${NOME_EMPRESA}, cl√°usulas da CCB e mantendo clareza, tom cordial e imparcialidade.

Gere a nova resposta:`;

    // Simular delay da API
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Gerar resposta reformulada (melhorada)
    return gerarRespostaReformulada(dados, respostaAnterior);
}

function gerarRespostaReformulada(dados, respostaAnterior) {
    let resposta = '';
    
    // Sauda√ß√£o mais formal
    resposta += 'Prezado(a) cliente,\n\n';
    
    // Agradecimento inicial
    resposta += 'Agradecemos seu contato e lamentamos pelo transtorno causado.\n\n';
    
    // Conte√∫do mais detalhado baseado no tipo
    switch (dados.tipo_solicitacao) {
        case 'exclusao-chave-pix-cpf':
            resposta += 'Informamos que sua solicita√ß√£o de exclus√£o de chave Pix CPF foi devidamente processada em nossos sistemas.\n\n';
            resposta += 'Conforme regulamenta√ß√£o do Banco Central do Brasil (Resolu√ß√£o n¬∫ 4.753/2021), o prazo para processamento √© de at√© 2 dias √∫teis.\n\n';
            resposta += 'A exclus√£o ser√° efetivada automaticamente em sua conta, n√£o sendo necess√°ria nenhuma a√ß√£o adicional de sua parte.\n\n';
            break;
        case 'exclusao-cadastro':
            resposta += 'Confirmamos o recebimento de sua solicita√ß√£o de exclus√£o de cadastro.\n\n';
            resposta += 'Conforme previsto na Lei Geral de Prote√ß√£o de Dados (LGPD - Lei n¬∫ 13.709/2018, art. 16), sua solicita√ß√£o ser√° processada em at√© 15 dias √∫teis.\n\n';
            resposta += 'Ap√≥s a conclus√£o do processo, voc√™ receber√° uma confirma√ß√£o por e-mail.\n\n';
            break;
        case 'juros-abusivos':
            resposta += 'Informamos que todos os juros aplicados em sua opera√ß√£o est√£o em estrita conformidade com a legisla√ß√£o vigente.\n\n';
            resposta += 'Nossos c√°lculos seguem rigorosamente as diretrizes do Banco Central do Brasil e as cl√°usulas contratuais estabelecidas em sua C√©dula de Cr√©dito Banc√°rio (CCB).\n\n';
            resposta += 'Caso tenha d√∫vidas sobre os c√°lculos, nossa equipe est√° dispon√≠vel para esclarecimentos detalhados.\n\n';
            break;
        default:
            resposta += 'Sua solicita√ß√£o foi devidamente registrada em nossos sistemas e est√° sendo analisada por nossa equipe especializada.\n\n';
            resposta += 'Em breve entraremos em contato com as informa√ß√µes necess√°rias para resolver sua situa√ß√£o.\n\n';
    }
    
    // Adicionar solu√ß√£o implementada de forma mais clara
    if (dados.solucao_implementada) {
        resposta += 'Solu√ß√£o implementada: ' + dados.solucao_implementada + '\n\n';
    }
    
    // Fechamento mais profissional
    resposta += 'Seguimos √† disposi√ß√£o para esclarecimentos adicionais.\n\n';
    resposta += `Atenciosamente,\nEquipe ${NOME_EMPRESA}`;
    
    return resposta.trim();
}

// ===== FUN√á√ïES DE HIST√ìRICO E RASCUNHOS =====

function verHistorico() {
    const listaHistorico = document.getElementById('lista-historico');
    listaHistorico.innerHTML = '';
    
    if (historicoRespostas.length === 0) {
        listaHistorico.innerHTML = '<p class="text-muted">Nenhuma resposta no hist√≥rico.</p>';
    } else {
        historicoRespostas.forEach((item, index) => {
            const div = document.createElement('div');
            div.className = 'card mb-2';
            div.innerHTML = `
                <div class="card-body p-2">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="mb-1">${item.dados.tipo_solicitacao}</h6>
                            <small class="text-muted">${new Date(item.timestamp).toLocaleString()}</small>
                            <span class="badge bg-${getStatusColor(item.status)} ms-2">${item.status}</span>
                        </div>
                        <div>
                            <button class="btn btn-sm btn-outline-primary" onclick="carregarDoHistorico(${index})">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            listaHistorico.appendChild(div);
        });
    }
    
    document.getElementById('historico-respostas').style.display = 'block';
}

function getStatusColor(status) {
    switch (status) {
        case 'gerada': return 'secondary';
        case 'aprovada': return 'success';
        case 'reformulada': return 'warning';
        default: return 'secondary';
    }
}

function carregarDoHistorico(index) {
    const item = historicoRespostas[index];
    if (item) {
        // Carregar dados no formul√°rio
        document.getElementById('tipo-situacao').value = item.dados.tipo_solicitacao;
        document.getElementById('motivo-solicitacao').value = item.dados.motivo_solicitacao;
        document.getElementById('reclamacao-text').value = item.dados.texto_cliente;
        document.getElementById('solucao-implementada').value = item.dados.solucao_implementada;
        document.getElementById('historico-atendimento').value = item.dados.historico_atendimento;
        document.getElementById('observacoes-internas').value = item.dados.observacoes_internas;
        
        // Carregar resposta
        document.getElementById('texto-resposta-gpt5').value = item.resposta;
        document.getElementById('resposta-gpt5').style.display = 'block';
        
        fecharHistorico();
        showSuccessMessage('Dados carregados do hist√≥rico!');
    }
}

function fecharHistorico() {
    document.getElementById('historico-respostas').style.display = 'none';
}

function salvarRascunho() {
    const dadosRascunho = {
        id: Date.now(),
        tipo_situacao: document.getElementById('tipo-situacao').value,
        motivo_solicitacao: document.getElementById('motivo-solicitacao').value,
        reclamacao: document.getElementById('reclamacao-text').value,
        solucao: document.getElementById('solucao-implementada').value,
        historico: document.getElementById('historico-atendimento').value,
        observacoes: document.getElementById('observacoes-internas').value,
        timestamp: new Date().toISOString()
    };
    
    rascunhos.unshift(dadosRascunho);
    
    // Manter apenas os √∫ltimos 10 rascunhos
    if (rascunhos.length > 10) {
        rascunhos = rascunhos.slice(0, 10);
    }
    
    showSuccessMessage('Rascunho salvo com sucesso!');
}

function carregarRascunho() {
    if (rascunhos.length === 0) {
        showErrorMessage('Nenhum rascunho salvo.');
        return;
    }
    
    // Usar o rascunho mais recente
    const rascunho = rascunhos[0];
    
    document.getElementById('tipo-situacao').value = rascunho.tipo_situacao;
    document.getElementById('motivo-solicitacao').value = rascunho.motivo_solicitacao;
    document.getElementById('reclamacao-text').value = rascunho.reclamacao;
    document.getElementById('solucao-implementada').value = rascunho.solucao;
    document.getElementById('historico-atendimento').value = rascunho.historico;
    document.getElementById('observacoes-internas').value = rascunho.observacoes;
    
    showSuccessMessage('Rascunho carregado com sucesso!');
}

// ===== FUN√á√ïES AUXILIARES PARA IA OPENAI =====

function copiarRespostaOpenAI() {
    const texto = document.getElementById('texto-resposta-gpt5').value;
    
    if (!texto || (typeof texto === 'string' && !texto.trim())) {
        showErrorMessage('N√£o h√° texto para copiar.');
        return;
    }
    
    navigator.clipboard.writeText(texto).then(() => {
        showSuccessMessage('Resposta copiada para a √°rea de transfer√™ncia!');
    }).catch(() => {
        showErrorMessage('Erro ao copiar texto.');
    });
}

function limparRespostaOpenAI() {
    document.getElementById('texto-resposta-gpt5').value = '';
    document.getElementById('resposta-gpt5').style.display = 'none';
    showSuccessMessage('Resposta limpa com sucesso!');
}

function showLoadingMessage(message) {
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-message';
    loadingDiv.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${message}`;
    
    // Tentar diferentes seletores para encontrar o container
    const container = document.querySelector('.container') || 
                     document.querySelector('.container-fluid') || 
                     document.body;
    
    container.appendChild(loadingDiv);
    
    setTimeout(() => {
        if (loadingDiv.parentNode) {
            loadingDiv.remove();
        }
    }, 5000);
}

// Vari√°vel para controlar qual exemplo mostrar
let exemploAtual = 0;

// Array com diferentes exemplos de teste
const exemplosTeste = [
    {
        nome: "Exclus√£o de Cadastro - Realizada",
        tipoSituacao: "exclusao-cadastro",
        motivoSolicitacao: "esclarecimento",
        reclamacaoCliente: `Cliente solicita exclus√£o de seu cadastro da ${NOME_EMPRESA}. Ele n√£o quer mais receber comunica√ß√µes e deseja que todos os seus dados sejam removidos dos sistemas.`,
        solucaoImplementada: "Cadastro exclu√≠do no sistema em 12/08/2025 conforme solicita√ß√£o.",
        historicoAtendimento: "Cliente j√° havia solicitado exclus√£o via WhatsApp em 15/01/2025, mas n√£o recebeu confirma√ß√£o.",
        observacoesInternas: "Cliente demonstrou satisfa√ß√£o com o atendimento."
    },
    {
        nome: "Exclus√£o de Cadastro - Negada",
        tipoSituacao: "exclusao-cadastro",
        motivoSolicitacao: "esclarecimento",
        reclamacaoCliente: `Cliente solicita exclus√£o de seu cadastro da ${NOME_EMPRESA}. Ele n√£o quer mais receber comunica√ß√µes e deseja que todos os seus dados sejam removidos dos sistemas.`,
        solucaoImplementada: "N√£o foi poss√≠vel realizar a exclus√£o do cadastro devido a pend√™ncias contratuais ativas.",
        historicoAtendimento: "Cliente possui opera√ß√£o em andamento que impede a exclus√£o.",
        observacoesInternas: "Explicar ao cliente sobre as pend√™ncias e como resolver."
    },
    {
        nome: "Libera√ß√£o de Chave Pix - Realizada",
        tipoSituacao: "exclusao-chave-pix-cpf",
        motivoSolicitacao: "esclarecimento",
        reclamacaoCliente: "Cliente solicita libera√ß√£o da chave Pix CPF para portabilidade. Ele quer transferir para outro banco.",
        solucaoImplementada: "Portabilidade da chave Pix conclu√≠da e confirmada em contato com o cliente.",
        historicoAtendimento: "Cliente j√° havia tentado fazer a portabilidade anteriormente.",
        observacoesInternas: "Processo realizado em 2 dias √∫teis conforme previsto."
    },
    {
        nome: "Libera√ß√£o de Chave Pix - Negada",
        tipoSituacao: "exclusao-chave-pix-cpf",
        motivoSolicitacao: "esclarecimento",
        reclamacaoCliente: "Cliente solicita libera√ß√£o da chave Pix CPF para portabilidade. Ele quer transferir para outro banco.",
        solucaoImplementada: "N√£o foi poss√≠vel realizar a libera√ß√£o da chave Pix devido a opera√ß√£o ativa.",
        historicoAtendimento: "Cliente possui antecipa√ß√£o em andamento que impede a libera√ß√£o.",
        observacoesInternas: "Aguardar finaliza√ß√£o da opera√ß√£o para liberar a chave."
    },
    {
        nome: "Quita√ß√£o - Realizada",
        tipoSituacao: "quitacao",
        motivoSolicitacao: "esclarecimento",
        reclamacaoCliente: "Cliente questiona sobre quita√ß√£o de antecipa√ß√£o. Ele acredita que j√° quitou mas ainda aparece d√©bito.",
        solucaoImplementada: "Antecipa√ß√£o quitada automaticamente em 31/07/2025 quando restitui√ß√£o foi depositada pela Receita Federal.",
        historicoAtendimento: "Cliente recebeu restitui√ß√£o do IR em 31/07/2025.",
        observacoesInternas: "Sistema atualizado automaticamente ap√≥s dep√≥sito da restitui√ß√£o."
    },
    {
        nome: "SERASA/SPC - Inclus√£o",
        tipoSituacao: "juros-abusivos",
        motivoSolicitacao: "esclarecimento",
        reclamacaoCliente: "Cliente questiona inclus√£o em SERASA/SPC. Ele n√£o entende por que foi inclu√≠do.",
        solucaoImplementada: "Antecipa√ß√£o n√£o foi quitada na data prevista, resultando em inclus√£o nos √≥rg√£os de prote√ß√£o ao cr√©dito.",
        historicoAtendimento: "Cliente n√£o quitou a antecipa√ß√£o no prazo estabelecido.",
        observacoesInternas: "Explicar sobre descumprimento contratual e como regularizar."
    },
    {
        nome: "An√°lise em Andamento",
        tipoSituacao: "exclusao-cadastro",
        motivoSolicitacao: "esclarecimento",
        reclamacaoCliente: `Cliente solicita exclus√£o de seu cadastro da ${NOME_EMPRESA}. Ele n√£o quer mais receber comunica√ß√µes.`,
        solucaoImplementada: "Solicita√ß√£o em an√°lise pela equipe t√©cnica. Aguardando verifica√ß√£o de pend√™ncias.",
        historicoAtendimento: "Cliente fez a solicita√ß√£o h√° 2 dias √∫teis.",
        observacoesInternas: "An√°lise deve ser conclu√≠da em at√© 5 dias √∫teis."
    },
    {
        nome: "Juros Abusivos - An√°lise",
        tipoSituacao: "juros-abusivos",
        motivoSolicitacao: "reclama√ß√£o",
        reclamacaoCliente: "Cliente reclama de juros abusivos na antecipa√ß√£o. Ele acredita que os valores est√£o incorretos.",
        solucaoImplementada: "An√°lise dos c√°lculos em andamento pela equipe financeira. Verificando aplica√ß√£o das taxas contratuais.",
        historicoAtendimento: "Cliente questionou os valores h√° 3 dias √∫teis.",
        observacoesInternas: "Revis√£o completa dos c√°lculos e taxas aplicadas."
    }
];

// Fun√ß√£o de teste para debug com exemplos rotativos
function testarFuncao() {
    console.log('=== TESTE DE FUN√á√ÉO ===');
    console.log('Exemplo atual:', exemploAtual + 1);
    
    try {
        // Verificar se os elementos existem
        const elementos = {
            'tipo-situacao': document.getElementById('tipo-situacao'),
            'motivo-solicitacao': document.getElementById('motivo-solicitacao'),
            'reclamacao-text': document.getElementById('reclamacao-text'),
            'solucao-implementada': document.getElementById('solucao-implementada'),
            'historico-atendimento': document.getElementById('historico-atendimento'),
            'observacoes-internas': document.getElementById('observacoes-internas')
        };
        
    console.log('Elementos encontrados:');
        let elementosFaltando = [];
        
        for (const [id, elemento] of Object.entries(elementos)) {
            if (elemento) {
                console.log(`‚úÖ ${id}:`, elemento);
            } else {
                console.log(`‚ùå ${id}: N√ÉO ENCONTRADO`);
                elementosFaltando.push(id);
            }
        }
        
        if (elementosFaltando.length > 0) {
            console.error('Elementos faltando:', elementosFaltando);
            showErrorMessage(`Erro: Elementos n√£o encontrados: ${elementosFaltando.join(', ')}`);
            return;
        }
        
        // Obter o exemplo atual
        const exemplo = exemplosTeste[exemploAtual];
        console.log('Exemplo selecionado:', exemplo.nome);
        
        // Preencher campos com o exemplo atual
        console.log('Preenchendo campos com exemplo...');
        
        elementos['tipo-situacao'].value = exemplo.tipoSituacao;
        elementos['motivo-solicitacao'].value = exemplo.motivoSolicitacao;
        elementos['reclamacao-text'].value = exemplo.reclamacaoCliente;
        elementos['solucao-implementada'].value = exemplo.solucaoImplementada;
        elementos['historico-atendimento'].value = exemplo.historicoAtendimento;
        elementos['observacoes-internas'].value = exemplo.observacoesInternas;
        
        // Verificar se os valores foram definidos
        console.log('Valores definidos:');
        console.log('- tipo-situacao:', elementos['tipo-situacao'].value);
        console.log('- motivo-solicitacao:', elementos['motivo-solicitacao'].value);
        console.log('- reclamacao-text:', elementos['reclamacao-text'].value.substring(0, 50) + '...');
        console.log('- solucao-implementada:', elementos['solucao-implementada'].value.substring(0, 50) + '...');
        
        console.log('‚úÖ Campos preenchidos com exemplo:', exemplo.nome);
        
        // Mostrar mensagem de sucesso com o nome do exemplo
        showSuccessMessage(`Exemplo ${exemploAtual + 1}/${exemplosTeste.length}: ${exemplo.nome} - Agora clique em "Gerar Resposta com IA OpenAI"`);
        
        // Avan√ßar para o pr√≥ximo exemplo (rotativo)
        exemploAtual = (exemploAtual + 1) % exemplosTeste.length;
        
        console.log('Pr√≥ximo exemplo ser√°:', exemploAtual + 1);
        
    } catch (error) {
        console.error('‚ùå Erro na fun√ß√£o de teste:', error);
        showErrorMessage('‚ùå Erro na fun√ß√£o de teste: ' + error.message);
    }
}

function gerarRespostaReclameAqui(estagio, tipoSituacao, baseContratual, reclamacao, historico, solucao) {
    let resposta = '';
    
    // Sauda√ß√£o baseada no est√°gio
    const saudacoes = {
        'primeira-resposta': '<p><strong>Prezado(a) cliente,</strong></p>',
        'replica': '<p><strong>Prezado(a) cliente,</strong></p>',
        'fechamento': '<p><strong>Prezado(a) cliente,</strong></p>'
    };
    
    resposta += saudacoes[estagio] || saudacoes['primeira-resposta'];
    
    // Conte√∫do baseado no tipo de situa√ß√£o selecionado
    switch (tipoSituacao) {
        case 'retirar-chave-pix':
            resposta += '<p>Informamos que sua solicita√ß√£o de retirada de chave Pix foi processada conforme solicitado.</p>';
            resposta += '<p>O prazo para processamento √© de at√© 2 dias √∫teis, conforme regulamenta√ß√£o do Banco Central.</p>';
            break;
        case 'exclusao-cadastro':
            resposta += '<p>Sua solicita√ß√£o de exclus√£o de cadastro foi devidamente registrada em nossos sistemas.</p>';
            resposta += '<p>A exclus√£o ser√° realizada em at√© 15 dias √∫teis, conforme previsto na LGPD.</p>';
            break;
        case 'exclusao-conta-celcoin':
            resposta += '<p>Informamos que sua solicita√ß√£o de exclus√£o da conta Celcoin foi processada.</p>';
            resposta += '<p>O processo de exclus√£o ser√° conclu√≠do em at√© 5 dias √∫teis.</p>';
            break;
        case 'pagamento-restituicao':
            resposta += '<p>O pagamento de sua restitui√ß√£o foi processado conforme solicitado.</p>';
            resposta += '<p>O valor ser√° creditado em sua conta em at√© 3 dias √∫teis.</p>';
            break;
        case 'amortizacao':
            resposta += '<p>Sua solicita√ß√£o de amortiza√ß√£o foi devidamente registrada.</p>';
            resposta += '<p>O valor ser√° aplicado conforme as condi√ß√µes contratuais estabelecidas.</p>';
            break;
        case 'calculadora':
            resposta += '<p>Informamos que nossa calculadora est√° dispon√≠vel em nosso site para simula√ß√µes.</p>';
            resposta += '<p>Para c√°lculos espec√≠ficos, nossa equipe est√° dispon√≠vel para orienta√ß√µes.</p>';
            break;
        case 'estorno-plano':
            resposta += '<p>O estorno de seu plano foi processado conforme solicitado.</p>';
            resposta += '<p>O valor ser√° devolvido em at√© 10 dias √∫teis, conforme prazo estabelecido.</p>';
            break;
        case 'quita√ß√£o':
            resposta += '<p>Conforme solicitado, a quita√ß√£o antecipada foi processada com o desconto aplic√°vel conforme as condi√ß√µes contratuais.</p>';
            break;
        case 'outro':
            resposta += '<p>Sua solicita√ß√£o foi devidamente registrada em nossos sistemas.</p>';
            resposta += '<p>Nossa equipe est√° analisando o caso e entrar√° em contato em breve.</p>';
            break;
    }
    
    // Se h√° hist√≥rico de atendimento
    if (historico.trim()) {
        resposta += '<p>Conforme j√° hav√≠amos encaminhado anteriormente, ';
        resposta += historico.toLowerCase() + '.</p>';
    }
    
    // Se h√° solu√ß√£o implementada
    if (solucao.trim()) {
        resposta += '<p>' + solucao + '.</p>';
    } else if (estagio === 'primeira-resposta') {
        resposta += '<p>Agradecemos seu contato e lamentamos pelo transtorno causado.</p>';
        resposta += '<p>Nossa equipe est√° analisando sua solicita√ß√£o e tomaremos as medidas necess√°rias para resolver a situa√ß√£o.</p>';
    }
    
    // Fechamento baseado no est√°gio
    if (estagio === 'fechamento') {
        resposta += '<p>Consideramos este assunto encerrado e agradecemos sua compreens√£o.</p>';
    }
    
    resposta += '<p>Seguimos √† disposi√ß√£o para ajudar.</p>';
    
    return resposta;
}

// Fun√ß√£o para copiar resposta editada
function copiarRespostaEditada() {
    const textoEditavel = document.getElementById('texto-editavel').value;
    
    if (!textoEditavel || (typeof textoEditavel === 'string' && !textoEditavel.trim())) {
        showErrorMessage('N√£o h√° texto para copiar.');
        return;
    }
    
    navigator.clipboard.writeText(textoEditavel).then(() => {
        showSuccessMessage('Resposta editada copiada para a √°rea de transfer√™ncia!');
    }).catch(() => {
        showErrorMessage('Erro ao copiar texto.');
    });
}

// Fun√ß√£o para limpar edi√ß√£o
function limparEdicao() {
    document.getElementById('texto-editavel').value = '';
    document.getElementById('edicao-rapida').style.display = 'none';
    document.getElementById('resposta-ra').style.display = 'none';
    showSuccessMessage('Edi√ß√£o limpa com sucesso!');
}

// ===== FUN√á√ïES DE MODERA√á√ÉO =====

// Fun√ß√£o para separar os dois blocos da resposta do servidor
function separarBlocosModeracao(resposta) {
    if (!resposta) return { linhaRaciocinio: '', textoFinal: '' };
    
    // Procurar por marcadores que indicam os blocos
    const marcadores = [
        '(1) LINHA DE RACIOC√çNIO INTERNA',
        '(2) TEXTO FINAL DE MODERA√á√ÉO',
        'LINHA DE RACIOC√çNIO INTERNA',
        'TEXTO FINAL DE MODERA√á√ÉO',
        '1. LINHA DE RACIOC√çNIO INTERNA',
        '2. TEXTO FINAL DE MODERA√á√ÉO'
    ];
    
    let linhaRaciocinio = '';
    let textoFinal = '';
    
    // Tentar separar por marcadores
    for (let i = 0; i < marcadores.length; i += 2) {
        const marcador1 = marcadores[i];
        const marcador2 = marcadores[i + 1];
        
        const index1 = resposta.indexOf(marcador1);
        const index2 = resposta.indexOf(marcador2);
        
        if (index1 !== -1 && index2 !== -1) {
            linhaRaciocinio = resposta.substring(index1 + marcador1.length, index2).trim();
            textoFinal = resposta.substring(index2 + marcador2.length).trim();
            break;
        }
    }
    
    // Se n√£o encontrou marcadores, tentar separar por quebras de linha duplas
    if (!linhaRaciocinio && !textoFinal) {
        const partes = resposta.split('\n\n');
        if (partes.length >= 2) {
            linhaRaciocinio = partes[0].trim();
            textoFinal = partes.slice(1).join('\n\n').trim();
        } else {
            // Se n√£o conseguiu separar, usar toda a resposta como texto final
            textoFinal = resposta;
        }
    }
    
    return { linhaRaciocinio, textoFinal };
}

// Fun√ß√£o para formatar a linha de racioc√≠nio interna do servidor
function formatarLinhaRaciocinioServidor(linhaRaciocinio) {
    if (!linhaRaciocinio) return '';
    
    let linha = '<div class="linha-raciocinio servidor">';
    linha += '<h6 class="text-info mb-3"><i class="fas fa-brain me-2"></i>Linha de Racioc√≠nio Interna (Gerada pelo Servidor):</h6>';
    
    // Formatar o conte√∫do da linha de racioc√≠nio
    let conteudoFormatado = linhaRaciocinio
        .replace(/\n\n/g, '</p><p>')  // Dupla quebra de linha = novo par√°grafo
        .replace(/\n/g, '<br>')       // Quebra simples = <br>
        .replace(/^/, '<p>')          // Iniciar com <p>
        .replace(/$/, '</p>');        // Terminar com </p>
    
    // Destacar elementos importantes
    conteudoFormatado = conteudoFormatado
        .replace(/Fatos reais comprovados:/gi, '<strong class="text-success">Fatos reais comprovados:</strong>')
        .replace(/Diverg√™ncia\/viola√ß√£o:/gi, '<strong class="text-danger">Diverg√™ncia/viola√ß√£o:</strong>')
        .replace(/Base normativa:/gi, '<strong class="text-primary">Base normativa:</strong>')
        .replace(/Manual Geral/g, '<em class="text-info">Manual Geral</em>')
        .replace(/Manual de Reviews/g, '<em class="text-info">Manual de Reviews</em>')
        .replace(/Manual de Bancos/g, '<em class="text-info">Manual de Bancos</em>')
        .replace(/Manual de Modera√ß√£o/g, '<em class="text-info">Manual de Modera√ß√£o</em>');
    
    linha += `<div class="alert alert-light border-start border-info border-4">${conteudoFormatado}</div>`;
    linha += '</div>';
    
    return linha;
}

// Fun√ß√£o para formatar o texto de modera√ß√£o com melhor apresenta√ß√£o
function formatarTextoModeracao(texto) {
    if (!texto) return '';
    
    // Quebrar o texto em par√°grafos baseado em quebras de linha
    let textoFormatado = texto
        .replace(/\n\n/g, '</p><p>')  // Dupla quebra de linha = novo par√°grafo
        .replace(/\n/g, '<br>')       // Quebra simples = <br>
        .replace(/^/, '<p>')          // Iniciar com <p>
        .replace(/$/, '</p>');        // Terminar com </p>
    
    // Destacar frases importantes
    textoFormatado = textoFormatado
        .replace(/Prezados,/g, '<strong>Prezados,</strong>')
        .replace(/Solicitamos a modera√ß√£o/g, '<strong>Solicitamos a modera√ß√£o</strong>')
        .replace(/Conforme registros internos/g, '<strong>Conforme registros internos</strong>')
        .replace(/Dessa forma, solicitamos/g, '<strong>Dessa forma, solicitamos</strong>')
        .replace(/Manual Geral/g, '<em>Manual Geral</em>')
        .replace(/Manual de Reviews/g, '<em>Manual de Reviews</em>')
        .replace(/Manual de Bancos/g, '<em>Manual de Bancos</em>')
        .replace(/Manual de Modera√ß√£o/g, '<em>Manual de Modera√ß√£o</em>');
    
    // Adicionar t√≠tulo
    return `<h6 class="text-primary mb-3"><i class="fas fa-shield-alt me-2"></i>Texto para Modera√ß√£o:</h6>${textoFormatado}`;
}

async function gerarModeracao() {
    const solicitacaoCliente = document.getElementById('solicitacao-cliente').value;
    const respostaEmpresa = document.getElementById('resposta-empresa').value;
    const motivoModeracao = document.getElementById('motivo-moderacao').value;
    const consideracaoFinal = document.getElementById('consideracao-final').value;
    
    if (!solicitacaoCliente || (typeof solicitacaoCliente === 'string' && !solicitacaoCliente.trim()) || !motivoModeracao) {
        showErrorMessage('Por favor, preencha a solicita√ß√£o do cliente e selecione o motivo da modera√ß√£o.');
        return;
    }
    
    // Mostrar loading
    showLoadingMessage('Gerando solicita√ß√£o de modera√ß√£o com modelo pr√©-definido...');
    
    try {
        // Chamar o endpoint do servidor que usa o modelo pr√©-definido
        const response = await fetch('/api/generate-moderation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                dadosModeracao: {
                    solicitacaoCliente: solicitacaoCliente,
                    respostaEmpresa: respostaEmpresa,
                    motivoModeracao: motivoModeracao,
                    consideracaoFinal: consideracaoFinal
                }
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Processar a resposta que agora vem com dois blocos
            const resposta = data.result;
            
            // Separar os dois blocos da resposta
            const blocos = separarBlocosModeracao(resposta);
            
            // Usar a linha de racioc√≠nio interna gerada pelo servidor
            const linhaRaciocinio = formatarLinhaRaciocinioServidor(blocos.linhaRaciocinio);
            
            // Usar o texto final de modera√ß√£o gerado pelo servidor
            const textoModeracao = formatarTextoModeracao(blocos.textoFinal);
            
            document.getElementById('linha-raciocinio').innerHTML = linhaRaciocinio;
            document.getElementById('texto-moderacao').innerHTML = textoModeracao;
            document.getElementById('moderacao-resultado').style.display = 'block';
            
            // Recarregar estat√≠sticas globais do servidor
            carregarEstatisticasGlobais();
            
            showSuccessMessage('Solicita√ß√£o de modera√ß√£o gerada com script estruturado!');
        } else {
            throw new Error(data.error || 'Erro ao gerar modera√ß√£o');
        }
    } catch (error) {
        console.error('Erro ao gerar modera√ß√£o:', error);
        showErrorMessage('Erro ao gerar modera√ß√£o. Usando modelo local como fallback.');
        
        // Fallback para o modelo local
        const linhaRaciocinio = gerarLinhaRaciocinioModeracao(motivoModeracao, solicitacaoCliente, respostaEmpresa);
        const textoModeracao = gerarTextoModeracao(motivoModeracao, consideracaoFinal);
        
        document.getElementById('linha-raciocinio').innerHTML = linhaRaciocinio;
        document.getElementById('texto-moderacao').innerHTML = textoModeracao;
        document.getElementById('moderacao-resultado').style.display = 'block';
        
        // Recarregar estat√≠sticas globais do servidor
        carregarEstatisticasGlobais();
        
        showSuccessMessage('Solicita√ß√£o de modera√ß√£o gerada (modelo local)!');
    }
}

function gerarLinhaRaciocinioModeracao(motivoModeracao, solicitacaoCliente, respostaEmpresa) {
    let linha = '<div class="linha-raciocinio">';
    linha += '<h6 class="text-info mb-3"><i class="fas fa-brain me-2"></i>Linha de Racioc√≠nio Interna:</h6>';
    
    linha += '<div class="alert alert-light border-start border-info border-4 mb-3">';
    linha += '<p class="mb-2"><strong>An√°lise do Conte√∫do:</strong></p>';
    linha += '<p class="mb-0">O conte√∫do em quest√£o apresenta viola√ß√£o √†s regras do Reclame Aqui pelos seguintes motivos:</p>';
    linha += '</div>';
    
    // Mapear motivos com descri√ß√µes mais detalhadas
    const motivosDetalhados = {
        'reclamacao-outra-empresa': {
            titulo: 'Reclama√ß√£o Direcionada a Outra Empresa',
            descricao: `A reclama√ß√£o √© direcionada a outra empresa, n√£o √† ${NOME_EMPRESA}`,
            manual: 'Manual de Reviews',
            fundamento: 'Reclama√ß√µes devem ser direcionadas √† empresa correta'
        },
        'reclamacao-trabalhista': {
            titulo: 'Quest√£o Trabalhista',
            descricao: 'Trata-se de quest√£o trabalhista, n√£o de rela√ß√£o de consumo',
            manual: 'Manual de Reviews',
            fundamento: 'O RA n√£o √© o canal adequado para quest√µes trabalhistas'
        },
        'conteudo-improprio': {
            titulo: 'Conte√∫do Inadequado',
            descricao: 'O conte√∫do cont√©m linguagem inadequada ou ofensiva',
            manual: 'Manual Geral',
            fundamento: 'Viola√ß√£o √†s diretrizes de conduta da plataforma'
        },
        'reclamacao-duplicidade': {
            titulo: 'Reclama√ß√£o Duplicada',
            descricao: 'Esta √© uma reclama√ß√£o duplicada j√° registrada anteriormente',
            manual: 'Manual de Reviews',
            fundamento: 'Evita spam e duplica√ß√£o de conte√∫do'
        },
        'reclamacao-terceiros': {
            titulo: 'Reclama√ß√£o por Terceiros',
            descricao: 'A reclama√ß√£o √© feita por terceiros n√£o autorizados',
            manual: 'Manual Geral',
            fundamento: 'Apenas o consumidor direto pode reclamar'
        },
        'caso-fraude': {
            titulo: 'Caso de Fraude',
            descricao: 'Este √© um caso comprovado de fraude',
            manual: 'Manual de Bancos/Institui√ß√µes Financeiras/Meios',
            fundamento: 'Fraude n√£o constitui rela√ß√£o de consumo v√°lida'
        },
        'nao-violou-direito': {
            titulo: 'N√£o Houve Viola√ß√£o',
            descricao: 'A empresa n√£o violou o direito do consumidor',
            manual: 'Manual de Bancos/Institui√ß√µes Financeiras/Meios',
            fundamento: 'A empresa agiu em conformidade com a legisla√ß√£o'
        }
    };
    
    const motivo = motivosDetalhados[motivoModeracao] || {
        titulo: 'Viola√ß√£o √†s Regras',
        descricao: 'Viola√ß√£o √†s regras do Reclame Aqui',
        manual: 'Manual Geral',
        fundamento: 'Conte√∫do n√£o adequado √† plataforma'
    };
    
    linha += '<div class="card mb-3">';
    linha += '<div class="card-header bg-warning text-dark">';
    linha += `<h6 class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i>${motivo.titulo}</h6>`;
    linha += '</div>';
    linha += '<div class="card-body">';
    linha += `<p class="mb-2"><strong>Descri√ß√£o:</strong> ${motivo.descricao}</p>`;
    linha += `<p class="mb-2"><strong>Manual Aplic√°vel:</strong> <em>${motivo.manual}</em></p>`;
    linha += `<p class="mb-0"><strong>Fundamento:</strong> ${motivo.fundamento}</p>`;
    linha += '</div>';
    linha += '</div>';
    
    if (solicitacaoCliente && typeof solicitacaoCliente === 'string' && solicitacaoCliente.trim()) {
        linha += '<div class="mb-3">';
        linha += '<h6 class="text-secondary"><i class="fas fa-user me-2"></i>Solicita√ß√£o do Cliente:</h6>';
        linha += `<div class="bg-light p-3 rounded border-start border-secondary border-4">`;
        linha += `<p class="mb-0">${solicitacaoCliente}</p>`;
        linha += '</div>';
        linha += '</div>';
    }
    
    if (respostaEmpresa && respostaEmpresa.trim()) {
        linha += '<div class="mb-3">';
        linha += '<h6 class="text-success"><i class="fas fa-building me-2"></i>Resposta da Empresa:</h6>';
        linha += `<div class="bg-light p-3 rounded border-start border-success border-4">`;
        linha += `<p class="mb-0">${respostaEmpresa}</p>`;
        linha += '</div>';
        linha += '</div>';
    }
    
    linha += '</div>';
    return linha;
}

function gerarTextoModeracao(motivoModeracao, consideracaoFinal) {
    let texto = '<p><strong>Texto para Modera√ß√£o:</strong></p>';
    
    texto += '<p>Prezados,</p>';
    texto += '<p>Solicitamos a modera√ß√£o do conte√∫do acima pelos seguintes motivos:</p>';
    
    const motivos = {
        'reclamacao-outra-empresa': `A reclama√ß√£o √© direcionada a outra empresa, n√£o √† ${NOME_EMPRESA}.`,
        'reclamacao-trabalhista': 'Trata-se de quest√£o trabalhista, n√£o de rela√ß√£o de consumo.',
        'conteudo-improprio': 'O conte√∫do cont√©m linguagem inadequada ou ofensiva.',
        'reclamacao-duplicidade': 'Esta √© uma reclama√ß√£o duplicada j√° registrada anteriormente.',
        'reclamacao-terceiros': 'A reclama√ß√£o √© feita por terceiros n√£o autorizados.',
        'caso-fraude': 'Este √© um caso comprovado de fraude.',
        'nao-violou-direito': 'A empresa n√£o violou o direito do consumidor.'
    };
    
    texto += '<p>' + (motivos[motivoModeracao] || 'Viola√ß√£o √†s regras da plataforma.') + '</p>';
    
    if (consideracaoFinal && consideracaoFinal.trim()) {
        texto += '<p><strong>Considera√ß√£o Final:</strong></p>';
        texto += `<p>${consideracaoFinal}</p>`;
    }
    
    texto += '<p>Agradecemos a aten√ß√£o.</p>';
    
    return texto;
}

// ===== FUN√á√ïES DE EXPLICA√á√ïES =====

function gerarExplicacao() {
    const tema = document.getElementById('tema-explicacao').value;
    
    if (!tema) {
        showErrorMessage('Por favor, selecione o tema a explicar.');
        return;
    }
    
    const explicacao = gerarMensagemExplicativa(tema, '');
    
    document.getElementById('explicacao-content').innerHTML = explicacao;
    document.getElementById('explicacao-resultado').style.display = 'block';
    
    showSuccessMessage('Explica√ß√£o gerada com sucesso!');
}

function gerarMensagemExplicativa(tema, contexto) {
    const explicacoes = {
        'malha-fina': `
            <p><strong>Prezado(a) cliente,</strong></p>
            <p>Vamos esclarecer sobre a Malha Fina:</p>
            <ol>
                <li><strong>O que √©:</strong> √â um sistema de fiscaliza√ß√£o da Receita Federal que identifica inconsist√™ncias na declara√ß√£o do IR.</li>
                <li><strong>Como funciona:</strong> O sistema compara as informa√ß√µes declaradas com dados de terceiros.</li>
                <li><strong>Prazo para resposta:</strong> Voc√™ tem 30 dias para se manifestar ap√≥s receber a notifica√ß√£o.</li>
                <li><strong>Como resolver:</strong> √â necess√°rio apresentar documentos que comprovem as informa√ß√µes declaradas.</li>
                <li><strong>Penalidades:</strong> Caso n√£o seja respondida, pode gerar multas e juros.</li>
            </ol>
            <p>Nossa equipe est√° dispon√≠vel para orienta√ß√µes sobre como proceder em seu caso espec√≠fico.</p>
        `,
        'exclusao': `
            <p><strong>Prezado(a) cliente,</strong></p>
            <p>Se voc√™ deseja excluir sua conta na ${NOME_EMPRESA}, preparamos um passo a passo simples. Voc√™ pode fazer isso de duas formas:</p>
            
            <p><strong>üîπ 1. Pelo aplicativo</strong></p>
            <ol>
                <li>Abra o app da ${NOME_EMPRESA} no seu celular.</li>
                <li>Toque no √≠cone de Impostos</li>
                <li>Selecione a op√ß√£o "DARFs para investidores".</li>
                <li>No canto superior direito, toque no √≠cone de menu (‚ò∞).</li>
                <li>Role a tela lateral esquerda at√© encontrar a op√ß√£o "Conta".</li>
                <li>Role at√© o final e toque em "Excluir conta".</li>
            </ol>
            
            <p><strong>üîπ 2. Pelo site</strong></p>
            <ol>
                <li>Acesse: ${SITE_EMPRESA}</li>
                <li>Fa√ßa login com seu CPF e senha.</li>
                <li>No menu inferior, do lado esquerdo, clique em "Conta".</li>
                <li>Role a p√°gina at√© o final e clique em "Excluir conta".</li>
            </ol>
            
            <p><strong>‚ö†Ô∏è Importante</strong></p>
            <p>A exclus√£o ser√° feita conforme a Lei Geral de Prote√ß√£o de Dados (LGPD), garantindo seguran√ßa e privacidade. Todas as informa√ß√µes registradas (declara√ß√µes, relat√≥rios e documentos fiscais) ser√£o apagadas definitivamente. Lembrando que a exclus√£o de seus dados n√£o cancela planos ativos em cobran√ßa.</p>
        `,
        'procuracoes': `
            <p><strong>Prezado(a) cliente,</strong></p>
            <p>Para revogar procura√ß√µes no eCAC, siga os passos abaixo:</p>
            <ol>
                <li>Acesse www.gov.br/receitafederal</li>
                <li>Clique em "eCAC" e fa√ßa login</li>
                <li>No menu, selecione "Procura√ß√µes"</li>
                <li>Escolha "Revogar Procura√ß√£o"</li>
                <li>Selecione a procura√ß√£o a ser revogada</li>
                <li>Confirme a opera√ß√£o</li>
            </ol>
            <p>A revoga√ß√£o √© imediata e voc√™ receber√° confirma√ß√£o por e-mail.</p>
            <p>Em caso de dificuldades, nossa equipe est√° dispon√≠vel para orienta√ß√µes.</p>
        `,
        'ccb': `
            <p><strong>Prezado(a) cliente,</strong></p>
            <p>A C√©dula de Cr√©dito Banc√°rio (CCB) √© um t√≠tulo de cr√©dito que representa uma promessa de pagamento. Vamos esclarecer todas as cl√°usulas contratuais:</p>
            
            <p><strong>üìã CL√ÅUSULAS DA CCB:</strong></p>
            
            <p><strong>Cl√°usula 1 - Partes e Defini√ß√µes:</strong><br>
            Identifica quem empresta (credor/institui√ß√£o), quem toma o cr√©dito (devedor/cliente) e define termos usados no contrato como "Chave Pix", "Conta de Pagamento" e "Antecipa√ß√£o".</p>
            
            <p><strong>Cl√°usula 2 - Objeto do Contrato:</strong><br>
            Explica qual opera√ß√£o est√° sendo contratada ‚Äî antecipa√ß√£o de restitui√ß√£o, empr√©stimo com garantia de restitui√ß√£o, ou outra modalidade.</p>
            
            <p><strong>Cl√°usula 3 - Valor, Libera√ß√£o e Conta de Cr√©dito:</strong><br>
            Estabelece o montante, data de libera√ß√£o e conta para dep√≥sito do valor contratado.</p>
            
            <p><strong>Cl√°usula 4 - Vencimento e Forma de Pagamento:</strong><br>
            Define quando e como a d√≠vida ser√° paga ‚Äî parcelamento, vencimento √∫nico ou amortiza√ß√µes. A d√≠vida ser√° quitada automaticamente com o cr√©dito da restitui√ß√£o do Imposto de Renda.</p>
            
            <p><strong>Cl√°usula 5 - Juros, Encargos e Forma de C√°lculo:</strong><br>
            Especifica os juros remunerat√≥rios, juros de mora, encargos, periodicidade de capitaliza√ß√£o e m√©todo de c√°lculo.</p>
            
            <p><strong>Cl√°usula 6 - Atualiza√ß√£o Monet√°ria:</strong><br>
            Trata de reajuste por √≠ndice (IPCA, INPC, TR) ou cl√°usula de corre√ß√£o do saldo devedor.</p>
            
            <p><strong>Cl√°usula 7 - V√≠nculo da Chave Pix e Quita√ß√£o Autom√°tica:</strong><br>
            ‚ö†Ô∏è <strong>CR√çTICA:</strong> Determina que a restitui√ß√£o depositada na Conta de Pagamento vinculada √† Chave Pix ser√° utilizada prioritariamente para quita√ß√£o da opera√ß√£o. A altera√ß√£o ou exclus√£o da Chave Pix sem notifica√ß√£o pr√©via pode caracterizar descumprimento contratual.</p>
            
            <p><strong>Cl√°usula 8 - Liquida√ß√£o Antecipada:</strong><br>
            O cliente pode liquidar antecipadamente, total ou parcialmente, o saldo devedor a qualquer tempo, beneficiando-se de desconto sobre os juros e encargos futuros.</p>
            
            <p><strong>Cl√°usula 9 - Garantias e Cess√£o de Direitos:</strong><br>
            Pode prever garantias (aliena√ß√£o fiduci√°ria, cess√£o de cr√©dito) e regras para cess√£o/cess√£o de cr√©dito pelo credor.</p>
            
            <p><strong>Cl√°usula 10 - Inadimpl√™ncia e Vencimento Antecipado:</strong><br>
            ‚ö†Ô∏è <strong>CR√çTICA:</strong> Lista eventos de inadimpl√™ncia (n√£o pagamento, informa√ß√µes falsas, uso indevido da Conta de Pagamento) e prev√™ que o credor pode tornar o saldo exig√≠vel imediatamente.</p>
            
            <p><strong>Cl√°usula 11 - Multas, Encargos de Cobran√ßa e Custas:</strong><br>
            Descreve multas por atraso, encargos de cobran√ßa, honor√°rios advocat√≠cios e custos de execu√ß√£o em caso de inadimpl√™ncia.</p>
            
            <p><strong>Cl√°usula 12 - Compensa√ß√£o / Set-off:</strong><br>
            Permite ao credor compensar cr√©ditos/d√©bitos entre contas do cliente e d√≠vidas pendentes.</p>
            
            <p><strong>Cl√°usula 13 - Notifica√ß√µes e Comunica√ß√µes:</strong><br>
            Define como se d√£o avisos entre as partes, prazo para responder e efeitos da notifica√ß√£o.</p>
            
            <p><strong>Cl√°usula 14 - Prote√ß√£o de Dados (LGPD):</strong><br>
            Trata do tratamento de dados pessoais do cliente para execu√ß√£o contratual e cumprimento legal conforme a Lei Geral de Prote√ß√£o de Dados.</p>
            
            <p><strong>Cl√°usula 15 - Direito de Arrependimento / Desist√™ncia:</strong><br>
            Quando aplic√°vel, prev√™ prazo de arrependimento (7 dias corridos) e procedimentos de devolu√ß√£o.</p>
            
            <p><strong>Cl√°usula 16 - Impostos, Tributos e Despesas:</strong><br>
            Define quem arca com impostos e despesas decorrentes da opera√ß√£o.</p>
            
            <p><strong>Cl√°usula 17 - Cess√£o, Sub-roga√ß√£o e Transfer√™ncia:</strong><br>
            Regula quando o credor pode ceder os direitos e obriga√ß√µes a terceiros.</p>
            
            <p><strong>Cl√°usula 18 - Foro e Legisla√ß√£o Aplic√°vel:</strong><br>
            Estabelece a lei que rege o contrato e o foro para resolver conflitos.</p>
            
            <p><strong>Cl√°usula 19 - Altera√ß√µes Contratuais e Integralidade:</strong><br>
            Define que altera√ß√µes s√≥ valem por escrito e que o contrato integra o entendimento entre as partes.</p>
            
            <p><strong>Cl√°usula 20 - For√ßa Maior e Caso Fortuito:</strong><br>
            Prev√™ que eventos extraordin√°rios podem suspender obriga√ß√µes sem penalidade.</p>
            
            <p><strong>Cl√°usula 21 - Interpreta√ß√£o e Cl√°usula Separ√°vel:</strong><br>
            Se uma cl√°usula for considerada nula, o restante permanece v√°lido.</p>
            
            <p><strong>‚ö†Ô∏è IMPORTANTE:</strong><br>
            √â fundamental que voc√™ leia atentamente todas as cl√°usulas do contrato antes de assinar, compreendendo os termos, condi√ß√µes, taxas de juros, prazos e consequ√™ncias do n√£o cumprimento das obriga√ß√µes assumidas.</p>
            
            <p>Nossa equipe est√° dispon√≠vel para orienta√ß√µes adicionais sobre qualquer cl√°usula espec√≠fica da CCB.</p>
        `,
        'credito-trabalhador': `
            <p><strong>üìå Empr√©stimo do Trabalhador ‚Äì Resumo</strong></p>
            
            <p><strong>O que √©:</strong><br>
            Linha de cr√©dito consignado, com parcelas descontadas direto do sal√°rio ou benef√≠cio.</p>
            
            <p><strong>Vantagens:</strong></p>
            <ul>
                <li>Sem boletos ou lembretes de pagamento.</li>
                <li>Valor liberado via Pix (CPF).</li>
            </ul>
            
            <p><strong>Durante o contrato:</strong></p>
            <ul>
                <li>Desconto em folha (holerite/contracheque).</li>
                <li>Em caso de demiss√£o, o desconto para, mas o saldo devedor deve ser pago por boleto/Pix.</li>
                <li>Verbas rescis√≥rias podem ser usadas para abater a d√≠vida.</li>
            </ul>
            
            <p><strong>Crit√©rios de elegibilidade:</strong></p>
            
            <p><strong>üë§ Colaborador</strong></p>
            <ul>
                <li>Idade: 18 a 62 anos (homens) / 18 a 65 anos (mulheres).</li>
                <li>CLT h√° pelo menos 12 meses.</li>
                <li>Empregado(a) dom√©stico(a).</li>
                <li>Diretor(a) com recolhimento de FGTS.</li>
            </ul>
            
            <p><strong>üè¢ Empresa</strong></p>
            <ul>
                <li>CNPJ ativo h√° pelo menos 36 meses.</li>
            </ul>
            
            <p><strong>üö´ N√£o pode solicitar:</strong></p>
            <ul>
                <li>Funcion√°rios afastados pelo INSS.</li>
                <li>Em aviso pr√©vio.</li>
                <li>J√° desligados no sistema.</li>
            </ul>
            
            <p><strong>Etapas no App:</strong></p>
            <ol>
                <li><strong>Acesso:</strong> Tela inicial ‚Üí Cr√©dito do Trabalhador ‚Üí Ver proposta.</li>
                <li><strong>Autoriza√ß√£o:</strong> Aceitar o termo de consentimento.</li>
                <li><strong>Valor:</strong> Escolher o limite desejado.</li>
                <li><strong>Simula√ß√£o:</strong> Conferir parcelas, juros e total.</li>
                <li><strong>Processamento:</strong> Sistema analisa os dados.</li>
                <li><strong>Selfie:</strong> Foto para valida√ß√£o facial.</li>
                <li><strong>Valida√ß√£o autom√°tica:</strong> Pode levar at√© 30 minutos.</li>
                <li><strong>Confirma√ß√£o:</strong> Resumo final ‚Üí Confirmar.</li>
            </ol>
            
            <p>Nossa equipe est√° dispon√≠vel para orienta√ß√µes adicionais sobre o Cr√©dito do Trabalhador.</p>
        `,
        'credito-pessoal': `
            <p><strong>Prezado(a) cliente,</strong></p>
            <p>Vamos esclarecer sobre o Cr√©dito Pessoal:</p>
            <ol>
                <li><strong>O que √©:</strong> √â um empr√©stimo sem destina√ß√£o espec√≠fica para uso pessoal</li>
                <li><strong>Caracter√≠sticas:</strong> Valor fixo, prazo determinado e parcelas mensais</li>
                <li><strong>Finalidade:</strong> Pode ser usado para qualquer necessidade pessoal</li>
                <li><strong>An√°lise:</strong> Baseada na renda e hist√≥rico de cr√©dito do cliente</li>
                <li><strong>Documenta√ß√£o:</strong> Comprovantes de renda e documentos pessoais</li>
            </ol>
            <p>Nossa equipe est√° dispon√≠vel para orienta√ß√µes sobre cr√©dito pessoal.</p>
        `
    };
    
    let explicacao = explicacoes[tema] || '<p>Explica√ß√£o n√£o dispon√≠vel para este tema.</p>';
    
    if (contexto.trim()) {
        explicacao = explicacao.replace('<p><strong>Prezado(a) cliente,</strong></p>', 
            `<p><strong>Prezado(a) cliente,</strong></p><p><strong>Contexto:</strong> ${contexto}</p>`);
    }
    
    return explicacao;
}

// ===== FUN√á√ïES DE REVIS√ÉO =====

async function revisarTexto() {
    const textoOriginal = document.getElementById('texto-revisar').value;
    const tipoRevisaoSelect = document.getElementById('tipo-revisao');
    const observacoes = document.getElementById('observacoes-revisao').value;
    
    if (!textoOriginal.trim()) {
        showErrorMessage('Por favor, insira o texto a ser revisado.');
        return;
    }
    
    // Obter tipos de revis√£o selecionados
    const tipoRevisao = Array.from(tipoRevisaoSelect.selectedOptions).map(option => option.value);
    
    if (tipoRevisao.length === 0) {
        showErrorMessage('Por favor, selecione pelo menos um tipo de revis√£o.');
        return;
    }
    
    // Mostrar loading
    showLoadingMessage('Revisando texto com IA...');
    
    try {
        // Chamar endpoint do servidor
        const response = await fetch('/api/revisar-texto', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                textoOriginal: textoOriginal,
                tipoRevisao: tipoRevisao,
                observacoes: observacoes
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Processar a resposta que vem com dois blocos
            const resultado = data.result;
            
            // Separar os dois blocos da resposta
            const blocos = separarBlocosRevisao(resultado);
            
            // Formatar e exibir a linha de racioc√≠nio
            const linhaRaciocinio = formatarLinhaRaciocinioRevisao(blocos.linhaRaciocinio);
            
            // Formatar e exibir o texto revisado
            const textoRevisado = formatarTextoRevisado(blocos.textoRevisado);
            
            document.getElementById('linha-raciocinio-revisao').innerHTML = linhaRaciocinio;
            document.getElementById('texto-revisado').innerHTML = textoRevisado;
            document.getElementById('revisao-resultado').style.display = 'block';
            
            showSuccessMessage('Texto revisado com sucesso!');
        } else {
            showErrorMessage('Erro na revis√£o: ' + data.error);
        }
        
    } catch (error) {
        console.error('Erro ao revisar texto:', error);
        showErrorMessage('Erro ao revisar texto. Tente novamente.');
    }
}

// Fun√ß√£o para separar os blocos da resposta de revis√£o
function separarBlocosRevisao(resposta) {
    if (!resposta) return { linhaRaciocinio: '', textoRevisado: '' };
    
    // Procurar por marcadores que indicam os blocos
    const marcadores = [
        '(1) LINHA DE RACIOC√çNIO INTERNA',
        '(2) TEXTO REVISADO',
        'LINHA DE RACIOC√çNIO INTERNA',
        'TEXTO REVISADO',
        '1. LINHA DE RACIOC√çNIO INTERNA',
        '2. TEXTO REVISADO'
    ];
    
    let linhaRaciocinio = '';
    let textoRevisado = '';
    
    // Tentar separar por marcadores
    for (let i = 0; i < marcadores.length; i += 2) {
        const marcador1 = marcadores[i];
        const marcador2 = marcadores[i + 1];
        
        const index1 = resposta.indexOf(marcador1);
        const index2 = resposta.indexOf(marcador2);
        
        if (index1 !== -1 && index2 !== -1) {
            linhaRaciocinio = resposta.substring(index1 + marcador1.length, index2).trim();
            textoRevisado = resposta.substring(index2 + marcador2.length).trim();
            break;
        }
    }
    
    // Se n√£o encontrou os marcadores, tentar separar por quebras de linha
    if (!linhaRaciocinio && !textoRevisado) {
        const linhas = resposta.split('\n');
        let encontrouPrimeiro = false;
        
        for (let i = 0; i < linhas.length; i++) {
            const linha = linhas[i].trim();
            if (linha.includes('LINHA DE RACIOC√çNIO') || linha.includes('racioc√≠nio')) {
                encontrouPrimeiro = true;
                continue;
            }
            if (linha.includes('TEXTO REVISADO') || linha.includes('revisado')) {
                encontrouPrimeiro = false;
                continue;
            }
            
            if (encontrouPrimeiro) {
                linhaRaciocinio += linha + '\n';
            } else {
                textoRevisado += linha + '\n';
            }
        }
    }
    
    return {
        linhaRaciocinio: linhaRaciocinio.trim(),
        textoRevisado: textoRevisado.trim()
    };
}

// Fun√ß√£o para formatar a linha de racioc√≠nio da revis√£o
function formatarLinhaRaciocinioRevisao(linhaRaciocinio) {
    if (!linhaRaciocinio) return '';
    
    let linha = '<div class="linha-raciocinio revisao">';
    linha += '<h6 class="text-info mb-3"><i class="fas fa-brain me-2"></i>Linha de Racioc√≠nio da Revis√£o:</h6>';
    
    // Formatar o conte√∫do da linha de racioc√≠nio
    let conteudoFormatado = linhaRaciocinio
        .replace(/\n\n/g, '</p><p>')  // Dupla quebra de linha = novo par√°grafo
        .replace(/\n/g, '<br>')       // Quebra simples = <br>
        .replace(/^/, '<p>')          // Iniciar com <p>
        .replace(/$/, '</p>');        // Terminar com </p>
    
    // Destacar elementos importantes
    conteudoFormatado = conteudoFormatado
        .replace(/Padroniza√ß√£o/gi, '<strong class="text-primary">Padroniza√ß√£o</strong>')
        .replace(/Clareza/gi, '<strong class="text-success">Clareza</strong>')
        .replace(/Compliance/gi, '<strong class="text-warning">Compliance</strong>')
        .replace(/Estrutura/gi, '<strong class="text-info">Estrutura</strong>')
        .replace(/LGPD/gi, '<strong class="text-danger">LGPD</strong>')
        .replace(/CCB/gi, '<strong class="text-secondary">CCB</strong>');
    
    linha += '<div class="alert alert-light border-start border-info border-4">';
    linha += conteudoFormatado;
    linha += '</div>';
    linha += '</div>';
    
    return linha;
}

// Fun√ß√£o para formatar o texto revisado
function formatarTextoRevisado(texto) {
    if (!texto) return '';
    
    // Quebrar o texto em par√°grafos baseado em quebras de linha
    let textoFormatado = texto
        .replace(/\n\n/g, '</p><p>')  // Dupla quebra de linha = novo par√°grafo
        .replace(/\n/g, '<br>')       // Quebra simples = <br>
        .replace(/^/, '<p>')          // Iniciar com <p>
        .replace(/$/, '</p>');        // Terminar com </p>
    
    // Destacar frases importantes
    textoFormatado = textoFormatado
        .replace(/Prezado\(a\)/g, '<strong>Prezado(a)</strong>')
        .replace(/Atenciosamente/g, '<strong>Atenciosamente</strong>')
        .replace(new RegExp(`Equipe ${NOME_EMPRESA}`, 'g'), `<strong>Equipe ${NOME_EMPRESA}</strong>`);
    
    return textoFormatado;
}


// ===== FUN√á√ïES DE E-MAIL =====

function gerarEmail() {
    const tipoEmail = document.getElementById('tipo-email').value;
    const assunto = document.getElementById('assunto-email').value;
    const destinatario = document.getElementById('destinatario').value;
    const contexto = document.getElementById('contexto-email').value;
    
    if (!tipoEmail || !assunto.trim()) {
        showErrorMessage('Por favor, selecione o tipo de e-mail e preencha o assunto.');
        return;
    }
    
    const email = gerarEmailFormal(tipoEmail, assunto, destinatario, contexto);
    
    document.getElementById('email-content').innerHTML = email;
    document.getElementById('email-resultado').style.display = 'block';
    
    showSuccessMessage('E-mail gerado com sucesso!');
}

function gerarEmailFormal(tipo, assunto, destinatario, contexto) {
    let email = '';
    
    // Sauda√ß√£o
    email += `<p><strong>Assunto:</strong> ${assunto}</p>`;
    email += `<p>Prezado(a) ${destinatario || 'cliente'},</p>`;
    
    // Corpo baseado no tipo
    switch (tipo) {
        case 'resposta-cliente':
            email += '<p>Agradecemos seu contato e lamentamos pelo transtorno causado.</p>';
            email += '<p>Informamos que sua solicita√ß√£o est√° sendo analisada por nossa equipe especializada.</p>';
            break;
        case 'esclarecimento':
            email += '<p>Viemos por meio desta esclarecer sobre a situa√ß√£o mencionada.</p>';
            break;
        case 'solicitacao':
            email += '<p>Gostar√≠amos de solicitar algumas informa√ß√µes adicionais para melhor atend√™-lo(a).</p>';
            break;
        case 'confirmacao':
            email += '<p>Confirmamos o recebimento de sua solicita√ß√£o.</p>';
            break;
    }
    
    // Contexto espec√≠fico
    if (contexto.trim()) {
        email += `<p>${contexto}</p>`;
    }
    
    // Fechamento
    email += '<p>Em caso de d√∫vidas, estamos √† disposi√ß√£o.</p>';
    email += `<p>Atenciosamente,<br>Equipe ${NOME_EMPRESA}</p>`;
    
    return email;
}


// ===== FUN√á√ïES DE FAQ & COMPLIANCE =====

function gerarFAQ() {
    const tema = document.getElementById('tema-faq').value;
    const pergunta = document.getElementById('pergunta-faq').value;
    
    if (!tema) {
        showErrorMessage('Por favor, selecione o tema.');
        return;
    }
    
    const respostaFAQ = gerarRespostaFAQ(tema, pergunta);
    
    document.getElementById('faq-content').innerHTML = respostaFAQ;
    document.getElementById('faq-resultado').style.display = 'block';
    
    showSuccessMessage('Resposta FAQ gerada com sucesso!');
}

function gerarRespostaFAQ(tema, pergunta) {
    const respostas = {
        'lgpd': `
            <p><strong>Pergunta:</strong> ${pergunta || 'Como a LGPD afeta meus dados?'}</p>
            <p><strong>Resposta:</strong></p>
            <p>A Lei Geral de Prote√ß√£o de Dados (LGPD - Lei n¬∫ 13.709/2018) garante seus direitos sobre seus dados pessoais:</p>
            <ul>
                <li>Acesso aos seus dados</li>
                <li>Corre√ß√£o de informa√ß√µes incorretas</li>
                <li>Exclus√£o de dados</li>
                <li>Portabilidade de dados</li>
            </ul>
            <p>Para exercer qualquer um desses direitos, entre em contato conosco.</p>
        `,
        'reclame-aqui': `
            <p><strong>Pergunta:</strong> ${pergunta || 'Como funciona o Reclame Aqui?'}</p>
            <p><strong>Resposta:</strong></p>
            <p>O Reclame Aqui √© uma plataforma que conecta consumidores e empresas para resolu√ß√£o de problemas:</p>
            <ul>
                <li>Registro de reclama√ß√µes</li>
                <li>Resposta da empresa</li>
                <li>Avalia√ß√£o do atendimento</li>
                <li>Medi√ß√£o de satisfa√ß√£o</li>
            </ul>
            <p>Nossa equipe est√° sempre pronta para atender suas solicita√ß√µes.</p>
        `,
        'receita-federal': `
            <p><strong>Pergunta:</strong> ${pergunta || 'Como acessar o Portal da Receita Federal?'}</p>
            <p><strong>Resposta:</strong></p>
            <p>Para acessar o Portal da Receita Federal:</p>
            <ol>
                <li>Acesse www.gov.br/receitafederal</li>
                <li>Clique em "eCAC"</li>
                <li>Fa√ßa login com CPF e senha</li>
                <li>Navegue pelas op√ß√µes dispon√≠veis</li>
            </ol>
            <p>Em caso de d√∫vidas, nossa equipe est√° dispon√≠vel para orienta√ß√µes.</p>
        `,
        'compliance': `
            <p><strong>Pergunta:</strong> ${pergunta || 'Quais s√£o as pol√≠ticas de compliance da empresa?'}</p>
            <p><strong>Resposta:</strong></p>
            <p>Nossa empresa segue rigorosas pol√≠ticas de compliance:</p>
            <ul>
                <li>Conformidade com a LGPD</li>
                <li>Respeito √†s regulamenta√ß√µes</li>
                <li>Transpar√™ncia nas opera√ß√µes</li>
                <li>Prote√ß√£o de dados</li>
            </ul>
            <p>Estamos comprometidos com a √©tica e transpar√™ncia em todas as nossas atividades.</p>
        `
    };
    
    return respostas[tema] || '<p>Resposta n√£o dispon√≠vel para este tema.</p>';
}

// ===== FUN√á√ïES DE MODERA√á√ÉO DE NOTAS =====

function gerarModeracaoNotas() {
    const avaliacao = document.getElementById('avaliacao-cliente').value;
    const solucaoRealizada = document.getElementById('solucao-realizada').value;
    const inconsistencias = document.getElementById('inconsistencias').value;
    
    if (!avaliacao.trim() || !solucaoRealizada.trim()) {
        showErrorMessage('Por favor, preencha a avalia√ß√£o do cliente e a solu√ß√£o realizada.');
        return;
    }
    
    const moderacao = gerarSolicitacaoModeracaoNotas(avaliacao, solucaoRealizada, inconsistencias);
    
    document.getElementById('moderacao-notas-content').innerHTML = moderacao;
    document.getElementById('moderacao-notas-resultado').style.display = 'block';
    
    showSuccessMessage('Solicita√ß√£o de modera√ß√£o de notas gerada com sucesso!');
}

function gerarSolicitacaoModeracaoNotas(avaliacao, solucaoRealizada, inconsistencias) {
    let moderacao = '<p><strong>Solicita√ß√£o de Modera√ß√£o de Notas</strong></p>';
    
    moderacao += '<p>Prezados,</p>';
    moderacao += '<p>Solicitamos a modera√ß√£o da avalia√ß√£o acima pelos seguintes motivos:</p>';
    
    moderacao += '<p><strong>Avalia√ß√£o do Cliente:</strong></p>';
    moderacao += `<p>${avaliacao}</p>`;
    
    moderacao += '<p><strong>Solu√ß√£o Realmente Realizada:</strong></p>';
    moderacao += `<p>${solucaoRealizada}</p>`;
    
    if (inconsistencias.trim()) {
        moderacao += '<p><strong>Inconsist√™ncias Identificadas:</strong></p>';
        moderacao += `<p>${inconsistencias}</p>`;
    }
    
    moderacao += '<p>A nota atribu√≠da n√£o condiz com a solu√ß√£o real implementada pela empresa.</p>';
    moderacao += '<p>Solicitamos a anula√ß√£o da avalia√ß√£o para n√£o prejudicar nossa reputa√ß√£o.</p>';
    
    moderacao += '<p>Agradecemos a aten√ß√£o.</p>';
    
    return moderacao;
}

// ===== FUN√á√ïES AUXILIARES =====

function copiarResposta(elementId) {
    const element = document.getElementById(elementId);
    const text = element.innerText || element.textContent;
    
    navigator.clipboard.writeText(text).then(() => {
        showSuccessMessage('Texto copiado para a √°rea de transfer√™ncia!');
    }).catch(() => {
        showErrorMessage('Erro ao copiar texto.');
    });
}

function copiarModeracao() {
    const linhaRaciocinio = document.getElementById('linha-raciocinio').innerText;
    const textoModeracao = document.getElementById('texto-moderacao').innerText;
    
    const textoCompleto = linhaRaciocinio + '\n\n' + textoModeracao;
    
    navigator.clipboard.writeText(textoCompleto).then(() => {
        showSuccessMessage('Solicita√ß√£o de modera√ß√£o copiada para a √°rea de transfer√™ncia!');
    }).catch(() => {
        showErrorMessage('Erro ao copiar texto.');
    });
}

// Fun√ß√£o para gerar feedback de modera√ß√£o
function gerarFeedbackModeracao() {
    const solicitacaoCliente = document.getElementById('solicitacao-cliente').value;
    const respostaEmpresa = document.getElementById('resposta-empresa').value;
    const motivoModeracao = document.getElementById('motivo-moderacao').value;
    
    if (!solicitacaoCliente || (typeof solicitacaoCliente === 'string' && !solicitacaoCliente.trim()) || !motivoModeracao) {
        showErrorMessage('Por favor, preencha a solicita√ß√£o do cliente e selecione o motivo da modera√ß√£o.');
        return;
    }
    
    // Gerar an√°lise de feedback
    const feedback = gerarAnaliseFeedbackModeracao(solicitacaoCliente, respostaEmpresa, motivoModeracao);
    
    document.getElementById('feedback-conteudo').innerHTML = feedback;
    document.getElementById('feedback-moderacao').style.display = 'block';
    
    showSuccessMessage('An√°lise de feedback gerada com sucesso!');
}

// Fun√ß√£o para gerar an√°lise de feedback
function gerarAnaliseFeedbackModeracao(solicitacaoCliente, respostaEmpresa, motivoModeracao) {
    let feedback = '<p><strong>An√°lise de Feedback - Modera√ß√£o RA</strong></p>';
    
    feedback += '<p><strong>Situa√ß√£o Analisada:</strong></p>';
    feedback += `<p>‚Ä¢ Motivo da modera√ß√£o: ${motivoModeracao}</p>`;
    feedback += `<p>‚Ä¢ Solicita√ß√£o do cliente: ${solicitacaoCliente.substring(0, 100)}...</p>`;
    
    if (respostaEmpresa && respostaEmpresa.trim()) {
        feedback += `<p>‚Ä¢ Resposta da empresa: ${respostaEmpresa.substring(0, 100)}...</p>`;
    }
    
    feedback += '<p><strong>An√°lise:</strong></p>';
    
    switch (motivoModeracao) {
        case 'reclamacao-outra-empresa':
            feedback += `<p>‚úÖ <strong>Modera√ß√£o Justificada:</strong> A reclama√ß√£o √© direcionada a outra empresa, n√£o √† ${NOME_EMPRESA}. Recomenda-se solicitar a modera√ß√£o para redirecionamento correto.</p>`;
            break;
        case 'reclamacao-trabalhista':
            feedback += '<p>‚úÖ <strong>Modera√ß√£o Justificada:</strong> Quest√£o trabalhista n√£o √© de compet√™ncia do Reclame Aqui. Recomenda-se solicitar a modera√ß√£o.</p>';
            break;
        case 'conteudo-improprio':
            feedback += '<p>‚ö†Ô∏è <strong>Aten√ß√£o:</strong> Verificar se o conte√∫do realmente cont√©m linguagem inadequada. Se confirmado, solicitar modera√ß√£o.</p>';
            break;
        case 'reclamacao-duplicidade':
            feedback += '<p>‚úÖ <strong>Modera√ß√£o Justificada:</strong> Reclama√ß√£o duplicada identificada. Recomenda-se solicitar a modera√ß√£o para remo√ß√£o.</p>';
            break;
        case 'reclamacao-terceiros':
            feedback += '<p>‚úÖ <strong>Modera√ß√£o Justificada:</strong> Reclama√ß√£o feita por terceiros n√£o autorizados. Recomenda-se solicitar a modera√ß√£o.</p>';
            break;
        case 'caso-fraude':
            feedback += '<p>‚úÖ <strong>Modera√ß√£o Justificada:</strong> Caso comprovado de fraude. Recomenda-se solicitar a modera√ß√£o imediatamente.</p>';
            break;
        case 'nao-violou-direito':
            feedback += '<p>‚ö†Ô∏è <strong>An√°lise Necess√°ria:</strong> Verificar se realmente n√£o houve viola√ß√£o de direitos. Se confirmado, solicitar modera√ß√£o.</p>';
            break;
        default:
            feedback += '<p>‚ùì <strong>An√°lise Necess√°ria:</strong> Motivo de modera√ß√£o n√£o identificado. Revisar a situa√ß√£o antes de solicitar modera√ß√£o.</p>';
    }
    
    feedback += '<p><strong>Recomenda√ß√£o:</strong></p>';
    feedback += '<p>‚Ä¢ Documentar todos os fatos e evid√™ncias</p>';
    feedback += '<p>‚Ä¢ Preparar justificativa clara para a modera√ß√£o</p>';
    feedback += '<p>‚Ä¢ Manter registro da solicita√ß√£o para acompanhamento</p>';
    
    return feedback;
}

// Fun√ß√£o para avaliar modera√ß√£o
async function avaliarModeracao(tipoAvaliacao) {
    console.log('üéØ Fun√ß√£o avaliarModeracao chamada com tipo:', tipoAvaliacao);
    
    const linhaRaciocinio = document.getElementById('linha-raciocinio').innerText;
    const textoModeracao = document.getElementById('texto-moderacao').innerText;
    
    console.log('üìù Conte√∫do capturado:', {
        linhaRaciocinio: linhaRaciocinio ? 'OK' : 'VAZIO',
        textoModeracao: textoModeracao ? 'OK' : 'VAZIO'
    });
    
    if (!linhaRaciocinio.trim() || !textoModeracao.trim()) {
        showErrorMessage('N√£o h√° solicita√ß√£o de modera√ß√£o para avaliar.');
        return;
    }
    
    if (tipoAvaliacao === 'coerente') {
        console.log('‚úÖ Marcando como coerente - chamando salvarModeracaoComoModelo()');
        // Marcar como aprovada e salvar como modelo
        await salvarModeracaoComoModelo();
        
        // Atualizar estat√≠sticas globais ap√≥s salvar
        carregarEstatisticasGlobais();
        
    } else if (tipoAvaliacao === 'incoerente') {
        console.log('‚ùå Marcando como incoerente - chamando solicitarFeedbackModeracao()');
        // Solicitar feedback para reformula√ß√£o
        solicitarFeedbackModeracao();
    }
}

// Fun√ß√£o para salvar modera√ß√£o como modelo
async function salvarModeracaoComoModelo() {
    console.log('üöÄ FUN√á√ÉO salvarModeracaoComoModelo INICIADA!');
    try {
        console.log('üéØ Iniciando salvamento de modera√ß√£o como modelo...');
        
        // Obter dados da modera√ß√£o atual
        const solicitacaoCliente = document.getElementById('solicitacao-cliente').value;
        const respostaEmpresa = document.getElementById('resposta-empresa').value;
        const motivoModeracao = document.getElementById('motivo-moderacao').value;
        const consideracaoFinal = document.getElementById('consideracao-final').value;
        
        const linhaRaciocinio = document.getElementById('linha-raciocinio').innerText;
        const textoModeracao = document.getElementById('texto-moderacao').innerText;
        
        console.log('üîç Elementos encontrados:', {
            linhaRaciocinioElement: document.getElementById('linha-raciocinio') ? 'OK' : 'N√ÉO ENCONTRADO',
            textoModeracaoElement: document.getElementById('texto-moderacao') ? 'OK' : 'N√ÉO ENCONTRADO'
        });
        
        console.log('üìù Dados capturados:', {
            solicitacaoCliente: solicitacaoCliente ? 'OK' : 'VAZIO',
            respostaEmpresa: respostaEmpresa ? 'OK' : 'VAZIO',
            motivoModeracao: motivoModeracao ? 'OK' : 'VAZIO',
            consideracaoFinal: consideracaoFinal ? 'OK' : 'VAZIO',
            linhaRaciocinio: linhaRaciocinio ? 'OK' : 'VAZIO',
            textoModeracao: textoModeracao ? 'OK' : 'VAZIO'
        });
        
        if (!solicitacaoCliente || !respostaEmpresa || !motivoModeracao || !consideracaoFinal) {
            console.error('‚ùå Dados incompletos:', {
                solicitacaoCliente: solicitacaoCliente ? 'OK' : 'VAZIO',
                respostaEmpresa: respostaEmpresa ? 'OK' : 'VAZIO',
                motivoModeracao: motivoModeracao ? 'OK' : 'VAZIO',
                consideracaoFinal: consideracaoFinal ? 'OK' : 'VAZIO'
            });
            showErrorMessage('Dados incompletos para salvar como modelo.');
            return;
        }
        
        // Mostrar loading
        showLoadingMessage('Salvando modera√ß√£o como modelo...');
        
        // Chamar endpoint para salvar modelo
        console.log('üöÄ Enviando dados para o servidor...');
        const response = await fetch('/api/save-modelo-moderacao', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                dadosModeracao: {
                    solicitacaoCliente: solicitacaoCliente,
                    respostaEmpresa: respostaEmpresa,
                    motivoModeracao: motivoModeracao,
                    consideracaoFinal: consideracaoFinal
                },
                linhaRaciocinio: linhaRaciocinio,
                textoModeracao: textoModeracao
            })
        });
        
        console.log('üì° Resposta do servidor:', response.status, response.statusText);
        
        const data = await response.json();
        
        if (data.success) {
            showSuccessMessage('‚úÖ Modera√ß√£o salva como modelo para futuras solicita√ß√µes!');
            console.log('üìù Modelo de modera√ß√£o salvo:', data.modelo);
        } else {
            showErrorMessage('Erro ao salvar modelo: ' + data.error);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar modelo de modera√ß√£o:', error);
        showErrorMessage('Erro ao salvar modelo de modera√ß√£o.');
    }
}

// Fun√ß√£o para solicitar feedback de modera√ß√£o
function solicitarFeedbackModeracao() {
    const modalHtml = `
        <div class="modal fade" id="feedbackModalModeracao" tabindex="-1" aria-labelledby="feedbackModalModeracaoLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="feedbackModalModeracaoLabel">
                            <i class="fas fa-comment-dots me-2"></i>
                            Feedback para Reformula√ß√£o
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="feedback-moderacao-text" class="form-label">
                                <strong>Por que a solicita√ß√£o est√° incoerente?</strong>
                            </label>
                            <p class="text-muted small">Descreva o que est√° errado para que o sistema aprenda e melhore futuras solicita√ß√µes.</p>
                            <textarea class="form-control" id="feedback-moderacao-text" rows="4" 
                                placeholder="Ex: Motivo inadequado, falta de clareza, informa√ß√µes incorretas..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i>
                            Cancelar
                        </button>
                        <button type="button" class="btn btn-warning" onclick="processarFeedbackModeracao()">
                            <i class="fas fa-redo me-2"></i>
                            Reformular com Feedback
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Remover modal anterior se existir
    const modalAnterior = document.getElementById('feedbackModalModeracao');
    if (modalAnterior) {
        modalAnterior.remove();
    }
    
    // Adicionar modal ao body
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Mostrar modal
    const modal = new bootstrap.Modal(document.getElementById('feedbackModalModeracao'));
    modal.show();
}

// Fun√ß√£o para processar feedback de modera√ß√£o
async function processarFeedbackModeracao() {
    const feedbackText = document.getElementById('feedback-moderacao-text').value.trim();
    
    if (!feedbackText) {
        showErrorMessage('Por favor, forne√ßa um feedback para a reformula√ß√£o.');
        return;
    }
    
    // Fechar modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('feedbackModalModeracao'));
    modal.hide();
    
    // Mostrar loading
    showLoadingMessage('Reformulando solicita√ß√£o de modera√ß√£o com base no feedback...');
    
    try {
        // Gerar nova solicita√ß√£o com base no feedback
        const solicitacaoCliente = document.getElementById('solicitacao-cliente').value;
        const respostaEmpresa = document.getElementById('resposta-empresa').value;
        const motivoModeracao = document.getElementById('motivo-moderacao').value;
        const consideracaoFinal = document.getElementById('consideracao-final').value;
        
        // Chamar o endpoint do servidor para reformula√ß√£o
        const response = await fetch('/api/reformulate-moderation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                textoNegado: document.getElementById('texto-moderacao').innerText,
                motivoNegativa: feedbackText,
                dadosModeracao: {
                    solicitacaoCliente: solicitacaoCliente,
                    respostaEmpresa: respostaEmpresa,
                    motivoModeracao: motivoModeracao,
                    consideracaoFinal: consideracaoFinal
                }
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Processar a resposta reformulada
            const resposta = data.result;
            
            // Para reformula√ß√£o, o servidor retorna apenas o texto reformulado
            const textoFormatado = formatarTextoModeracao(resposta);
            const textoModeracaoReformulado = `<div class="moderacao-texto reformulado">${textoFormatado}</div>`;
            
            // Gerar linha de racioc√≠nio reformulada local
            const linhaRaciocinioReformulada = gerarLinhaRaciocinioModeracaoReformulada(motivoModeracao, solicitacaoCliente, respostaEmpresa, feedbackText);
            
            // Atualizar interface
            document.getElementById('linha-raciocinio').innerHTML = linhaRaciocinioReformulada;
            document.getElementById('texto-moderacao').innerHTML = textoModeracaoReformulado;
            
            showSuccessMessage('Solicita√ß√£o de modera√ß√£o reformulada com script estruturado!');
        } else {
            throw new Error(data.error || 'Erro ao reformular modera√ß√£o');
        }
    } catch (error) {
        console.error('Erro ao reformular modera√ß√£o:', error);
        showErrorMessage('Erro ao reformular modera√ß√£o. Usando modelo local como fallback.');
        
        // Fallback para o modelo local
        const solicitacaoCliente = document.getElementById('solicitacao-cliente').value;
        const respostaEmpresa = document.getElementById('resposta-empresa').value;
        const motivoModeracao = document.getElementById('motivo-moderacao').value;
        const consideracaoFinal = document.getElementById('consideracao-final').value;
        
        const linhaRaciocinioReformulada = gerarLinhaRaciocinioModeracaoReformulada(motivoModeracao, solicitacaoCliente, respostaEmpresa, feedbackText);
        const textoModeracaoReformulado = gerarTextoModeracaoReformulado(motivoModeracao, consideracaoFinal, feedbackText);
        
        document.getElementById('linha-raciocinio').innerHTML = linhaRaciocinioReformulada;
        document.getElementById('texto-moderacao').innerHTML = textoModeracaoReformulado;
        
        showSuccessMessage('Solicita√ß√£o de modera√ß√£o reformulada (modelo local)!');
    }
}

// Fun√ß√£o para gerar linha de racioc√≠nio reformulada
function gerarLinhaRaciocinioModeracaoReformulada(motivoModeracao, solicitacaoCliente, respostaEmpresa, feedback) {
    let linha = '<div class="linha-raciocinio reformulada">';
    linha += '<h6 class="text-warning mb-3"><i class="fas fa-redo me-2"></i>Linha de Racioc√≠nio Interna (Reformulada):</h6>';
    
    linha += '<div class="alert alert-warning border-start border-warning border-4 mb-3">';
    linha += '<p class="mb-2"><strong>An√°lise da Reformula√ß√£o:</strong></p>';
    linha += '<p class="mb-0">Com base no feedback fornecido, a reformula√ß√£o foi realizada considerando os pontos identificados.</p>';
    linha += '</div>';
    
    linha += '<div class="card mb-3">';
    linha += '<div class="card-header bg-danger text-white">';
    linha += '<h6 class="mb-0"><i class="fas fa-comment-dots me-2"></i>Feedback Recebido</h6>';
    linha += '</div>';
    linha += '<div class="card-body">';
    linha += `<p class="mb-0">${feedback}</p>`;
    linha += '</div>';
    linha += '</div>';
    
    linha += '<div class="card mb-3">';
    linha += '<div class="card-header bg-success text-white">';
    linha += '<h6 class="mb-0"><i class="fas fa-check-circle me-2"></i>Ajustes Realizados</h6>';
    linha += '</div>';
    linha += '<div class="card-body">';
    linha += '<ul class="mb-0">';
    linha += '<li>Corrigir os pontos identificados no feedback</li>';
    linha += '<li>Manter a estrutura t√©cnica e formal</li>';
    linha += '<li>Seguir as diretrizes dos manuais do RA</li>';
    linha += '<li>Garantir ader√™ncia aos padr√µes de modera√ß√£o</li>';
    linha += '</ul>';
    linha += '</div>';
    linha += '</div>';
    
    if (solicitacaoCliente && typeof solicitacaoCliente === 'string' && solicitacaoCliente.trim()) {
        linha += '<div class="mb-3">';
        linha += '<h6 class="text-secondary"><i class="fas fa-user me-2"></i>Solicita√ß√£o do Cliente:</h6>';
        linha += `<div class="bg-light p-3 rounded border-start border-secondary border-4">`;
        linha += `<p class="mb-0">${solicitacaoCliente}</p>`;
        linha += '</div>';
        linha += '</div>';
    }
    
    if (respostaEmpresa && respostaEmpresa.trim()) {
        linha += '<div class="mb-3">';
        linha += '<h6 class="text-success"><i class="fas fa-building me-2"></i>Resposta da Empresa:</h6>';
        linha += `<div class="bg-light p-3 rounded border-start border-success border-4">`;
        linha += `<p class="mb-0">${respostaEmpresa}</p>`;
        linha += '</div>';
        linha += '</div>';
    }
    
    linha += '</div>';
    return linha;
}

// Fun√ß√£o para gerar texto de modera√ß√£o reformulado
function gerarTextoModeracaoReformulado(motivoModeracao, consideracaoFinal, feedback) {
    let texto = '<p><strong>Texto para Modera√ß√£o (Reformulado):</strong></p>';
    
    texto += '<p>Prezados,</p>';
    texto += '<p>Solicitamos a modera√ß√£o do conte√∫do acima pelos seguintes motivos:</p>';
    
    const motivos = {
        'reclamacao-outra-empresa': `A reclama√ß√£o √© direcionada a outra empresa, n√£o √† ${NOME_EMPRESA}.`,
        'reclamacao-trabalhista': 'Trata-se de quest√£o trabalhista, n√£o de rela√ß√£o de consumo.',
        'conteudo-improprio': 'O conte√∫do cont√©m linguagem inadequada ou ofensiva.',
        'reclamacao-duplicidade': 'Esta √© uma reclama√ß√£o duplicada j√° registrada anteriormente.',
        'reclamacao-terceiros': 'A reclama√ß√£o √© feita por terceiros n√£o autorizados.',
        'caso-fraude': 'Este √© um caso comprovado de fraude.',
        'nao-violou-direito': 'A empresa n√£o violou o direito do consumidor.'
    };
    
    texto += '<p>' + (motivos[motivoModeracao] || 'Viola√ß√£o √†s regras da plataforma.') + '</p>';
    
    if (consideracaoFinal && consideracaoFinal.trim()) {
        texto += '<p><strong>Considera√ß√£o Final:</strong></p>';
        texto += `<p>${consideracaoFinal}</p>`;
    }
    
    texto += '<p><strong>Observa√ß√£o:</strong> Esta solicita√ß√£o foi reformulada com base em feedback interno para maior clareza e precis√£o.</p>';
    
    texto += '<p>Agradecemos a aten√ß√£o.</p>';
    
    return texto;
}

function updateStats() {
    document.querySelectorAll('.stat-value')[0].textContent = stats.respostasHoje;
    document.querySelectorAll('.stat-value')[1].textContent = stats.moderacoes;
}

// ===== SISTEMA DE HIST√ìRICO =====

// Carregar hist√≥rico do localStorage
function carregarHistorico() {
    try {
        const historicoSalvo = localStorage.getItem(HISTORICO_KEY);
        if (historicoSalvo) {
            historicoStats = JSON.parse(historicoSalvo);
        }
    } catch (error) {
        console.error('Erro ao carregar hist√≥rico:', error);
        historicoStats = [];
    }
}

// Salvar hist√≥rico no localStorage
function salvarHistorico() {
    try {
        localStorage.setItem(HISTORICO_KEY, JSON.stringify(historicoStats));
    } catch (error) {
        console.error('Erro ao salvar hist√≥rico:', error);
    }
}

// Adicionar entrada ao hist√≥rico
function adicionarAoHistorico(tipo, quantidade = 1) {
    const hoje = new Date();
    const dataHoje = hoje.toISOString().split('T')[0]; // YYYY-MM-DD
    
    // Verificar se j√° existe entrada para hoje
    let entradaHoje = historicoStats.find(entrada => entrada.data === dataHoje);
    
    if (entradaHoje) {
        // Atualizar entrada existente
        entradaHoje[tipo] = (entradaHoje[tipo] || 0) + quantidade;
        entradaHoje.ultimaAtualizacao = hoje.toISOString();
    } else {
        // Criar nova entrada
        entradaHoje = {
            data: dataHoje,
            respostas: tipo === 'respostas' ? quantidade : 0,
            moderacoes: tipo === 'moderacoes' ? quantidade : 0,
            ultimaAtualizacao: hoje.toISOString()
        };
        historicoStats.unshift(entradaHoje);
    }
    
    // Manter apenas os √∫ltimos 30 dias
    if (historicoStats.length > 30) {
        historicoStats = historicoStats.slice(0, 30);
    }
    
    salvarHistorico();
}

// Exibir hist√≥rico
function exibirHistorico() {
    const historicoContent = document.getElementById('historico-content');
    
    // Carregar hist√≥rico do servidor
    carregarHistoricoDoServidor();
}

// Carregar hist√≥rico do servidor
async function carregarHistoricoDoServidor() {
    try {
        console.log('üìä Carregando hist√≥rico do servidor...');
        const response = await fetch('/api/estatisticas-globais');
        const data = await response.json();
        
        if (data.success && data.historico) {
            exibirHistoricoServidor(data.historico);
        } else {
            document.getElementById('historico-content').innerHTML = `
                <div class="historico-empty">
                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                    <p>Erro ao carregar hist√≥rico</p>
                    <small>Tente novamente em alguns instantes</small>
                </div>
            `;
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar hist√≥rico do servidor:', error);
        document.getElementById('historico-content').innerHTML = `
            <div class="historico-empty">
                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                <p>Erro ao carregar hist√≥rico</p>
                <small>Tente novamente em alguns instantes</small>
            </div>
        `;
    }
}

// Exibir hist√≥rico do servidor
function exibirHistoricoServidor(historicoServidor) {
    const historicoContent = document.getElementById('historico-content');
    
    if (!historicoServidor || historicoServidor.length === 0) {
        historicoContent.innerHTML = `
            <div class="historico-empty">
                <i class="fas fa-inbox fa-2x mb-2"></i>
                <p>Nenhum hist√≥rico dispon√≠vel</p>
                <small>As estat√≠sticas aparecer√£o aqui conforme o uso</small>
            </div>
        `;
        return;
    }
    
    let html = '';
    historicoServidor.forEach(entrada => {
        const data = new Date(entrada.data);
        const dataFormatada = data.toLocaleDateString('pt-BR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
        
        const respostas = entrada.respostas_geradas || 0;
        const moderacoes = entrada.moderacoes_geradas || 0;
        const respostasCoerentes = entrada.respostas_coerentes || 0;
        const moderacoesCoerentes = entrada.moderacoes_coerentes || 0;
        const revisoes = entrada.revisoes_texto || 0;
        const explicacoes = entrada.explicacoes_geradas || 0;
        
        html += `
            <div class="historico-item">
                <div class="historico-data">
                    <i class="fas fa-calendar-day me-1"></i>
                    ${dataFormatada}
                </div>
                <div class="historico-stats">
                    <div class="historico-stat respostas">
                        <i class="fas fa-reply"></i>
                        <span>${respostas} respostas</span>
                    </div>
                    <div class="historico-stat moderacoes">
                        <i class="fas fa-gavel"></i>
                        <span>${moderacoes} modera√ß√µes</span>
                    </div>
                    <div class="historico-stat coerentes">
                        <i class="fas fa-check-circle"></i>
                        <span>${respostasCoerentes + moderacoesCoerentes} coerentes</span>
                    </div>
                    <div class="historico-stat revisoes">
                        <i class="fas fa-edit"></i>
                        <span>${revisoes} revis√µes</span>
                    </div>
                    <div class="historico-stat explicacoes">
                        <i class="fas fa-book"></i>
                        <span>${explicacoes} explica√ß√µes</span>
                    </div>
                </div>
            </div>
        `;
    });
    
    historicoContent.innerHTML = html;
}

// Toggle do painel de hist√≥rico
function toggleHistorico() {
    const panel = document.getElementById('historico-panel');
    const isVisible = panel.style.display !== 'none';
    
    if (isVisible) {
        panel.style.display = 'none';
    } else {
        panel.style.display = 'block';
        exibirHistorico();
    }
}

// Inicializar sistema de hist√≥rico
function inicializarHistorico() {
    // Carregar apenas estat√≠sticas globais do servidor
    carregarEstatisticasGlobais();
}

function showSuccessMessage(message) {
    const successDiv = document.createElement('div');
    successDiv.className = 'success-message';
    successDiv.innerHTML = `<i class="fas fa-check-circle"></i> ${message}`;
    
    // Tentar diferentes seletores para encontrar o container
    const container = document.querySelector('.container') || 
                     document.querySelector('.container-fluid') || 
                     document.body;
    
    container.appendChild(successDiv);
    
    setTimeout(() => {
        if (successDiv.parentNode) {
        successDiv.remove();
        }
    }, 5000);
}

function showErrorMessage(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${message}`;
    
    // Tentar diferentes seletores para encontrar o container
    const container = document.querySelector('.container') || 
                     document.querySelector('.container-fluid') || 
                     document.body;
    
    container.appendChild(errorDiv);
    
    setTimeout(() => {
        if (errorDiv.parentNode) {
        errorDiv.remove();
        }
    }, 5000);
}

// ================== EXPORTA√á√ïES PARA USO GLOBAL ==================
// Exportar fun√ß√µes principais
window.velotaxBot = {
    gerarRespostaOpenAI,
    gerarModeracao,
    gerarExplicacao,
    revisarTexto,
    gerarEmail,
    gerarFAQ,
    salvarRascunho,
    carregarRascunho,
    copiarResposta,
    verHistorico,
    fecharHistorico,
    toggleHistorico,
    visualizarModelosSalvos,
    testarFuncao,
    avaliarResposta,
    avaliarModeracao,
    copiarRespostaOpenAI,
    limparRespostaOpenAI,
    copiarModeracao,
    cancelarReformulacao,
    gerarFeedbackModeracao
};

// Exportar configura√ß√µes para uso global
window.velotaxConfig = {
    DOMINIO_CORPORATIVO,
    NOME_EMPRESA,
    SITE_EMPRESA
};

// Log de inicializa√ß√£o
console.log('üöÄ Velotax Bot - Fun√ß√µes exportadas para uso global');
console.log('üìã Configura√ß√µes dispon√≠veis:', window.velotaxConfig);
console.log('üîß Para alterar configura√ß√µes, use: window.velotaxBot.alterarConfiguracaoEmpresa()');