const googleSheetsConfig = require('./google-sheets-config');
const fs = require('fs');

class GoogleSheetsIntegration {
    constructor() {
        this.initialized = false;
        this.spreadsheetId = null;
        this.rateLimitQueue = [];
        this.isProcessingQueue = false;
        this.lastRequestTime = 0;
        this.minRequestInterval = 1000; // 1 segundo entre requests
        this.cache = new Map();
        this.cacheTimeout = 2 * 60 * 1000; // 2 minutos (mais responsivo)
    }

    /**
     * Inicializa a integra√ß√£o com Google Sheets
     */
    async initialize(envVars = null) {
        try {
            console.log('üîß Inicializando integra√ß√£o com Google Sheets...');
            
            // Google Sheets habilitado para Vercel com Service Account
            
            // Carregar configura√ß√µes do ambiente
            const spreadsheetId = envVars?.GOOGLE_SHEETS_ID || process.env.GOOGLE_SHEETS_ID;
            if (!spreadsheetId) {
                console.log('‚ö†Ô∏è GOOGLE_SHEETS_ID n√£o configurado. Integra√ß√£o desabilitada.');
                return false;
            }

            this.spreadsheetId = spreadsheetId;
            
            // Verificar se as credenciais do Service Account est√£o nas vari√°veis de ambiente
            const serviceAccountEmail = envVars?.GOOGLE_SERVICE_ACCOUNT_EMAIL || process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;
            const privateKey = envVars?.GOOGLE_PRIVATE_KEY || process.env.GOOGLE_PRIVATE_KEY;
            const projectId = envVars?.GOOGLE_PROJECT_ID || process.env.GOOGLE_PROJECT_ID;

            // Priorizar Service Account (m√©todo correto para Vercel)
            if (serviceAccountEmail && privateKey && projectId) {
                console.log('üîß Usando Service Account para autentica√ß√£o...');
                
                // Montar objeto de credenciais do Service Account
                const credentials = {
                    type: 'service_account',
                    project_id: projectId,
                    private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID || 'default',
                    private_key: privateKey.replace(/\\n/g, '\n'),
                    client_email: serviceAccountEmail,
                    client_id: process.env.GOOGLE_SERVICE_ACCOUNT_CLIENT_ID || process.env.GOOGLE_CLIENT_ID,
                    auth_uri: 'https://accounts.google.com/o/oauth2/auth',
                    token_uri: 'https://oauth2.googleapis.com/token',
                    auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs',
                    client_x509_cert_url: `https://www.googleapis.com/robot/v1/metadata/x509/${encodeURIComponent(serviceAccountEmail)}`
                };

                this.initialized = await googleSheetsConfig.initializeWithCredentials(credentials, spreadsheetId);
                
                if (this.initialized) {
                    console.log('‚úÖ Integra√ß√£o com Google Sheets (Service Account) inicializada com sucesso');
                    await this.ensureSheetsExist();
                    this.startCacheCleanup(); // Iniciar limpeza peri√≥dica de cache
                } else {
                    console.log('‚ö†Ô∏è Integra√ß√£o com Google Sheets (Service Account) n√£o p√¥de ser inicializada');
                }

                return this.initialized;
            }
            
            // Fallback para OAuth2 (m√©todo antigo)
            const clientId = process.env.GOOGLE_CLIENT_ID;
            const clientSecret = process.env.GOOGLE_CLIENT_SECRET;
            
            if (clientId && clientSecret) {
                console.log('‚ö†Ô∏è Usando OAuth2 (m√©todo antigo - pode n√£o funcionar na Vercel)...');
            } else {
                console.log('‚ö†Ô∏è Credenciais do Google n√£o configuradas. Integra√ß√£o desabilitada.');
                return false;
            }

            // Criar objeto de credenciais a partir das vari√°veis de ambiente
            const credentials = {
                installed: {
                    client_id: clientId,
                    project_id: process.env.GOOGLE_PROJECT_ID || 'velotax-bot-v2',
                    auth_uri: process.env.GOOGLE_AUTH_URI || 'https://accounts.google.com/o/oauth2/auth',
                    token_uri: process.env.GOOGLE_TOKEN_URI || 'https://oauth2.googleapis.com/token',
                    auth_provider_x509_cert_url: process.env.GOOGLE_AUTH_PROVIDER_X509_CERT_URL || 'https://www.googleapis.com/oauth2/v1/certs',
                    client_secret: clientSecret,
                    redirect_uris: process.env.GOOGLE_REDIRECT_URIS ? process.env.GOOGLE_REDIRECT_URIS.split(',') : ['http://localhost', 'https://velotax-bot-v2.vercel.app/']
                }
            };

            this.initialized = await googleSheetsConfig.initializeWithCredentials(credentials, spreadsheetId);
            
            if (this.initialized) {
                console.log('‚úÖ Integra√ß√£o com Google Sheets inicializada com sucesso');
                await this.ensureSheetsExist();
            } else {
                console.log('‚ö†Ô∏è Integra√ß√£o com Google Sheets n√£o p√¥de ser inicializada');
            }

            return this.initialized;

        } catch (error) {
            console.error('‚ùå Erro ao inicializar integra√ß√£o com Google Sheets:', error.message);
            return false;
        }
    }

    /**
     * Verifica se a integra√ß√£o est√° ativa
     */
    isActive() {
        // Google Sheets habilitado para Vercel com Service Account
        return this.initialized && googleSheetsConfig.isInitialized();
    }

    /**
     * Verifica o status da API do Google Sheets
     */
    async checkApiStatus() {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo');
            return false;
        }

        try {
            console.log('üîç Verificando status da API do Google Sheets...');
            
            // Tentar uma opera√ß√£o simples para verificar se a API est√° funcionando
            const sheets = googleSheetsConfig.getSheets();
            const spreadsheetId = googleSheetsConfig.getSpreadsheetId();
            
            // Fazer uma requisi√ß√£o simples para verificar conectividade
            const response = await sheets.spreadsheets.get({
                spreadsheetId: spreadsheetId,
                fields: 'properties.title'
            });
            
            console.log('‚úÖ API do Google Sheets funcionando. Planilha:', response.data.properties.title);
            return true;
            
        } catch (error) {
            console.error('‚ùå Erro ao verificar status da API do Google Sheets:', error.message);
            
            // Verificar se √© erro de quota
            if (error.message.includes('quota') || error.message.includes('exceeded') || error.message.includes('429')) {
                console.log('‚ö†Ô∏è Quota da API do Google Sheets excedida');
                this.handleQuotaError(error);
            }
            
            return false;
        }
    }

    /**
     * Rate limiting para evitar esgotamento de quota
     */
    async waitForRateLimit() {
        const now = Date.now();
        const timeSinceLastRequest = now - this.lastRequestTime;
        
        if (timeSinceLastRequest < this.minRequestInterval) {
            const waitTime = this.minRequestInterval - timeSinceLastRequest;
            console.log(`‚è≥ Rate limiting: aguardando ${waitTime}ms...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }
        
        this.lastRequestTime = Date.now();
    }

    /**
     * Verifica cache antes de fazer request
     */
    getFromCache(key, forceRefresh = false) {
        if (forceRefresh) {
            console.log(`üîÑ For√ßando refresh do cache para: ${key}`);
            this.cache.delete(key);
            return null;
        }
        
        const cached = this.cache.get(key);
        if (cached && (Date.now() - cached.timestamp) < this.cacheTimeout) {
            console.log(`üìã Cache hit para: ${key}`);
            return cached.data;
        }
        return null;
    }

    /**
     * Salva no cache
     */
    setCache(key, data) {
        this.cache.set(key, {
            data: data,
            timestamp: Date.now()
        });
        console.log(`üíæ Cache salvo para: ${key}`);
    }

    /**
     * Limpa cache expirado
     */
    cleanExpiredCache() {
        const now = Date.now();
        for (const [key, value] of this.cache.entries()) {
            if ((now - value.timestamp) >= this.cacheTimeout) {
                this.cache.delete(key);
            }
        }
    }

    /**
     * Invalida cache espec√≠fico (usado ap√≥s opera√ß√µes de escrita)
     */
    invalidateCache(keys = []) {
        if (keys.length === 0) {
            // Se n√£o especificar chaves, limpar todo o cache
            this.cache.clear();
            console.log('üóëÔ∏è Cache completamente limpo');
        } else {
            keys.forEach(key => {
                this.cache.delete(key);
                console.log(`üóëÔ∏è Cache invalidado para: ${key}`);
            });
        }
    }

    /**
     * For√ßa refresh de dados espec√≠ficos
     */
    async forceRefreshData(dataType) {
        const cacheKeys = {
            'modelos': 'modelos_respostas',
            'feedbacks': 'feedbacks_respostas',
            'feedbacks_moderacoes': 'feedbacks_moderacoes',
            'moderacoes_coerentes': 'moderacoes_coerentes',
            'all': ['modelos_respostas', 'feedbacks_respostas', 'feedbacks_moderacoes', 'moderacoes_coerentes']
        };

        const keys = cacheKeys[dataType] || [dataType];
        this.invalidateCache(Array.isArray(keys) ? keys : [keys]);
        
        // Recarregar dados se necess√°rio
        if (dataType === 'modelos' || dataType === 'all') {
            return await this.obterModelosRespostas();
        }
        if (dataType === 'feedbacks' || dataType === 'all') {
            return await this.obterFeedbacksRespostas();
        }
        if (dataType === 'feedbacks_moderacoes' || dataType === 'all') {
            return await this.obterFeedbacksModeracoes();
        }
        if (dataType === 'moderacoes_coerentes' || dataType === 'all') {
            return await this.obterModeracoesCoerentes();
        }
    }

    /**
     * Trata erros de quota do Google Sheets
     */
    handleQuotaError(error) {
        if (error.message && (error.message.includes('quota') || error.message.includes('esgotado') || error.message.includes('exceeded'))) {
            console.log('‚ö†Ô∏è Quota do Google Sheets esgotada. Aumentando intervalo de rate limiting...');
            this.minRequestInterval = Math.min(this.minRequestInterval * 2, 10000); // M√°ximo 10 segundos
            return true;
        }
        
        // Verificar outros tipos de erro que podem indicar problemas de API
        if (error.message && (error.message.includes('403') || error.message.includes('429') || error.message.includes('rate limit'))) {
            console.log('‚ö†Ô∏è Rate limit ou erro de permiss√£o detectado. Aguardando antes de tentar novamente...');
            this.minRequestInterval = Math.min(this.minRequestInterval * 2, 15000); // M√°ximo 15 segundos
            return true;
        }
        
        return false;
    }

    /**
     * Inicializa limpeza peri√≥dica de cache
     */
    startCacheCleanup() {
        setInterval(() => {
            this.cleanExpiredCache();
        }, 60000); // Limpar a cada minuto
    }

    /**
     * Garante que as planilhas necess√°rias existam
     */
    async ensureSheetsExist() {
        if (!this.isActive()) return;

        try {
            // Verificar se as planilhas existem e criar cabe√ßalhos se necess√°rio
            await this.ensureSheetExists('Feedbacks', [
                'Data/Hora',
                'ID',
                'Tipo',
                'Texto Cliente',
                'Resposta Anterior',
                'Feedback',
                'Resposta Reformulada',
                'Tipo Solicita√ß√£o',
                'Motivo Solicita√ß√£o',
                'Solu√ß√£o Implementada',
                'Hist√≥rico Atendimento',
                'Observa√ß√µes Internas'
            ]);

            await this.ensureSheetExists('Respostas Coerentes', [
                'Data/Hora',
                'ID',
                'Tipo',
                'Texto Cliente',
                'Resposta Aprovada',
                'Tipo Solicita√ß√£o',
                'Motivo Solicita√ß√£o',
                'Solu√ß√£o Implementada',
                'Hist√≥rico Atendimento',
                'Observa√ß√µes Internas',
                'Status Aprova√ß√£o'
            ]);

            await this.ensureSheetExists('Acessos Interface', [
                'Data/Hora',
                'Usu√°rio',
                'A√ß√£o',
                'IP',
                'User Agent',
                'Dura√ß√£o Sess√£o (min)',
                'Status'
            ]);

            await this.ensureSheetExists('Modera√ß√µes', [
                'Data/Hora',
                'ID',
                'Tipo',
                'Solicita√ß√£o Cliente',
                'Resposta Empresa',
                'Considera√ß√£o Final',
                'Motivo Modera√ß√£o',
                'Texto Modera√ß√£o Anterior',
                'Feedback',
                'Texto Modera√ß√£o Reformulado',
                'Linha Racioc√≠nio',
                'Status Aprova√ß√£o',
                'Observa√ß√µes Internas'
            ]);

            console.log('‚úÖ Planilhas verificadas/criadas com sucesso');

        } catch (error) {
            console.error('‚ùå Erro ao verificar/criar planilhas:', error.message);
        }
    }

    /**
     * Garante que uma planilha espec√≠fica existe
     */
    async ensureSheetExists(sheetName, headers) {
        if (!this.isActive()) return;

        try {
            // Tentar ler a primeira linha para verificar se a planilha existe
            const range = `${sheetName}!A1:Z1`;
            const data = await googleSheetsConfig.readData(range);
            
            if (!data || data.length === 0) {
                // Planilha vazia, criar cabe√ßalhos
                await googleSheetsConfig.appendRow(range, headers);
                console.log(`‚úÖ Cabe√ßalhos criados na planilha: ${sheetName}`);
                
                // Aplicar formata√ß√£o b√°sica para corrigir problemas de visualiza√ß√£o
                try {
                    await googleSheetsConfig.aplicarFormatacaoBasica(sheetName);
                } catch (error) {
                    console.error(`‚ö†Ô∏è Erro ao aplicar formata√ß√£o na planilha ${sheetName}:`, error.message);
                }
            } else {
                console.log(`‚úÖ Planilha ${sheetName} j√° existe`);
            }

        } catch (error) {
            console.error(`‚ùå Erro ao verificar planilha ${sheetName}:`, error.message);
        }
    }

    /**
     * Registra um feedback no Google Sheets
     */
    async registrarFeedback(feedbackData) {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. Feedback n√£o registrado.');
            return false;
        }

        try {
            // Rate limiting para opera√ß√µes de escrita
            await this.waitForRateLimit();
            
            // Invalidar cache relacionado para for√ßar atualiza√ß√£o
            this.invalidateCache(['feedbacks_respostas']);
            // Criar perfil do usu√°rio para a coluna ID
            const userProfile = feedbackData.userProfile || 
                (feedbackData.userEmail ? `${feedbackData.userName || 'Usu√°rio'} (${feedbackData.userEmail})` : 'N/A');

            const row = [
                new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }), // Coluna A: Data/Hora
                feedbackData.id || '', // Coluna B: ID
                feedbackData.tipo || 'feedback', // Coluna C: Tipo
                feedbackData.textoCliente || feedbackData.dadosFormulario?.texto_cliente || '', // Coluna D: Texto Cliente
                feedbackData.respostaAnterior || '', // Coluna E: Resposta Anterior
                feedbackData.feedback || '', // Coluna F: Feedback
                feedbackData.respostaReformulada || '', // Coluna G: Resposta Reformulada
                feedbackData.dadosFormulario?.tipo_solicitacao || feedbackData.tipoSituacao || '', // Coluna H: Tipo Solicita√ß√£o
                feedbackData.dadosFormulario?.motivo_solicitacao || '', // Coluna I: Motivo Solicita√ß√£o
                feedbackData.dadosFormulario?.solucao_implementada || '', // Coluna J: Solu√ß√£o Implementada
                feedbackData.dadosFormulario?.historico_atendimento || '', // Coluna K: Hist√≥rico Atendimento
                feedbackData.dadosFormulario?.observacoes_internas || '' // Coluna L: Observa√ß√µes Internas
            ];

            await googleSheetsConfig.appendRow('Feedbacks!A:Z', row);
            console.log('‚úÖ Feedback registrado no Google Sheets com perfil do usu√°rio:', userProfile);
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao registrar feedback no Google Sheets:', error.message);
            this.handleQuotaError(error);
            return false;
        }
    }

    /**
     * Salva um modelo de resposta no Google Sheets (alias para registrarRespostaCoerente)
     */
    async salvarModeloResposta(modeloData) {
        console.log('üíæ Salvando modelo de resposta no Google Sheets...');
        return await this.registrarRespostaCoerente(modeloData);
    }

    /**
     * Registra uma resposta coerente no Google Sheets
     */
    async registrarRespostaCoerente(respostaData) {
        console.log('üîç [DEBUG] Iniciando registro de resposta coerente...');
        console.log('üîç [DEBUG] Google Sheets ativo?', this.isActive());
        console.log('üîç [DEBUG] Dados recebidos:', JSON.stringify(respostaData, null, 2));
        
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. Resposta n√£o registrada.');
            return false;
        }

        try {
            // Rate limiting para opera√ß√µes de escrita
            await this.waitForRateLimit();
            
            // Invalidar cache relacionado para for√ßar atualiza√ß√£o
            this.invalidateCache(['modelos_respostas']);
            // Criar perfil do usu√°rio para a coluna ID
            const userProfile = respostaData.userProfile || 
                (respostaData.userEmail ? `${respostaData.userName || 'Usu√°rio'} (${respostaData.userEmail})` : 'N/A');

            const row = [
                new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }), // Coluna A: Data/Hora
                respostaData.id || '', // Coluna B: ID
                respostaData.tipo || 'resposta', // Coluna C: Tipo
                respostaData.textoCliente || respostaData.dadosFormulario?.texto_cliente || '', // Coluna D: Texto Cliente
                respostaData.respostaAprovada || respostaData.respostaFinal || '', // Coluna E: Resposta Aprovada
                respostaData.dadosFormulario?.tipo_solicitacao || respostaData.tipoSituacao || '', // Coluna F: Tipo Solicita√ß√£o
                respostaData.dadosFormulario?.motivo_solicitacao || respostaData.motivoSolicitacao || '', // Coluna G: Motivo Solicita√ß√£o
                respostaData.dadosFormulario?.solucao_implementada || '', // Coluna H: Solu√ß√£o Implementada
                respostaData.dadosFormulario?.historico_atendimento || '', // Coluna I: Hist√≥rico Atendimento
                respostaData.dadosFormulario?.observacoes_internas || '', // Coluna J: Observa√ß√µes Internas
                'Aprovada' // Coluna K: Status Aprova√ß√£o
            ];

            await googleSheetsConfig.appendRow('Respostas Coerentes!A:Z', row);
            console.log('‚úÖ Resposta coerente registrada no Google Sheets com perfil do usu√°rio:', userProfile);
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao registrar resposta coerente no Google Sheets:', error.message);
            this.handleQuotaError(error);
            return false;
        }
    }

    /**
     * Registra um feedback de modera√ß√£o no Google Sheets
     */
    async registrarFeedbackModeracao(feedbackData) {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. Feedback de modera√ß√£o n√£o registrado.');
            return false;
        }

        try {
            // Verificar status da API antes de tentar registrar
            const apiStatus = await this.checkApiStatus();
            if (!apiStatus) {
                console.log('‚ö†Ô∏è API do Google Sheets n√£o est√° funcionando. Feedback n√£o registrado.');
                return false;
            }

            // Rate limiting para opera√ß√µes de escrita
            await this.waitForRateLimit();
            
            // Invalidar cache relacionado para for√ßar atualiza√ß√£o
            this.invalidateCache(['feedbacks_moderacoes']);
            
            // Criar perfil do usu√°rio para a coluna ID
            const userProfile = feedbackData.userProfile || 
                (feedbackData.userEmail ? `${feedbackData.userName || 'Usu√°rio'} (${feedbackData.userEmail})` : 'N/A');

            const row = [
                new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }), // Coluna A: Data/Hora
                feedbackData.id || '', // Coluna B: ID
                feedbackData.tipo || 'moderacao', // Coluna C: Tipo
                feedbackData.dadosModeracao?.solicitacaoCliente || '', // Coluna D: Solicita√ß√£o Cliente
                feedbackData.dadosModeracao?.respostaEmpresa || '', // Coluna E: Resposta Empresa
                feedbackData.dadosModeracao?.consideracaoFinal || '', // Coluna F: Considera√ß√£o Final
                feedbackData.dadosModeracao?.motivoModeracao || '', // Coluna G: Motivo Modera√ß√£o
                feedbackData.textoNegado || '', // Coluna H: Texto Modera√ß√£o Anterior
                feedbackData.motivoNegativa || '', // Coluna I: Feedback
                feedbackData.textoReformulado || '', // Coluna J: Texto Modera√ß√£o Reformulado
                feedbackData.linhaRaciocinio || '', // Coluna K: Linha Racioc√≠nio
                'Pendente', // Coluna L: Status Aprova√ß√£o
                feedbackData.observacoesInternas || '' // Coluna M: Observa√ß√µes Internas
            ];

            await googleSheetsConfig.appendRow('Modera√ß√µes!A:Z', row);
            console.log('‚úÖ Feedback de modera√ß√£o registrado no Google Sheets com perfil do usu√°rio:', userProfile);
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao registrar feedback de modera√ß√£o no Google Sheets:', error.message);
            
            // Se for erro de socket hang up, tentar novamente uma vez
            if (error.message.includes('socket hang up') || error.message.includes('timeout')) {
                console.log('üîÑ Tentando novamente ap√≥s erro de conectividade...');
                try {
                    await new Promise(resolve => setTimeout(resolve, 2000)); // Aguardar 2 segundos
                    await googleSheetsConfig.appendRow('Modera√ß√µes!A:Z', row);
                    console.log('‚úÖ Feedback de modera√ß√£o registrado no Google Sheets (retry bem-sucedido)');
                    return true;
                } catch (retryError) {
                    console.error('‚ùå Retry falhou:', retryError.message);
                }
            }
            
            this.handleQuotaError(error);
            return false;
        }
    }

    /**
     * Registra uma modera√ß√£o coerente no Google Sheets
     */
    async registrarModeracaoCoerente(moderacaoData) {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. Modera√ß√£o coerente n√£o registrada.');
            return false;
        }

        try {
            // Verificar status da API antes de tentar registrar
            const apiStatus = await this.checkApiStatus();
            if (!apiStatus) {
                console.log('‚ö†Ô∏è API do Google Sheets n√£o est√° funcionando. Modera√ß√£o n√£o registrada.');
                return false;
            }

            // Rate limiting para opera√ß√µes de escrita
            await this.waitForRateLimit();
            
            // Invalidar cache relacionado para for√ßar atualiza√ß√£o
            this.invalidateCache(['moderacoes_coerentes']);
            
            // Criar perfil do usu√°rio para a coluna ID
            const userProfile = moderacaoData.userProfile || 
                (moderacaoData.userEmail ? `${moderacaoData.userName || 'Usu√°rio'} (${moderacaoData.userEmail})` : 'N/A');

            const row = [
                new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }), // Coluna A: Data/Hora
                moderacaoData.id || '', // Coluna B: ID
                moderacaoData.tipo || 'moderacao', // Coluna C: Tipo
                moderacaoData.dadosModeracao?.solicitacaoCliente || '', // Coluna D: Solicita√ß√£o Cliente
                moderacaoData.dadosModeracao?.respostaEmpresa || '', // Coluna E: Resposta Empresa
                moderacaoData.dadosModeracao?.consideracaoFinal || '', // Coluna F: Considera√ß√£o Final
                moderacaoData.dadosModeracao?.motivoModeracao || '', // Coluna G: Motivo Modera√ß√£o
                '', // Coluna H: Texto Modera√ß√£o Anterior (vazio para modera√ß√µes aprovadas)
                '', // Coluna I: Feedback (vazio para modera√ß√µes aprovadas)
                moderacaoData.textoModeracao || moderacaoData.textoFinal || '', // Coluna J: Texto Modera√ß√£o Reformulado
                moderacaoData.linhaRaciocinio || '', // Coluna K: Linha Racioc√≠nio
                'Aprovada', // Coluna L: Status Aprova√ß√£o
                moderacaoData.observacoesInternas || '' // Coluna M: Observa√ß√µes Internas
            ];

            await googleSheetsConfig.appendRow('Modera√ß√µes!A:Z', row);
            console.log('‚úÖ Modera√ß√£o coerente registrada no Google Sheets com perfil do usu√°rio:', userProfile);
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao registrar modera√ß√£o coerente no Google Sheets:', error.message);
            this.handleQuotaError(error);
            return false;
        }
    }

    /**
     * Registra um acesso √† interface no Google Sheets
     */
    async registrarAcessoInterface(acessoData) {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. Acesso n√£o registrado.');
            return false;
        }

        try {
            // Criar perfil do usu√°rio para a coluna ID
            const userProfile = acessoData.userProfile || 
                (acessoData.userEmail ? `${acessoData.userName || 'Usu√°rio'} (${acessoData.userEmail})` : 
                (acessoData.usuario || 'An√¥nimo'));

            const row = [
                userProfile, // Perfil do usu√°rio na coluna ID
                new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
                acessoData.usuario || 'An√¥nimo',
                acessoData.acao || 'Acesso',
                acessoData.ip || '',
                acessoData.userAgent || '',
                acessoData.duracaoSessao || 0,
                acessoData.status || 'Sucesso'
            ];

            await googleSheetsConfig.appendRow('Acessos Interface!A:Z', row);
            console.log('‚úÖ Acesso √† interface registrado no Google Sheets com perfil do usu√°rio:', userProfile);
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao registrar acesso no Google Sheets:', error.message);
            return false;
        }
    }

    /**
     * Registra estat√≠sticas globais no Google Sheets
     */
    async registrarEstatisticas(estatisticas) {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. Estat√≠sticas n√£o registradas.');
            return false;
        }

        try {
            // Criar planilha de estat√≠sticas se n√£o existir
            await this.ensureSheetExists('Estat√≠sticas', [
                'Data',
                'Respostas Geradas',
                'Respostas Coerentes',
                'Modera√ß√µes Geradas',
                'Modera√ß√µes Coerentes',
                'Revis√µes Texto',
                'Explica√ß√µes Geradas'
            ]);

            const row = [
                new Date().toLocaleDateString('pt-BR'),
                estatisticas.respostas_geradas || 0,
                estatisticas.respostas_coerentes || 0,
                estatisticas.moderacoes_geradas || 0,
                estatisticas.moderacoes_coerentes || 0,
                estatisticas.revisoes_texto || 0,
                estatisticas.explicacoes_geradas || 0
            ];

            await googleSheetsConfig.appendRow('Estat√≠sticas!A:Z', row);
            console.log('‚úÖ Estat√≠sticas registradas no Google Sheets');
            return true;

        } catch (error) {
            console.error('‚ùå Erro ao registrar estat√≠sticas no Google Sheets:', error.message);
            return false;
        }
    }

    /**
     * Carrega aprendizado do Google Sheets
     */
    async carregarAprendizado() {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. N√£o √© poss√≠vel carregar aprendizado.');
            return null;
        }

        try {
            console.log('üìö Carregando aprendizado do Google Sheets...');
            
            // Ler dados da planilha de aprendizado
            const range = 'Aprendizado!A1:Z1000';
            const data = await googleSheetsConfig.readData(range);
            
            if (!data || data.length === 0) {
                console.log('üìö Nenhum aprendizado encontrado no Google Sheets');
                return null;
            }
            
            // Converter dados da planilha para formato JSON
            const aprendizado = {
                tiposSituacao: {},
                lastUpdated: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })
            };
            
            // Processar dados (implementar l√≥gica de convers√£o)
            // Por enquanto, retornar estrutura b√°sica
            console.log('‚úÖ Aprendizado carregado do Google Sheets');
            return aprendizado;
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar aprendizado do Google Sheets:', error.message);
            return null;
        }
    }

    /**
     * Obt√©m todos os modelos de respostas da planilha
     */
    async obterModelosRespostas() {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. N√£o √© poss√≠vel obter modelos.');
            return [];
        }

        try {
            console.log('üìö Obtendo modelos de respostas do Google Sheets...');
            
            // Verificar cache primeiro
            const cacheKey = 'modelos_respostas';
            const cachedData = this.getFromCache(cacheKey);
            if (cachedData) {
                return cachedData;
            }
            
            // Verificar se googleSheetsConfig est√° inicializado
            console.log('üîç DEBUG - Verificando googleSheetsConfig:', {
                existe: !!googleSheetsConfig,
                isInitialized: googleSheetsConfig ? googleSheetsConfig.isInitialized() : false
            });
            
            if (!googleSheetsConfig || !googleSheetsConfig.isInitialized()) {
                console.log('‚ö†Ô∏è googleSheetsConfig n√£o est√° inicializado');
                return [];
            }
            
            // Rate limiting
            await this.waitForRateLimit();
            
            // Ler dados da planilha de modelos
            const range = 'Respostas Coerentes!A1:Z1000';
            const data = await googleSheetsConfig.readData(range);
            
            if (!data || data.length <= 1) {
                console.log('üìö Nenhum modelo encontrado no Google Sheets');
                return [];
            }
            
            // Converter dados da planilha para array de objetos
            const headers = data[0];
            const modelos = [];
            
            for (let i = 1; i < data.length; i++) {
                const row = data[i];
                if (row[0]) { // Se tem ID
                    const modelo = {};
                    headers.forEach((header, index) => {
                        if (row[index] !== undefined) {
                            modelo[header] = row[index];
                        }
                    });
                    modelos.push(modelo);
                }
            }
            
            console.log(`‚úÖ ${modelos.length} modelos obtidos do Google Sheets`);
            
            // Salvar no cache
            this.setCache(cacheKey, modelos);
            
            return modelos;
            
        } catch (error) {
            console.error('‚ùå Erro ao obter modelos do Google Sheets:', error.message);
            this.handleQuotaError(error);
            return [];
        }
    }

    /**
     * Obt√©m todos os feedbacks de modera√ß√µes da planilha
     */
    async obterFeedbacksModeracoes() {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. N√£o √© poss√≠vel obter feedbacks de modera√ß√µes.');
            return [];
        }

        try {
            console.log('üìö Obtendo feedbacks de modera√ß√µes do Google Sheets...');
            
            // Verificar cache primeiro
            const cacheKey = 'feedbacks_moderacoes';
            const cachedData = this.getFromCache(cacheKey);
            if (cachedData) {
                return cachedData;
            }
            
            // Verificar se googleSheetsConfig est√° inicializado
            console.log('üîç DEBUG - Verificando googleSheetsConfig:', {
                existe: !!googleSheetsConfig,
                isInitialized: googleSheetsConfig ? googleSheetsConfig.isInitialized() : false
            });
            
            if (!googleSheetsConfig || !googleSheetsConfig.isInitialized()) {
                console.log('‚ö†Ô∏è googleSheetsConfig n√£o est√° inicializado');
                return [];
            }
            
            // Rate limiting
            await this.waitForRateLimit();
            
            // Ler dados da planilha de modera√ß√µes
            const range = 'Modera√ß√µes!A1:Z1000';
            const data = await googleSheetsConfig.readData(range);
            
            if (!data || data.length <= 1) {
                console.log('üìö Nenhum feedback de modera√ß√£o encontrado no Google Sheets');
                return [];
            }
            
            // Converter dados da planilha para array de objetos
            const headers = data[0];
            const feedbacks = [];
            
            for (let i = 1; i < data.length; i++) {
                const row = data[i];
                if (row[0]) { // Se tem ID
                    const feedback = {};
                    headers.forEach((header, index) => {
                        if (row[index] !== undefined) {
                            feedback[header] = row[index];
                        }
                    });
                    // Filtrar apenas feedbacks (com texto de modera√ß√£o anterior e feedback)
                    if (feedback['Texto Modera√ß√£o Anterior'] && feedback['Feedback']) {
                        feedbacks.push(feedback);
                    }
                }
            }
            
            console.log(`‚úÖ ${feedbacks.length} feedbacks de modera√ß√£o obtidos do Google Sheets`);
            
            // Salvar no cache
            this.setCache(cacheKey, feedbacks);
            
            return feedbacks;
            
        } catch (error) {
            console.error('‚ùå Erro ao obter feedbacks de modera√ß√£o do Google Sheets:', error.message);
            this.handleQuotaError(error);
            return [];
        }
    }

    /**
     * Obt√©m todas as modera√ß√µes coerentes da planilha
     */
    async obterModeracoesCoerentes() {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. N√£o √© poss√≠vel obter modera√ß√µes coerentes.');
            return [];
        }

        try {
            console.log('üìö Obtendo modera√ß√µes coerentes do Google Sheets...');
            
            // Verificar cache primeiro
            const cacheKey = 'moderacoes_coerentes';
            const cachedData = this.getFromCache(cacheKey);
            if (cachedData) {
                return cachedData;
            }
            
            // Verificar se googleSheetsConfig est√° inicializado
            console.log('üîç DEBUG - Verificando googleSheetsConfig:', {
                existe: !!googleSheetsConfig,
                isInitialized: googleSheetsConfig ? googleSheetsConfig.isInitialized() : false
            });
            
            if (!googleSheetsConfig || !googleSheetsConfig.isInitialized()) {
                console.log('‚ö†Ô∏è googleSheetsConfig n√£o est√° inicializado');
                return [];
            }
            
            // Rate limiting
            await this.waitForRateLimit();
            
            // Ler dados da planilha de modera√ß√µes
            const range = 'Modera√ß√µes!A1:Z1000';
            const data = await googleSheetsConfig.readData(range);
            
            if (!data || data.length <= 1) {
                console.log('üìö Nenhuma modera√ß√£o coerente encontrada no Google Sheets');
                return [];
            }
            
            // Converter dados da planilha para array de objetos
            const headers = data[0];
            const moderacoes = [];
            
            for (let i = 1; i < data.length; i++) {
                const row = data[i];
                if (row[0]) { // Se tem ID
                    const moderacao = {};
                    headers.forEach((header, index) => {
                        if (row[index] !== undefined) {
                            moderacao[header] = row[index];
                        }
                    });
                    // Filtrar apenas modera√ß√µes aprovadas (sem feedback)
                    if (moderacao['Status Aprova√ß√£o'] === 'Aprovada' && !moderacao['Feedback']) {
                        moderacoes.push(moderacao);
                    }
                }
            }
            
            console.log(`‚úÖ ${moderacoes.length} modera√ß√µes coerentes obtidas do Google Sheets`);
            
            // Salvar no cache
            this.setCache(cacheKey, moderacoes);
            
            return moderacoes;
            
        } catch (error) {
            console.error('‚ùå Erro ao obter modera√ß√µes coerentes do Google Sheets:', error.message);
            this.handleQuotaError(error);
            return [];
        }
    }

    /**
     * Obt√©m todos os feedbacks de respostas da planilha
     */
    async obterFeedbacksRespostas() {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. N√£o √© poss√≠vel obter feedbacks.');
            return [];
        }

        try {
            console.log('üìö Obtendo feedbacks de respostas do Google Sheets...');
            
            // Verificar cache primeiro
            const cacheKey = 'feedbacks_respostas';
            const cachedData = this.getFromCache(cacheKey);
            if (cachedData) {
                return cachedData;
            }
            
            // Verificar se googleSheetsConfig est√° inicializado
            console.log('üîç DEBUG - Verificando googleSheetsConfig:', {
                existe: !!googleSheetsConfig,
                isInitialized: googleSheetsConfig ? googleSheetsConfig.isInitialized() : false
            });
            
            if (!googleSheetsConfig || !googleSheetsConfig.isInitialized()) {
                console.log('‚ö†Ô∏è googleSheetsConfig n√£o est√° inicializado');
                return [];
            }
            
            // Rate limiting
            await this.waitForRateLimit();
            
            // Ler dados da planilha de feedbacks
            const range = 'Feedbacks!A1:Z1000';
            const data = await googleSheetsConfig.readData(range);
            
            if (!data || data.length <= 1) {
                console.log('üìö Nenhum feedback encontrado no Google Sheets');
                return [];
            }
            
            // Converter dados da planilha para array de objetos
            const headers = data[0];
            const feedbacks = [];
            
            for (let i = 1; i < data.length; i++) {
                const row = data[i];
                if (row[0]) { // Se tem ID
                    const feedback = {};
                    headers.forEach((header, index) => {
                        if (row[index] !== undefined) {
                            feedback[header] = row[index];
                        }
                    });
                    feedbacks.push(feedback);
                }
            }
            
            console.log(`‚úÖ ${feedbacks.length} feedbacks obtidos do Google Sheets`);
            
            // Salvar no cache
            this.setCache(cacheKey, feedbacks);
            
            return feedbacks;
            
        } catch (error) {
            console.error('‚ùå Erro ao obter feedbacks do Google Sheets:', error.message);
            this.handleQuotaError(error);
            return [];
        }
    }

    /**
     * Salva aprendizado no Google Sheets
     */
    async salvarAprendizado(aprendizado) {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. N√£o √© poss√≠vel salvar aprendizado.');
            return false;
        }

        try {
            console.log('üíæ Salvando aprendizado no Google Sheets...');
            
            // Garantir que a planilha de aprendizado existe
            await this.ensureSheetExists('Aprendizado', [
                'Tipo Situa√ß√£o',
                'Tipo Dados',
                'ID',
                'Timestamp',
                'Conte√∫do JSON'
            ]);
            
            // Converter aprendizado para formato de planilha
            const rows = [];
            for (const [tipoSituacao, dados] of Object.entries(aprendizado.tiposSituacao)) {
                // Salvar feedbacks
                for (const feedback of dados.feedbacks || []) {
                    rows.push([
                        tipoSituacao,
                        'feedback',
                        feedback.id || Date.now(),
                        feedback.timestamp || new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
                        JSON.stringify(feedback)
                    ]);
                }
                
                // Salvar respostas coerentes
                for (const resposta of dados.respostasCoerentes || []) {
                    rows.push([
                        tipoSituacao,
                        'resposta_coerente',
                        resposta.id || Date.now(),
                        resposta.timestamp || new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
                        JSON.stringify(resposta)
                    ]);
                }
                
                // Salvar padr√µes identificados
                for (const padrao of dados.padroesIdentificados || []) {
                    rows.push([
                        tipoSituacao,
                        'padrao',
                        Date.now(),
                        new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }),
                        padrao
                    ]);
                }
            }
            
            if (rows.length > 0) {
                // Limpar planilha existente
                await googleSheetsConfig.clearSheet('Aprendizado');
                
                // Adicionar cabe√ßalhos
                await googleSheetsConfig.appendRow('Aprendizado!A1:E1', [
                    'Tipo Situa√ß√£o',
                    'Tipo Dados',
                    'ID',
                    'Timestamp',
                    'Conte√∫do JSON'
                ]);
                
                // Adicionar dados
                for (const row of rows) {
                    await googleSheetsConfig.appendRow('Aprendizado!A:E', row);
                }
                
                console.log(`‚úÖ Aprendizado salvo no Google Sheets: ${rows.length} registros`);
            }
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Erro ao salvar aprendizado no Google Sheets:', error.message);
            return false;
        }
    }

    /**
     * Sincroniza dados existentes com o Google Sheets
     */
    async sincronizarDadosExistentes() {
        if (!this.isActive()) {
            console.log('‚ö†Ô∏è Google Sheets n√£o est√° ativo. Sincroniza√ß√£o n√£o realizada.');
            return false;
        }

        try {
            console.log('üîÑ Iniciando sincroniza√ß√£o de dados existentes...');
            
            // Verificar se estamos na Vercel (sem sistema de arquivos)
            if (process.env.VERCEL || process.env.NODE_ENV === 'production') {
                console.log('‚ö†Ô∏è Sincroniza√ß√£o desabilitada na Vercel (sem sistema de arquivos)');
                return false;
            }

            // Sincronizar feedbacks
            const feedbacksPath = './data/feedbacks.json';
            if (fs.existsSync(feedbacksPath)) {
                const feedbacks = JSON.parse(fs.readFileSync(feedbacksPath, 'utf8'));
                for (const feedback of feedbacks.respostas || []) {
                    await this.registrarFeedback(feedback);
                }
                for (const moderacao of feedbacks.moderacoes || []) {
                    await this.registrarFeedback(moderacao);
                }
            }

            // Sincronizar respostas coerentes
            const respostasPath = './data/feedbacks_respostas.json';
            if (fs.existsSync(respostasPath)) {
                const respostas = JSON.parse(fs.readFileSync(respostasPath, 'utf8'));
                for (const resposta of respostas.respostas || []) {
                    await this.registrarRespostaCoerente(resposta);
                }
            }

            // Sincronizar estat√≠sticas
            const estatisticasPath = './data/estatisticas_globais.json';
            if (fs.existsSync(estatisticasPath)) {
                const estatisticas = JSON.parse(fs.readFileSync(estatisticasPath, 'utf8'));
                await this.registrarEstatisticas(estatisticas.estatisticas);
            }

            console.log('‚úÖ Sincroniza√ß√£o de dados existentes conclu√≠da');
            return true;

        } catch (error) {
            console.error('‚ùå Erro na sincroniza√ß√£o de dados:', error.message);
            return false;
        }
    }
}

// Inst√¢ncia singleton
const googleSheetsIntegration = new GoogleSheetsIntegration();

module.exports = googleSheetsIntegration;
