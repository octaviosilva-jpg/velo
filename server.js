// ===== SERVIDOR BACKEND SEGURO - VELOTAX BOT =====

const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const crypto = require('crypto');

const app = express();
const PORT = process.env.PORT || 3001;

// ===== SISTEMA DE APRENDIZADO BASEADO EM FEEDBACK SEPARADO POR ABA =====

// Arquivos separados para cada tipo de feedback
const FEEDBACKS_RESPOSTAS_FILE = path.join(__dirname, 'data', 'feedbacks_respostas.json');
const FEEDBACKS_MODERACOES_FILE = path.join(__dirname, 'data', 'feedbacks_moderacoes.json');
const FEEDBACKS_EXPLICACOES_FILE = path.join(__dirname, 'data', 'feedbacks_explicacoes.json');

// Arquivo para modelos de respostas aprovadas
const MODELOS_RESPOSTAS_FILE = path.join(__dirname, 'data', 'modelos_respostas.json');

// Arquivo para aprendizado direto no script de formula√ß√£o
const APRENDIZADO_SCRIPT_FILE = path.join(__dirname, 'data', 'aprendizado_script.json');

// Garantir que o diret√≥rio data existe
const dataDir = path.join(__dirname, 'data');
if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
}

// ===== FUN√á√ïES PARA FEEDBACKS DE RESPOSTAS RA =====

// Carregar feedbacks de respostas
function loadFeedbacksRespostas() {
    try {
        if (fs.existsSync(FEEDBACKS_RESPOSTAS_FILE)) {
            const data = fs.readFileSync(FEEDBACKS_RESPOSTAS_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar feedbacks de respostas:', error);
    }
    return {
        respostas: [],
        lastUpdated: new Date().toISOString()
    };
}

// Salvar feedbacks de respostas
function saveFeedbacksRespostas(feedbacks) {
    try {
        feedbacks.lastUpdated = new Date().toISOString();
        fs.writeFileSync(FEEDBACKS_RESPOSTAS_FILE, JSON.stringify(feedbacks, null, 2));
        console.log('‚úÖ Feedbacks de respostas salvos com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao salvar feedbacks de respostas:', error);
    }
}

// ===== FUN√á√ïES PARA FEEDBACKS DE MODERA√á√ïES RA =====

// Carregar feedbacks de modera√ß√µes
function loadFeedbacksModeracoes() {
    try {
        if (fs.existsSync(FEEDBACKS_MODERACOES_FILE)) {
            const data = fs.readFileSync(FEEDBACKS_MODERACOES_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar feedbacks de modera√ß√µes:', error);
    }
    return {
        moderacoes: [],
        lastUpdated: new Date().toISOString()
    };
}

// Salvar feedbacks de modera√ß√µes
function saveFeedbacksModeracoes(feedbacks) {
    try {
        feedbacks.lastUpdated = new Date().toISOString();
        fs.writeFileSync(FEEDBACKS_MODERACOES_FILE, JSON.stringify(feedbacks, null, 2));
        console.log('‚úÖ Feedbacks de modera√ß√µes salvos com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao salvar feedbacks de modera√ß√µes:', error);
    }
}

// ===== FUN√á√ïES PARA FEEDBACKS DE EXPLICA√á√ïES =====

// Carregar feedbacks de explica√ß√µes
function loadFeedbacksExplicacoes() {
    try {
        if (fs.existsSync(FEEDBACKS_EXPLICACOES_FILE)) {
            const data = fs.readFileSync(FEEDBACKS_EXPLICACOES_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar feedbacks de explica√ß√µes:', error);
    }
    return {
        explicacoes: [],
        lastUpdated: new Date().toISOString()
    };
}

// Salvar feedbacks de explica√ß√µes
function saveFeedbacksExplicacoes(feedbacks) {
    try {
        feedbacks.lastUpdated = new Date().toISOString();
        fs.writeFileSync(FEEDBACKS_EXPLICACOES_FILE, JSON.stringify(feedbacks, null, 2));
        console.log('‚úÖ Feedbacks de explica√ß√µes salvos com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao salvar feedbacks de explica√ß√µes:', error);
    }
}

// ===== FUN√á√ïES PARA MODELOS DE RESPOSTAS APROVADAS =====

// Carregar modelos de respostas
function loadModelosRespostas() {
    try {
        if (fs.existsSync(MODELOS_RESPOSTAS_FILE)) {
            const data = fs.readFileSync(MODELOS_RESPOSTAS_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar modelos de respostas:', error);
    }
    return {
        modelos: [],
        lastUpdated: new Date().toISOString()
    };
}

// Salvar modelos de respostas
function saveModelosRespostas(modelos) {
    try {
        modelos.lastUpdated = new Date().toISOString();
        fs.writeFileSync(MODELOS_RESPOSTAS_FILE, JSON.stringify(modelos, null, 2));
        console.log('‚úÖ Modelos de respostas salvos com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao salvar modelos de respostas:', error);
    }
}

// Adicionar modelo de resposta aprovada
function addModeloResposta(dadosFormulario, respostaAprovada) {
    const modelos = loadModelosRespostas();
    
    const novoModelo = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        tipo_situacao: dadosFormulario.tipo_solicitacao,
        motivo_solicitacao: dadosFormulario.motivo_solicitacao,
        dadosFormulario: dadosFormulario,
        respostaAprovada: respostaAprovada,
        contexto: {
            tipoSituacao: dadosFormulario.tipo_solicitacao,
            motivoSolicitacao: dadosFormulario.motivo_solicitacao
        }
    };
    
    modelos.modelos.push(novoModelo);
    saveModelosRespostas(modelos);
    
    // Tamb√©m adicionar ao aprendizado direto do script
    addRespostaCoerenteAprendizado(dadosFormulario.tipo_solicitacao, dadosFormulario.motivo_solicitacao, respostaAprovada, dadosFormulario);
    
    console.log('üìù Modelo de resposta aprovada adicionado:', novoModelo.id);
    return novoModelo;
}

// Obter modelos relevantes para um tipo de situa√ß√£o
function getModelosRelevantes(tipoSituacao, motivoSolicitacao) {
    const modelos = loadModelosRespostas();
    const relevantes = [];
    
    modelos.modelos.forEach(modelo => {
        let isRelevante = false;
        
        // Verificar correspond√™ncia exata de tipo de situa√ß√£o
        if (modelo.tipo_situacao && modelo.tipo_situacao.toLowerCase() === tipoSituacao.toLowerCase()) {
            isRelevante = true;
        }
        
        // Verificar correspond√™ncia de motivo da solicita√ß√£o
        if (modelo.motivo_solicitacao && motivoSolicitacao) {
            if (modelo.motivo_solicitacao.toLowerCase().includes(motivoSolicitacao.toLowerCase()) ||
                motivoSolicitacao.toLowerCase().includes(modelo.motivo_solicitacao.toLowerCase())) {
                isRelevante = true;
            }
        }
        
        if (isRelevante) {
            relevantes.push(modelo);
        }
    });
    
    // Ordenar por timestamp mais recente e retornar os √∫ltimos 3
    return relevantes
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, 3);
}

// ===== FUN√á√ïES PARA APRENDIZADO DIRETO NO SCRIPT DE FORMULA√á√ÉO =====

// Carregar aprendizado do script
function loadAprendizadoScript() {
    try {
        if (fs.existsSync(APRENDIZADO_SCRIPT_FILE)) {
            const data = fs.readFileSync(APRENDIZADO_SCRIPT_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar aprendizado do script:', error);
    }
    return {
        tiposSituacao: {},
        lastUpdated: new Date().toISOString()
    };
}

// Salvar aprendizado do script
function saveAprendizadoScript(aprendizado) {
    try {
        aprendizado.lastUpdated = new Date().toISOString();
        fs.writeFileSync(APRENDIZADO_SCRIPT_FILE, JSON.stringify(aprendizado, null, 2));
        console.log('‚úÖ Aprendizado do script salvo com sucesso');
    } catch (error) {
        console.error('‚ùå Erro ao salvar aprendizado do script:', error);
    }
}

// Adicionar feedback ao aprendizado do script
function addFeedbackAprendizado(tipoSituacao, feedback, respostaReformulada) {
    const aprendizado = loadAprendizadoScript();
    
    if (!aprendizado.tiposSituacao[tipoSituacao]) {
        aprendizado.tiposSituacao[tipoSituacao] = {
            feedbacks: [],
            respostasCoerentes: [],
            padroesIdentificados: [],
            clausulasUsadas: []
        };
    }
    
    const novoFeedback = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        feedback: feedback,
        respostaReformulada: respostaReformulada
    };
    
    aprendizado.tiposSituacao[tipoSituacao].feedbacks.push(novoFeedback);
    
    // Manter apenas os √∫ltimos 10 feedbacks por tipo
    if (aprendizado.tiposSituacao[tipoSituacao].feedbacks.length > 10) {
        aprendizado.tiposSituacao[tipoSituacao].feedbacks = 
            aprendizado.tiposSituacao[tipoSituacao].feedbacks.slice(-10);
    }
    
    // Identificar padr√µes automaticamente baseado no feedback
    console.log('üîç Identificando padr√µes para:', tipoSituacao);
    identificarPadroesAprendizado(tipoSituacao, '', respostaReformulada);
    
    saveAprendizadoScript(aprendizado);
    console.log('üìù Feedback adicionado ao aprendizado do script:', tipoSituacao);
}

// Adicionar resposta coerente ao aprendizado do script
function addRespostaCoerenteAprendizado(tipoSituacao, motivoSolicitacao, respostaAprovada, dadosFormulario) {
    const aprendizado = loadAprendizadoScript();
    
    if (!aprendizado.tiposSituacao[tipoSituacao]) {
        aprendizado.tiposSituacao[tipoSituacao] = {
            feedbacks: [],
            respostasCoerentes: [],
            padroesIdentificados: [],
            clausulasUsadas: []
        };
    }
    
    const novaResposta = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        motivoSolicitacao: motivoSolicitacao,
        respostaAprovada: respostaAprovada,
        dadosFormulario: dadosFormulario
    };
    
    aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes.push(novaResposta);
    
    // Manter apenas as √∫ltimas 5 respostas coerentes por tipo
    if (aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes.length > 5) {
        aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes = 
            aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes.slice(-5);
    }
    
    // Identificar padr√µes automaticamente
    identificarPadroesAprendizado(tipoSituacao, motivoSolicitacao, respostaAprovada);
    
    saveAprendizadoScript(aprendizado);
    console.log('üìù Resposta coerente adicionada ao aprendizado do script:', tipoSituacao);
}

// Identificar padr√µes automaticamente
function identificarPadroesAprendizado(tipoSituacao, motivoSolicitacao, respostaAprovada) {
    console.log('üîç Identificando padr√µes para:', tipoSituacao);
    const aprendizado = loadAprendizadoScript();
    
    if (!aprendizado.tiposSituacao[tipoSituacao]) {
        console.log('‚ùå Tipo de situa√ß√£o n√£o encontrado:', tipoSituacao);
        return;
    }
    
    console.log('üìä Feedbacks dispon√≠veis:', aprendizado.tiposSituacao[tipoSituacao].feedbacks.length);
    
    // Identificar cl√°usula CCB baseada no tipo de situa√ß√£o
    let clausulaIdentificada = '';
    if (tipoSituacao.toLowerCase().includes('pix') || tipoSituacao.toLowerCase().includes('portabilidade')) {
        clausulaIdentificada = 'Cl√°usula 7 - V√≠nculo da Chave Pix e Quita√ß√£o Autom√°tica';
    } else if (tipoSituacao.toLowerCase().includes('quita√ß√£o') || tipoSituacao.toLowerCase().includes('liquida√ß√£o')) {
        clausulaIdentificada = 'Cl√°usula 8 - Liquida√ß√£o Antecipada';
    } else if (tipoSituacao.toLowerCase().includes('inadimpl√™ncia') || tipoSituacao.toLowerCase().includes('vencimento')) {
        clausulaIdentificada = 'Cl√°usula 10 - Inadimpl√™ncia e Vencimento Antecipado';
    } else if (tipoSituacao.toLowerCase().includes('exclus√£o') || tipoSituacao.toLowerCase().includes('dados')) {
        clausulaIdentificada = 'Cl√°usula 14 - Prote√ß√£o de Dados (LGPD)';
    }
    
    if (clausulaIdentificada && !aprendizado.tiposSituacao[tipoSituacao].clausulasUsadas.includes(clausulaIdentificada)) {
        aprendizado.tiposSituacao[tipoSituacao].clausulasUsadas.push(clausulaIdentificada);
    }
    
    // Identificar padr√µes na resposta e nos feedbacks
    const padroes = [];
    
    // Padr√µes da resposta aprovada
    if (respostaAprovada.toLowerCase().includes('conforme solicitado')) {
        padroes.push('Confirma√ß√£o de atendimento √† solicita√ß√£o');
    }
    if (respostaAprovada.toLowerCase().includes('conforme estabelecido')) {
        padroes.push('Refer√™ncia a cl√°usulas contratuais');
    }
    if (respostaAprovada.toLowerCase().includes('lgpd') || respostaAprovada.toLowerCase().includes('lei geral')) {
        padroes.push('Fundamenta√ß√£o legal (LGPD)');
    }
    if (respostaAprovada.toLowerCase().includes('processo foi conclu√≠do')) {
        padroes.push('Confirma√ß√£o de conclus√£o do processo');
    }
    
    // Padr√µes dos feedbacks (CR√çTICO - EVITAR ESTES ERROS)
    const feedbacks = aprendizado.tiposSituacao[tipoSituacao].feedbacks;
    feedbacks.forEach(fb => {
        const feedback = fb.feedback.toLowerCase();
        
        if (feedback.includes('n√£o pe√ßa desculpas') || feedback.includes('jamais pe√ßa desculpas')) {
            padroes.push('NUNCA pedir desculpas em nome da empresa');
        }
        if (feedback.includes('n√£o estipular prazos') || feedback.includes('sem estar presente')) {
            padroes.push('NUNCA estipular prazos que n√£o est√£o na solu√ß√£o implementada');
        }
        if (feedback.includes('n√£o condiz') || feedback.includes('nao-condiz-solucao')) {
            padroes.push('SEMPRE usar EXATAMENTE a solu√ß√£o implementada como base');
        }
        if (feedback.includes('informa√ß√µes incorretas') || feedback.includes('informacoes-incorretas')) {
            padroes.push('NUNCA inventar informa√ß√µes que n√£o est√£o nos dados fornecidos');
        }
        if (feedback.includes('falta clareza') || feedback.includes('falta-clareza')) {
            padroes.push('SEMPRE ser espec√≠fico e conclusivo sobre o que foi feito');
        }
        if (feedback.includes('exclus√£o de cadastro')) {
            padroes.push('Para exclus√£o: confirmar que dados foram removidos e n√£o receber√° mais comunica√ß√µes');
        }
        if (feedback.includes('portabilidade') || feedback.includes('chave pix')) {
            padroes.push('Para portabilidade: confirmar que processo foi conclu√≠do e chave liberada');
        }
    });
    
    console.log('üìã Padr√µes identificados:', padroes);
    padroes.forEach(padrao => {
        if (!aprendizado.tiposSituacao[tipoSituacao].padroesIdentificados.includes(padrao)) {
            aprendizado.tiposSituacao[tipoSituacao].padroesIdentificados.push(padrao);
            console.log('‚úÖ Novo padr√£o adicionado:', padrao);
        }
    });
}

// Processar padr√µes existentes baseado nos feedbacks salvos
function processarPadroesExistentes(tipoSituacao) {
    console.log('üîÑ Processando padr√µes existentes para:', tipoSituacao);
    const aprendizado = loadAprendizadoScript();
    
    if (!aprendizado.tiposSituacao[tipoSituacao]) {
        return;
    }
    
    const padroes = [];
    const clausulas = [];
    
    // Identificar cl√°usula CCB baseada no tipo de situa√ß√£o
    if (tipoSituacao.toLowerCase().includes('pix') || tipoSituacao.toLowerCase().includes('portabilidade')) {
        clausulas.push('Cl√°usula 7 - V√≠nculo da Chave Pix e Quita√ß√£o Autom√°tica');
    } else if (tipoSituacao.toLowerCase().includes('quita√ß√£o') || tipoSituacao.toLowerCase().includes('liquida√ß√£o')) {
        clausulas.push('Cl√°usula 8 - Liquida√ß√£o Antecipada');
    } else if (tipoSituacao.toLowerCase().includes('inadimpl√™ncia') || tipoSituacao.toLowerCase().includes('vencimento')) {
        clausulas.push('Cl√°usula 10 - Inadimpl√™ncia e Vencimento Antecipado');
    } else if (tipoSituacao.toLowerCase().includes('exclus√£o') || tipoSituacao.toLowerCase().includes('dados')) {
        clausulas.push('Cl√°usula 14 - Prote√ß√£o de Dados (LGPD)');
    }
    
    // Analisar todos os feedbacks para extrair padr√µes
    aprendizado.tiposSituacao[tipoSituacao].feedbacks.forEach(fb => {
        const feedback = fb.feedback.toLowerCase();
        
        if (feedback.includes('n√£o pe√ßa desculpas') || feedback.includes('jamais pe√ßa desculpas')) {
            padroes.push('NUNCA pedir desculpas em nome da empresa');
        }
        if (feedback.includes('n√£o estipular prazos') || feedback.includes('sem estar presente')) {
            padroes.push('NUNCA estipular prazos que n√£o est√£o na solu√ß√£o implementada');
        }
        if (feedback.includes('n√£o condiz') || feedback.includes('nao-condiz-solucao')) {
            padroes.push('SEMPRE usar EXATAMENTE a solu√ß√£o implementada como base');
        }
        if (feedback.includes('informa√ß√µes incorretas') || feedback.includes('informacoes-incorretas')) {
            padroes.push('NUNCA inventar informa√ß√µes que n√£o est√£o nos dados fornecidos');
        }
        if (feedback.includes('falta clareza') || feedback.includes('falta-clareza')) {
            padroes.push('SEMPRE ser espec√≠fico e conclusivo sobre o que foi feito');
        }
        if (feedback.includes('exclus√£o de cadastro')) {
            padroes.push('Para exclus√£o: confirmar que dados foram removidos e n√£o receber√° mais comunica√ß√µes');
        }
        if (feedback.includes('portabilidade') || feedback.includes('chave pix')) {
            padroes.push('Para portabilidade: confirmar que processo foi conclu√≠do e chave liberada');
        }
    });
    
    // Analisar respostas coerentes para extrair padr√µes positivos
    aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes.forEach(resp => {
        const resposta = resp.respostaAprovada.toLowerCase();
        
        if (resposta.includes('conforme solicitado')) {
            padroes.push('Confirma√ß√£o de atendimento √† solicita√ß√£o');
        }
        if (resposta.includes('conforme estabelecido')) {
            padroes.push('Refer√™ncia a cl√°usulas contratuais');
        }
        if (resposta.includes('processo foi conclu√≠do')) {
            padroes.push('Confirma√ß√£o de conclus√£o do processo');
        }
        if (resposta.includes('confirmamos que')) {
            padroes.push('Confirma√ß√£o direta do que foi feito');
        }
    });
    
    // Remover duplicatas
    const padroesUnicos = [...new Set(padroes)];
    const clausulasUnicas = [...new Set(clausulas)];
    
    // Atualizar aprendizado
    aprendizado.tiposSituacao[tipoSituacao].padroesIdentificados = padroesUnicos;
    aprendizado.tiposSituacao[tipoSituacao].clausulasUsadas = clausulasUnicas;
    
    saveAprendizadoScript(aprendizado);
    console.log('‚úÖ Padr√µes processados:', padroesUnicos.length, 'padr√µes,', clausulasUnicas.length, 'cl√°usulas');
    console.log('üìã Padr√µes identificados:', padroesUnicos);
}

// Obter aprendizado para um tipo de situa√ß√£o
function getAprendizadoTipoSituacao(tipoSituacao) {
    const aprendizado = loadAprendizadoScript();
    return aprendizado.tiposSituacao[tipoSituacao] || {
        feedbacks: [],
        respostasCoerentes: [],
        padroesIdentificados: [],
        clausulasUsadas: []
    };
}

// ===== FUN√á√ÉO COMPATIBILIDADE (para n√£o quebrar c√≥digo existente) =====

// Carregar feedbacks (mantido para compatibilidade)
function loadFeedbacks() {
    const respostas = loadFeedbacksRespostas();
    const moderacoes = loadFeedbacksModeracoes();
    return {
        respostas: respostas.respostas || [],
        moderacoes: moderacoes.moderacoes || [],
        lastUpdated: new Date().toISOString()
    };
}

// Adicionar feedback de resposta (APENAS para aba Respostas RA)
function addRespostaFeedback(dadosFormulario, respostaAnterior, feedback, respostaReformulada) {
    const feedbacks = loadFeedbacksRespostas();
    
    const novoFeedback = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        tipo: 'resposta',
        dadosFormulario: dadosFormulario,
        respostaAnterior: respostaAnterior,
        feedback: feedback,
        respostaReformulada: respostaReformulada,
        contexto: {
            tipoSituacao: dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao,
            motivoSolicitacao: dadosFormulario.motivo_solicitacao || dadosFormulario.motivoSolicitacao
        }
    };
    
    feedbacks.respostas.push(novoFeedback);
    saveFeedbacksRespostas(feedbacks);
    
    // Tamb√©m adicionar ao aprendizado direto do script
    addFeedbackAprendizado(dadosFormulario.tipo_solicitacao, feedback, respostaReformulada);
    
    console.log('üìù Feedback de resposta adicionado (aba Respostas RA):', novoFeedback.id);
    return novoFeedback;
}

// Adicionar feedback de modera√ß√£o (APENAS para aba Modera√ß√£o RA)
function addModeracaoFeedback(textoNegado, motivoNegativa, textoReformulado) {
    const feedbacks = loadFeedbacksModeracoes();
    
    const novoFeedback = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        tipo: 'moderacao',
        textoNegado: textoNegado,
        motivoNegativa: motivoNegativa,
        textoReformulado: textoReformulado
    };
    
    feedbacks.moderacoes.push(novoFeedback);
    saveFeedbacksModeracoes(feedbacks);
    
    console.log('üìù Feedback de modera√ß√£o adicionado (aba Modera√ß√£o RA):', novoFeedback.id);
    return novoFeedback;
}

// Obter feedbacks relevantes para um contexto (SEPARADO POR ABA)
function getRelevantFeedbacks(tipo, contexto) {
    const relevantes = [];
    
    if (tipo === 'resposta') {
        // Usar APENAS feedbacks de respostas (aba Respostas RA)
        const feedbacks = loadFeedbacksRespostas();
        feedbacks.respostas.forEach(feedback => {
            let isRelevante = false;
            
            // Verificar correspond√™ncia exata de tipo de situa√ß√£o
            if (feedback.contexto && feedback.contexto.tipoSituacao === contexto.tipoSituacao) {
                isRelevante = true;
            }
            
            // Verificar correspond√™ncia de motivo de solicita√ß√£o
            if (feedback.contexto && feedback.contexto.motivoSolicitacao === contexto.motivoSolicitacao) {
                isRelevante = true;
            }
            
            // Busca por palavras-chave no feedback (para casos de exclus√£o de cadastro, LGPD, etc.)
            if (feedback.feedback && typeof feedback.feedback === 'string') {
                const feedbackLower = feedback.feedback.toLowerCase();
                const contextoLower = (contexto.tipoSituacao + ' ' + contexto.motivoSolicitacao).toLowerCase();
                
                // Buscar palavras-chave importantes
                const palavrasChave = ['exclus√£o', 'cadastro', 'lgpd', 'dados pessoais', 'desculpas', 'empresa'];
                const temPalavraChave = palavrasChave.some(palavra => 
                    feedbackLower.includes(palavra) && contextoLower.includes(palavra)
                );
                
                if (temPalavraChave) {
                    isRelevante = true;
                }
            }
            
            if (isRelevante) {
                relevantes.push(feedback);
            }
        });
    } else if (tipo === 'moderacao') {
        // Usar APENAS feedbacks de modera√ß√µes (aba Modera√ß√£o RA)
        const feedbacks = loadFeedbacksModeracoes();
        feedbacks.moderacoes.forEach(feedback => {
            if (feedback.motivoNegativa && contexto.motivoNegativa) {
                const motivoFeedback = feedback.motivoNegativa.toLowerCase();
                const motivoContexto = contexto.motivoNegativa.toLowerCase();
                
                if (motivoFeedback.includes(motivoContexto) || 
                    motivoContexto.includes(motivoFeedback) ||
                    motivoFeedback.includes('resposta n√£o condizente') ||
                    motivoFeedback.includes('tom inadequado')) {
                relevantes.push(feedback);
                }
            }
        });
    }
    
    // Ordenar por timestamp mais recente e retornar os √∫ltimos 5
    return relevantes
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, 5);
}

// Gerar explica√ß√£o baseada em feedbacks salvos (APENAS feedbacks de respostas)
function gerarExplicacaoBaseadaEmFeedbacks(tema, feedbacks) {
    console.log(`üß† Gerando explica√ß√£o para tema: ${tema} baseada em ${feedbacks.respostas.length} feedbacks de respostas (aba Respostas RA)`);
    
    // Buscar feedbacks relevantes para o tema
    const feedbacksRelevantes = [];
    
    // Buscar em feedbacks de respostas
    feedbacks.respostas.forEach(feedback => {
        let isRelevante = false;
        
        // Verificar no contexto (se existir)
        if (feedback.contexto && feedback.contexto.tipoSituacao) {
            const tipoSituacao = feedback.contexto.tipoSituacao.toLowerCase();
            const motivoSolicitacao = feedback.contexto.motivoSolicitacao ? feedback.contexto.motivoSolicitacao.toLowerCase() : '';
            
            if (tipoSituacao.includes(tema.toLowerCase()) || 
                motivoSolicitacao.includes(tema.toLowerCase())) {
                isRelevante = true;
            }
        }
        
        // Verificar nos dados do formul√°rio (fallback para feedbacks antigos)
        if (feedback.dadosFormulario) {
            const tipoSituacao = feedback.dadosFormulario.tipo_solicitacao ? feedback.dadosFormulario.tipo_solicitacao.toLowerCase() : '';
            const motivoSolicitacao = feedback.dadosFormulario.motivo_solicitacao ? feedback.dadosFormulario.motivo_solicitacao.toLowerCase() : '';
            
            if (tipoSituacao.includes(tema.toLowerCase()) || 
                motivoSolicitacao.includes(tema.toLowerCase())) {
                isRelevante = true;
            }
        }
        
        // Verificar no texto do feedback
        if (feedback.feedback) {
            const feedbackTexto = feedback.feedback.toLowerCase();
            if (feedbackTexto.includes(tema.toLowerCase()) ||
                (tema.toLowerCase().includes('exclusao') && feedbackTexto.includes('exclus√£o')) ||
                (tema.toLowerCase().includes('exclus√£o') && feedbackTexto.includes('exclusao'))) {
                isRelevante = true;
            }
        }
        
        if (isRelevante) {
            feedbacksRelevantes.push({
                tipo: 'resposta',
                feedback: feedback,
                relevancia: 'alta'
            });
        }
    });
    
    // NOTA: Explica√ß√µes usam APENAS feedbacks de respostas (aba Respostas RA)
    // Feedbacks de modera√ß√£o s√£o isolados para a aba Modera√ß√£o RA
    
    // Gerar explica√ß√£o baseada nos feedbacks encontrados
    let explicacao = '';
    
    if (feedbacksRelevantes.length > 0) {
        explicacao = gerarExplicacaoDetalhada(tema, feedbacksRelevantes);
    } else {
        explicacao = gerarExplicacaoPadrao(tema);
    }
    
    return explicacao;
}

// Gerar explica√ß√£o detalhada baseada em feedbacks
function gerarExplicacaoDetalhada(tema, feedbacksRelevantes) {
    let explicacao = `<p><strong>Explica√ß√£o sobre ${tema.charAt(0).toUpperCase() + tema.slice(1)}</strong></p>`;
    explicacao += `<p><em>Baseada em ${feedbacksRelevantes.length} experi√™ncia(s) anterior(es) documentada(s) no sistema.</em></p>`;
    
    // Extrair padr√µes dos feedbacks
    const padroes = new Set();
    const exemplos = [];
    
    feedbacksRelevantes.forEach(fb => {
        if (fb.feedback.feedback) {
            padroes.add(fb.feedback.feedback);
        }
        if (fb.feedback.respostaReformulada) {
            exemplos.push(fb.feedback.respostaReformulada.substring(0, 200));
        }
    });
    
    // Adicionar padr√µes identificados
    if (padroes.size > 0) {
        explicacao += `<h6>üìã Diretrizes Identificadas:</h6><ul>`;
        Array.from(padroes).forEach(padrao => {
            explicacao += `<li>${padrao}</li>`;
        });
        explicacao += `</ul>`;
    }
    
    // Adicionar exemplos pr√°ticos
    if (exemplos.length > 0) {
        explicacao += `<h6>‚úÖ Exemplos de Boas Pr√°ticas:</h6>`;
        exemplos.slice(0, 2).forEach((exemplo, index) => {
            explicacao += `<p><strong>Exemplo ${index + 1}:</strong> "${exemplo}..."</p>`;
        });
    }
    
    // Adicionar explica√ß√£o espec√≠fica baseada no tema
    explicacao += gerarExplicacaoEspecifica(tema);
    
    return explicacao;
}

// Gerar explica√ß√£o espec√≠fica baseada no tema
function gerarExplicacaoEspecifica(tema) {
    const explicacoesEspecificas = {
        'exclusao': `
            <h6>üîç Sobre Exclus√£o de Cadastro:</h6>
            <p>Com base nas experi√™ncias documentadas, seguem as diretrizes essenciais:</p>
            <ul>
                <li><strong>LGPD:</strong> Sempre citar a Lei Geral de Prote√ß√£o de Dados Pessoais (Lei n¬∫ 13.709/2018)</li>
                <li><strong>Tom Profissional:</strong> Nunca pedir desculpas em nome da empresa</li>
                <li><strong>Foco na Solu√ß√£o:</strong> Enfatizar que a solicita√ß√£o foi atendida</li>
                <li><strong>Transpar√™ncia:</strong> Informar a data exata da exclus√£o</li>
            </ul>
        `,
        'exclus√£o': `
            <h6>üîç Sobre Exclus√£o de Cadastro:</h6>
            <p>Com base nas experi√™ncias documentadas, seguem as diretrizes essenciais:</p>
            <ul>
                <li><strong>LGPD:</strong> Sempre citar a Lei Geral de Prote√ß√£o de Dados Pessoais (Lei n¬∫ 13.709/2018)</li>
                <li><strong>Tom Profissional:</strong> Nunca pedir desculpas em nome da empresa</li>
                <li><strong>Foco na Solu√ß√£o:</strong> Enfatizar que a solicita√ß√£o foi atendida</li>
                <li><strong>Transpar√™ncia:</strong> Informar a data exata da exclus√£o</li>
            </ul>
        `,
        'moderacao': `
            <h6>üîç Sobre Modera√ß√£o no Reclame Aqui:</h6>
            <p>Com base nas experi√™ncias documentadas:</p>
            <ul>
                <li><strong>Estrutura Padr√£o:</strong> "Conforme o apontamento acima, solicitamos a modera√ß√£o..."</li>
                <li><strong>Fundamenta√ß√£o:</strong> Sempre citar o manual aplic√°vel (Geral, Reviews ou Bancos)</li>
                <li><strong>Tom T√©cnico:</strong> Linguagem objetiva e impessoal</li>
                <li><strong>Evid√™ncias:</strong> Anexar documenta√ß√£o comprobat√≥ria</li>
            </ul>
        `
    };
    
    return explicacoesEspecificas[tema.toLowerCase()] || '';
}

// Gerar explica√ß√£o padr√£o quando n√£o h√° feedbacks relevantes
function gerarExplicacaoPadrao(tema) {
    const explicacoesPadrao = {
        'fgts': `
            <p><strong>Explica√ß√£o sobre FGTS (Fundo de Garantia do Tempo de Servi√ßo)</strong></p>
            <p>O FGTS √© um fundo que garante prote√ß√£o ao trabalhador demitido sem justa causa. O empregador deposita mensalmente 8% do sal√°rio do funcion√°rio em uma conta vinculada.</p>
            <p>Restitui√ß√µes podem ocorrer em casos espec√≠ficos como demiss√£o sem justa causa, aposentadoria, ou compra da casa pr√≥pria.</p>
            <p>Para consultar seus saldos, utilize o aplicativo FGTS ou o site da Caixa Econ√¥mica Federal.</p>
        `,
        'malha-fina': `
            <p><strong>Explica√ß√£o sobre Malha Fina e Regulariza√ß√£o</strong></p>
            <p>A malha fina √© um processo de verifica√ß√£o da Receita Federal que identifica inconsist√™ncias na declara√ß√£o do Imposto de Renda.</p>
            <p>Para regulariza√ß√£o, √© necess√°rio apresentar documenta√ß√£o comprobat√≥ria e, se necess√°rio, fazer uma declara√ß√£o retificadora.</p>
        `,
        'ccb': `
            <p><strong>Explica√ß√£o sobre C√©dula de Cr√©dito Banc√°rio (CCB)</strong></p>
            <p>A CCB √© um t√≠tulo de cr√©dito que representa uma promessa de pagamento. √â amplamente utilizada em opera√ß√µes de cr√©dito pessoal e empresarial.</p>
            <p>Possui caracter√≠sticas espec√≠ficas como prazo, taxa de juros e garantias, conforme estabelecido no contrato.</p>
        `
    };
    
    return explicacoesPadrao[tema.toLowerCase()] || `<p>Explica√ß√£o sobre ${tema} n√£o dispon√≠vel no momento. Consulte nossa equipe para mais informa√ß√µes.</p>`;
}

// ===== CONFIGURA√á√ïES DE SEGURAN√áA =====

// Middleware de seguran√ßa
app.use(cors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:3000', 'file://'],
    credentials: true
}));

app.use(express.json());
app.use(express.static('.'));

// Rate limiting simples
const rateLimit = new Map();
const RATE_LIMIT_WINDOW = 60000; // 1 minuto
const RATE_LIMIT_MAX = 10; // 10 requests por minuto

// Middleware de rate limiting
function rateLimitMiddleware(req, res, next) {
    const clientIP = req.ip || req.connection.remoteAddress;
    const now = Date.now();
    
    if (!rateLimit.has(clientIP)) {
        rateLimit.set(clientIP, { count: 1, resetTime: now + RATE_LIMIT_WINDOW });
        return next();
    }
    
    const clientData = rateLimit.get(clientIP);
    
    if (now > clientData.resetTime) {
        rateLimit.set(clientIP, { count: 1, resetTime: now + RATE_LIMIT_WINDOW });
        return next();
    }
    
    if (clientData.count >= RATE_LIMIT_MAX) {
        return res.status(429).json({ 
            error: 'Rate limit exceeded',
            message: 'Muitas requisi√ß√µes. Tente novamente em 1 minuto.'
        });
    }
    
    clientData.count++;
    next();
}

// ===== FUN√á√ïES DE SEGURAN√áA =====

// Carregar vari√°veis de ambiente do arquivo .env ou process.env (Vercel)
function loadEnvFile() {
    try {
        // Se estiver na Vercel (NODE_ENV=production), usar process.env
        if (process.env.NODE_ENV === 'production' || process.env.VERCEL) {
            console.log('üåê Carregando vari√°veis de ambiente da Vercel (process.env)');
            const envVars = {
                OPENAI_API_KEY: process.env.OPENAI_API_KEY,
                OPENAI_MODEL: process.env.OPENAI_MODEL || 'gpt-4o',
                OPENAI_TEMPERATURE: process.env.OPENAI_TEMPERATURE || '0.7',
                OPENAI_MAX_TOKENS: process.env.OPENAI_MAX_TOKENS || '2000',
                OPENAI_BASE_URL: process.env.OPENAI_BASE_URL || 'https://api.openai.com/v1',
                MAX_API_CALLS_PER_HOUR: process.env.MAX_API_CALLS_PER_HOUR || '100',
                APP_NAME: process.env.APP_NAME || 'Velotax Bot',
                APP_VERSION: process.env.APP_VERSION || '2.0.0',
                DEBUG_MODE: process.env.DEBUG_MODE || 'false',
                LOG_LEVEL: process.env.LOG_LEVEL || 'info'
            };
            
            console.log(`‚úÖ ${Object.keys(envVars).filter(k => envVars[k]).length} vari√°veis carregadas do process.env`);
            return envVars;
        }
        
        // Para desenvolvimento local, tentar carregar do arquivo .env
        const envPath = path.join(__dirname, '.env');
        
        if (!fs.existsSync(envPath)) {
            console.warn('‚ö†Ô∏è Arquivo .env n√£o encontrado na raiz do projeto');
            return {};
        }
        
        const envContent = fs.readFileSync(envPath, 'utf8');
        const envVars = {};
        
        const lines = envContent.split('\n');
        for (const line of lines) {
            const trimmedLine = line.trim();
            
            if (trimmedLine.startsWith('#') || trimmedLine === '') {
                continue;
            }
            
            const equalIndex = trimmedLine.indexOf('=');
            if (equalIndex === -1) {
                continue;
            }
            
            const key = trimmedLine.substring(0, equalIndex).trim();
            const value = trimmedLine.substring(equalIndex + 1).trim();
            const cleanValue = value.replace(/^["']|["']$/g, '');
            
            envVars[key] = cleanValue;
        }
        
        console.log(`‚úÖ ${Object.keys(envVars).length} vari√°veis carregadas do .env`);
        return envVars;
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar vari√°veis de ambiente:', error);
        return {};
    }
}

// Validar chave da API
function validateApiKey(apiKey) {
    if (!apiKey || typeof apiKey !== 'string') {
        return false;
    }
    
    if (!apiKey.startsWith('sk-')) {
        return false;
    }
    
    if (apiKey.length < 20) {
        return false;
    }
    
    return true;
}

// Criptografar dados sens√≠veis
function encryptSensitiveData(data, key) {
    try {
        const cipher = crypto.createCipher('aes-256-cbc', key);
        let encrypted = cipher.update(JSON.stringify(data), 'utf8', 'hex');
        encrypted += cipher.final('hex');
        return encrypted;
    } catch (error) {
        console.error('Erro ao criptografar dados:', error);
        return null;
    }
}

// Descriptografar dados sens√≠veis
function decryptSensitiveData(encryptedData, key) {
    try {
        const decipher = crypto.createDecipher('aes-256-cbc', key);
        let decrypted = decipher.update(encryptedData, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return JSON.parse(decrypted);
    } catch (error) {
        console.error('Erro ao descriptografar dados:', error);
        return null;
    }
}

// ===== ROTAS DE API =====

// Rota para verificar status do servidor
app.get('/api/status', (req, res) => {
    res.json({
        status: 'online',
        timestamp: new Date().toISOString(),
        version: '2.0.0',
        environment: 'production'
    });
});

// Rota para obter configura√ß√µes p√∫blicas (sem dados sens√≠veis)
app.get('/api/config/public', rateLimitMiddleware, (req, res) => {
    try {
        const envVars = loadEnvFile();
        
        // Retornar apenas configura√ß√µes p√∫blicas
        const publicConfig = {
            OPENAI_MODEL: envVars.OPENAI_MODEL || 'gpt-4o',
            OPENAI_TEMPERATURE: envVars.OPENAI_TEMPERATURE || '0.7',
            OPENAI_MAX_TOKENS: envVars.OPENAI_MAX_TOKENS || '2000',
            OPENAI_BASE_URL: envVars.OPENAI_BASE_URL || 'https://api.openai.com/v1',
            MAX_API_CALLS_PER_HOUR: envVars.MAX_API_CALLS_PER_HOUR || '100',
            APP_NAME: envVars.APP_NAME || 'Velotax Bot',
            APP_VERSION: envVars.APP_VERSION || '2.0.0',
            DEBUG_MODE: envVars.DEBUG_MODE || 'false',
            LOG_LEVEL: envVars.LOG_LEVEL || 'info'
        };
        
        res.json({
            success: true,
            config: publicConfig,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('Erro ao obter configura√ß√µes p√∫blicas:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: 'N√£o foi poss√≠vel carregar as configura√ß√µes'
        });
    }
});

// Rota para validar chave da API (sem expor a chave)
app.post('/api/validate-key', rateLimitMiddleware, (req, res) => {
    try {
        const { apiKey } = req.body;
        
        if (!apiKey) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o fornecida'
            });
        }
        
        const isValid = validateApiKey(apiKey);
        
        if (isValid) {
            res.json({
                success: true,
                message: 'Chave da API v√°lida',
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(400).json({
                success: false,
                error: 'Chave da API inv√°lida',
                message: 'Formato ou tamanho da chave incorreto'
            });
        }
        
    } catch (error) {
        console.error('Erro ao validar chave:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Rota para testar conex√£o com OpenAI
app.post('/api/test-openai', rateLimitMiddleware, async (req, res) => {
    try {
        const { apiKey } = req.body;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API inv√°lida'
            });
        }
        
        // Fazer teste simples com OpenAI
        const response = await fetch('https://api.openai.com/v1/models', {
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            res.json({
                success: true,
                message: 'Conex√£o com OpenAI bem-sucedida',
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(400).json({
                success: false,
                error: 'Erro na conex√£o com OpenAI',
                message: 'Verifique sua chave da API'
            });
        }
        
    } catch (error) {
        console.error('Erro ao testar OpenAI:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: 'N√£o foi poss√≠vel testar a conex√£o'
        });
    }
});

// Rota para gerar modera√ß√£o via API OpenAI
app.post('/api/generate-moderation', rateLimitMiddleware, async (req, res) => {
    try {
        const envVars = loadEnvFile();
        const apiKey = envVars.OPENAI_API_KEY;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o configurada ou inv√°lida'
            });
        }
        
        const { dadosModeracao } = req.body;
        
        if (!dadosModeracao) {
            return res.status(400).json({
                success: false,
                error: 'Dados de modera√ß√£o n√£o fornecidos'
            });
        }
        
        // Obter feedbacks relevantes para melhorar a gera√ß√£o de modera√ß√£o
        const feedbacksRelevantes = getRelevantFeedbacks('moderacao', {
            motivoNegativa: dadosModeracao.motivoModeracao
        });
        
        let conhecimentoFeedback = '';
        if (feedbacksRelevantes.length > 0) {
            conhecimentoFeedback = '\n\nCONHECIMENTO BASEADO EM FEEDBACKS ANTERIORES DE MODERA√á√ÉO:\n';
            conhecimentoFeedback += 'Com base em modera√ß√µes negadas anteriormente, evite os seguintes erros:\n\n';
            feedbacksRelevantes.forEach((fb, index) => {
                conhecimentoFeedback += `${index + 1}. Motivo da negativa: "${fb.motivoNegativa}"\n`;
                conhecimentoFeedback += `   Texto reformulado: "${fb.textoReformulado.substring(0, 150)}..."\n\n`;
            });
            conhecimentoFeedback += 'Use este conhecimento para gerar um texto de modera√ß√£o de alta qualidade desde o in√≠cio, evitando negativas do RA.\n';
        }
        
        const prompt = `
DADOS PARA MODERA√á√ÉO:
- Solicita√ß√£o do Cliente: ${dadosModeracao.solicitacaoCliente}
- Resposta da Empresa: ${dadosModeracao.respostaEmpresa}
- Motivo da Modera√ß√£o: ${dadosModeracao.motivoModeracao}
- Considera√ß√£o Final do Consumidor: ${dadosModeracao.consideracaoFinal}

INSTRU√á√ïES ESPECIALIZADAS:
Voc√™ √© um especialista em Reclame Aqui, com foco em formula√ß√£o de textos de modera√ß√£o. Seu papel √© redigir solicita√ß√µes t√©cnicas e objetivas, em nome da empresa Velotax, com base nos manuais oficiais de modera√ß√£o do Reclame Aqui.

IMPORTANTE: Seu texto deve ser endere√ßado ao time de modera√ß√£o do RA, nunca ao consumidor.

DIRETRIZES OBRIGAT√ìRIAS:

1. TOM E ESTILO:
- T√©cnico, impessoal, formal e objetivo
- Sem linguagem comercial, promocional ou emocional
- Clareza > quantidade. N√£o usar floreios, apenas fatos e base normativa
- Evite repeti√ß√µes desnecess√°rias

2. ESTRUTURA PADR√ÉO:
a) Introdu√ß√£o curta e t√©cnica:
SEMPRE iniciar com: "Conforme o apontamento acima, solicitamos a modera√ß√£o desta publica√ß√£o‚Ä¶"

b) Exposi√ß√£o dos fatos:
- Contextualize em ordem cronol√≥gica e objetiva
- Explique o ponto de diverg√™ncia ou motivo que torna a publica√ß√£o indevida
- Use registros internos (datas, atendimentos, exclus√µes, quita√ß√µes, etc.)

c) Fundamenta√ß√£o normativa:
- Relacione o motivo com os manuais oficiais do RA
- Cite especificamente: Manual Geral, Manual de Reviews ou Manual de Bancos/Institui√ß√µes Financeiras/Meios

d) Encerramento formal:
SEMPRE finalizar com: "Diante do exposto, solicitamos a exclus√£o/modera√ß√£o do conte√∫do, em conformidade com as diretrizes da plataforma."

3. MOTIVOS DE MODERA√á√ÉO ACEITOS:
- Informa√ß√£o falsa ou incorreta (Manual Geral)
- Caso j√° resolvido antes da abertura no RA (Manual Geral)
- Ofensa a empresa ou colaboradores (Manual Bancos/Meios)
- Divulga√ß√£o de dados pessoais/sens√≠veis (Manual Geral)
- Reclama√ß√£o duplicada (Manual de Reviews)
- Reclama√ß√£o de outra empresa (Manual de Reviews)
- Reclama√ß√£o trabalhista (Manual de Reviews)
- Caso de fraude (Manual Bancos/Meios)
- A empresa n√£o violou o direito do consumidor (Manual Bancos/Meios)

${conhecimentoFeedback}

IMPORTANTE: Use o conhecimento dos feedbacks anteriores para gerar um texto de modera√ß√£o de alta qualidade desde o in√≠cio, evitando negativas do RA.

Gere uma solicita√ß√£o de modera√ß√£o seguindo EXATAMENTE esta estrutura e tom t√©cnico.`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: envVars.OPENAI_MODEL || 'gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: 'Voc√™ √© um especialista em Reclame Aqui, com foco em formula√ß√£o de textos de modera√ß√£o.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: parseFloat(envVars.OPENAI_TEMPERATURE) || 0.7,
                max_tokens: parseInt(envVars.OPENAI_MAX_TOKENS) || 2000
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            let resposta = data.choices[0].message.content;
            
            // Valida√ß√£o p√≥s-processamento para modera√ß√£o - NUNCA usar resposta gen√©rica
            const palavrasGenericas = [
                'situa√ß√£o atual', 'detalhes espec√≠ficos n√£o foram compartilhados', 
                'nossa equipe est√° comprometida', 'analisar todas as solicita√ß√µes',
                'embora os detalhes espec√≠ficos', 'gostar√≠amos de assegurar',
                'caso a sua solicita√ß√£o envolva', 'estamos aqui para esclarecer',
                'sua situa√ß√£o atual necessitou', 'detalhes espec√≠ficos do seu caso'
            ];
            
            const temGenericas = palavrasGenericas.some(palavra => 
                resposta.toLowerCase().includes(palavra)
            );
            
            // Verificar se a resposta foi gerada com aprendizado (cont√©m conhecimentoFeedback)
            const temAprendizado = conhecimentoFeedback && conhecimentoFeedback.length > 100;
            
            if (temAprendizado) {
                console.log('‚úÖ Modera√ß√£o gerada com aprendizado aplicado - mantendo resposta da IA');
            } else {
                console.log('‚ö†Ô∏è Modera√ß√£o gen√©rica detectada - NUNCA usar resposta gen√©rica para RA/Modera√ß√µes');
                console.log('üìù Formulando modera√ß√£o espec√≠fica baseada nos dados fornecidos pelo usu√°rio...');
                
                // Criar modera√ß√£o espec√≠fica baseada nos dados fornecidos
                const solicitacao = dadosModeracao.solicitacaoCliente;
                const respostaEmpresa = dadosModeracao.respostaEmpresa;
                const motivo = dadosModeracao.motivoModeracao;
                const consideracao = dadosModeracao.consideracaoFinal;
                
                let moderacaoEspecifica = `Prezados Senhores,

Solicitamos a modera√ß√£o do conte√∫do em quest√£o pelos seguintes motivos:

**DADOS DO CASO:**
- Solicita√ß√£o do Cliente: ${solicitacao}
- Resposta da Empresa: ${respostaEmpresa}
- Motivo da Modera√ß√£o: ${motivo}
- Considera√ß√£o Final do Consumidor: ${consideracao}

**FUNDAMENTA√á√ÉO:**
${motivo ? `O conte√∫do viola as diretrizes do Reclame Aqui conforme ${motivo}.` : 'O conte√∫do n√£o est√° em conformidade com as diretrizes da plataforma.'}

**SOLICITA√á√ÉO:**
Diante do exposto, solicitamos a modera√ß√£o do conte√∫do, em conformidade com as diretrizes da plataforma.

Atenciosamente,
Equipe Velotax`;
                
                resposta = moderacaoEspecifica;
            }
            
            res.json({
                success: true,
                result: resposta
            });
        } else {
            const errorData = await response.text();
            res.status(400).json({
                success: false,
                error: 'Erro na API OpenAI',
                details: errorData
            });
        }
    } catch (error) {
        console.error('Erro ao gerar modera√ß√£o:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Rota para gerar resposta RA via API OpenAI
app.post('/api/generate-response', rateLimitMiddleware, async (req, res) => {
    try {
        const envVars = loadEnvFile();
        const apiKey = envVars.OPENAI_API_KEY;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o configurada ou inv√°lida'
            });
        }
        
        const { dadosFormulario } = req.body;
        
        if (!dadosFormulario) {
            return res.status(400).json({
                success: false,
                error: 'Dados do formul√°rio n√£o fornecidos'
            });
        }
        
        console.log('üìã Dados recebidos do formul√°rio:', {
            tipo_solicitacao: dadosFormulario.tipo_solicitacao,
            motivo_solicitacao: dadosFormulario.motivo_solicitacao,
            solucao_implementada: dadosFormulario.solucao_implementada?.substring(0, 100) + '...',
            texto_cliente: dadosFormulario.texto_cliente?.substring(0, 100) + '...',
            historico_atendimento: dadosFormulario.historico_atendimento?.substring(0, 50) + '...',
            observacoes_internas: dadosFormulario.observacoes_internas?.substring(0, 50) + '...'
        });
        
        // Obter aprendizado direto do script para este tipo de situa√ß√£o (PRIORIT√ÅRIO)
        const aprendizadoScript = getAprendizadoTipoSituacao(dadosFormulario.tipo_solicitacao);
        
        // Obter feedbacks relevantes para melhorar a gera√ß√£o de resposta (COMPLEMENTAR)
        const feedbacksRelevantes = getRelevantFeedbacks('resposta', {
            tipoSituacao: dadosFormulario.tipo_solicitacao,
            motivoSolicitacao: dadosFormulario.motivo_solicitacao
        });
        
        // Obter modelos de respostas aprovadas para o mesmo tipo de situa√ß√£o
        const modelosRelevantes = getModelosRelevantes(dadosFormulario.tipo_solicitacao, dadosFormulario.motivo_solicitacao);
        
        console.log(`üîç Buscando aprendizado para: ${dadosFormulario.tipo_solicitacao} - ${dadosFormulario.motivo_solicitacao}`);
        console.log(`üß† APRENDIZADO DO SCRIPT: ${aprendizadoScript.feedbacks.length} feedbacks, ${aprendizadoScript.respostasCoerentes.length} respostas coerentes`);
        console.log(`üìö Feedbacks complementares: ${feedbacksRelevantes.length}`);
        console.log(`üéØ Modelos encontrados: ${modelosRelevantes.length}`);
        
        let conhecimentoFeedback = '';
        
        // Identificar padr√µes automaticamente se ainda n√£o foram identificados
        console.log('üîç Verificando se precisa identificar padr√µes:', {
            tipo: dadosFormulario.tipo_solicitacao,
            feedbacks: aprendizadoScript.feedbacks.length,
            padroes: aprendizadoScript.padroesIdentificados.length
        });
        
        if (aprendizadoScript.feedbacks.length > 0 && aprendizadoScript.padroesIdentificados.length === 0) {
            console.log('üîç Identificando padr√µes automaticamente para:', dadosFormulario.tipo_solicitacao);
            processarPadroesExistentes(dadosFormulario.tipo_solicitacao);
            // Recarregar aprendizado ap√≥s identificar padr√µes
            const aprendizadoAtualizado = getAprendizadoTipoSituacao(dadosFormulario.tipo_solicitacao);
            aprendizadoScript.padroesIdentificados = aprendizadoAtualizado.padroesIdentificados;
            aprendizadoScript.clausulasUsadas = aprendizadoAtualizado.clausulasUsadas;
            console.log('‚úÖ Padr√µes atualizados:', aprendizadoScript.padroesIdentificados.length);
        }
        
        // PRIORIDADE 1: APRENDIZADO DIRETO DO SCRIPT (mais recente e espec√≠fico)
        if (aprendizadoScript.feedbacks.length > 0 || aprendizadoScript.respostasCoerentes.length > 0 || aprendizadoScript.padroesIdentificados.length > 0) {
            conhecimentoFeedback = '\n\nüéì APRENDIZADO DIRETO DO SCRIPT DE FORMULA√á√ÉO (PRIORIT√ÅRIO):\n';
            conhecimentoFeedback += `Baseado em ${aprendizadoScript.feedbacks.length} feedbacks e ${aprendizadoScript.respostasCoerentes.length} respostas coerentes para "${dadosFormulario.tipo_solicitacao}":\n\n`;
            console.log('üß† Aplicando aprendizado do script:', {
                feedbacks: aprendizadoScript.feedbacks.length,
                respostasCoerentes: aprendizadoScript.respostasCoerentes.length,
                padroes: aprendizadoScript.padroesIdentificados.length
            });
            
            // Adicionar padr√µes identificados
            if (aprendizadoScript.padroesIdentificados.length > 0) {
                conhecimentoFeedback += 'üìã PADR√ïES IDENTIFICADOS (OBRIGAT√ìRIOS):\n';
                aprendizadoScript.padroesIdentificados.forEach((padrao, index) => {
                    conhecimentoFeedback += `${index + 1}. ${padrao}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar cl√°usulas usadas
            if (aprendizadoScript.clausulasUsadas.length > 0) {
                conhecimentoFeedback += '‚öñÔ∏è CL√ÅUSULAS CCB APLIC√ÅVEIS:\n';
                aprendizadoScript.clausulasUsadas.forEach(clausula => {
                    conhecimentoFeedback += `‚Ä¢ ${clausula}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar feedbacks recentes (CR√çTICO - EVITAR ESTES ERROS)
            if (aprendizadoScript.feedbacks.length > 0) {
                conhecimentoFeedback += '‚ö†Ô∏è FEEDBACKS RECENTES (EVITAR ESTES ERROS):\n';
                aprendizadoScript.feedbacks.slice(-5).forEach((fb, index) => {
                    conhecimentoFeedback += `${index + 1}. ERRO: "${fb.feedback}"\n`;
                    conhecimentoFeedback += `   RESPOSTA CORRIGIDA: "${fb.respostaReformulada.substring(0, 200)}..."\n\n`;
                });
            }
            
            // Adicionar respostas coerentes recentes (SEGUIR ESTE PADR√ÉO)
            if (aprendizadoScript.respostasCoerentes.length > 0) {
                conhecimentoFeedback += '‚úÖ RESPOSTAS COERENTES RECENTES (SEGUIR ESTE PADR√ÉO):\n';
                aprendizadoScript.respostasCoerentes.slice(-3).forEach((resp, index) => {
                    conhecimentoFeedback += `${index + 1}. Motivo: ${resp.motivoSolicitacao}\n`;
                    conhecimentoFeedback += `   RESPOSTA APROVADA: "${resp.respostaAprovada.substring(0, 250)}..."\n\n`;
                });
            }
            
            conhecimentoFeedback += 'üéØ INSTRU√á√ÉO CR√çTICA: Use este aprendizado direto do script para gerar uma resposta de alta qualidade desde o in√≠cio, aplicando os padr√µes identificados e evitando os erros documentados.\n';
        }
        
        // PRIORIDADE 2: FEEDBACKS COMPLEMENTARES (se n√£o houver aprendizado do script)
        else if (feedbacksRelevantes.length > 0) {
            conhecimentoFeedback = '\n\nüß† CONHECIMENTO BASEADO EM FEEDBACKS ANTERIORES:\n';
            conhecimentoFeedback += 'Com base em feedbacks anteriores de situa√ß√µes similares, siga estas diretrizes:\n\n';
            
            // Extrair padr√µes dos feedbacks e determinar cl√°usulas
            const padroes = new Set();
            const exemplos = [];
            const clausulasPorTipo = {};
            
            feedbacksRelevantes.forEach((fb, index) => {
                if (fb.feedback) {
                    padroes.add(fb.feedback);
                    
                    // Determinar cl√°usula baseada no tipo de situa√ß√£o
                    const tipoSituacao = fb.contexto.tipoSituacao || fb.dadosFormulario?.tipo_solicitacao || '';
                    let clausulaAplicavel = '';
                    
                    if (tipoSituacao.toLowerCase().includes('pix') || tipoSituacao.toLowerCase().includes('portabilidade') || tipoSituacao.toLowerCase().includes('chave')) {
                        clausulaAplicavel = 'Cl√°usula 7 - V√≠nculo da Chave Pix e Quita√ß√£o Autom√°tica';
                    } else if (tipoSituacao.toLowerCase().includes('quita√ß√£o') || tipoSituacao.toLowerCase().includes('liquida√ß√£o') || tipoSituacao.toLowerCase().includes('encerramento')) {
                        clausulaAplicavel = 'Cl√°usula 8 - Liquida√ß√£o Antecipada';
                    } else if (tipoSituacao.toLowerCase().includes('inadimpl√™ncia') || tipoSituacao.toLowerCase().includes('vencimento')) {
                        clausulaAplicavel = 'Cl√°usula 10 - Inadimpl√™ncia e Vencimento Antecipado';
                    } else if (tipoSituacao.toLowerCase().includes('exclus√£o') || tipoSituacao.toLowerCase().includes('dados') || tipoSituacao.toLowerCase().includes('lgpd')) {
                        clausulaAplicavel = 'Cl√°usula 14 - Prote√ß√£o de Dados (LGPD)';
                    }
                    
                    if (clausulaAplicavel) {
                        if (!clausulasPorTipo[tipoSituacao]) {
                            clausulasPorTipo[tipoSituacao] = new Set();
                        }
                        clausulasPorTipo[tipoSituacao].add(clausulaAplicavel);
                    }
                    
                    exemplos.push({
                        feedback: fb.feedback,
                        contexto: `${tipoSituacao} - ${fb.contexto.motivoSolicitacao || fb.dadosFormulario?.motivo_solicitacao || ''}`,
                        clausula: clausulaAplicavel,
                        resposta: fb.respostaReformulada.substring(0, 200)
                    });
                }
            });
            
            // Adicionar padr√µes identificados
            if (padroes.size > 0) {
                conhecimentoFeedback += 'üìã PADR√ïES IDENTIFICADOS (OBRIGAT√ìRIOS):\n';
                Array.from(padroes).forEach((padrao, index) => {
                    conhecimentoFeedback += `${index + 1}. ${padrao}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar cl√°usulas por tipo de situa√ß√£o
            if (Object.keys(clausulasPorTipo).length > 0) {
                conhecimentoFeedback += '‚öñÔ∏è CL√ÅUSULAS CCB POR TIPO DE SITUA√á√ÉO:\n';
                Object.keys(clausulasPorTipo).forEach(tipo => {
                    const clausulas = Array.from(clausulasPorTipo[tipo]);
                    conhecimentoFeedback += `‚Ä¢ **${tipo}**: ${clausulas.join(', ')}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar exemplos de boas pr√°ticas
            if (exemplos.length > 0) {
                conhecimentoFeedback += '‚úÖ EXEMPLOS DE BOAS PR√ÅTICAS:\n';
                exemplos.slice(0, 3).forEach((exemplo, index) => {
                    conhecimentoFeedback += `${index + 1}. Contexto: ${exemplo.contexto}\n`;
                    if (exemplo.clausula) {
                        conhecimentoFeedback += `   Cl√°usula CCB: ${exemplo.clausula}\n`;
                    }
                    conhecimentoFeedback += `   Aplicar: ${exemplo.feedback}\n`;
                    conhecimentoFeedback += `   Exemplo: "${exemplo.resposta}..."\n\n`;
                });
            }
            
            conhecimentoFeedback += 'üéØ INSTRU√á√ÉO: Use este conhecimento para gerar uma resposta de alta qualidade desde o in√≠cio, aplicando os padr√µes identificados e a cl√°usula CCB correta para cada tipo de situa√ß√£o.\n';
        }
        
        // Adicionar modelos de respostas aprovadas
        if (modelosRelevantes.length > 0) {
            conhecimentoFeedback += '\n\nüèÜ MODELOS DE RESPOSTAS APROVADAS:\n';
            conhecimentoFeedback += 'Baseado em respostas que foram marcadas como "coerentes" para situa√ß√µes similares, use estes exemplos como refer√™ncia:\n\n';
            
            modelosRelevantes.forEach((modelo, index) => {
                conhecimentoFeedback += `üìã **MODELO ${index + 1}** (${modelo.tipo_situacao}):\n`;
                conhecimentoFeedback += `   Motivo: ${modelo.motivo_solicitacao}\n`;
                conhecimentoFeedback += `   Resposta aprovada: "${modelo.respostaAprovada.substring(0, 300)}..."\n\n`;
            });
            
            conhecimentoFeedback += 'üéØ INSTRU√á√ÉO: Use estes modelos como base para estruturar sua resposta, adaptando o conte√∫do para os dados espec√≠ficos fornecidos acima.\n';
        }
        
        
        const prompt = `Voc√™ √© respons√°vel por redigir respostas da empresa Velotax no Reclame Aqui.

AN√ÅLISE OBRIGAT√ìRIA DE TODOS OS CAMPOS:

Voc√™ receber√° os seguintes campos que DEVEM ser analisados em conjunto:
- **Reclama√ß√£o do Cliente**: O que o cliente est√° solicitando/reclamando
- **Solu√ß√£o Implementada**: O que a empresa fez para resolver
- **Hist√≥rico de Atendimento**: Contexto de atendimentos anteriores
- **Observa√ß√µes Internas**: Informa√ß√µes adicionais da equipe
- **Tipo de Situa√ß√£o**: Categoria da solicita√ß√£o
- **Motivo da Solicita√ß√£o**: Raz√£o da solicita√ß√£o

DADOS RECEBIDOS PARA AN√ÅLISE COMPLETA:

**Tipo de solicita√ß√£o:** ${dadosFormulario.tipo_solicitacao}
**Motivo da solicita√ß√£o:** ${dadosFormulario.motivo_solicitacao}

**RECLAMA√á√ÉO DO CLIENTE (ANALISAR PRIMEIRO):**
"${dadosFormulario.texto_cliente}"

**SOLU√á√ÉO IMPLEMENTADA (BASE FACTUAL):**
"${dadosFormulario.solucao_implementada}"

**HIST√ìRICO DE ATENDIMENTO:**
${dadosFormulario.historico_atendimento || 'Nenhum'}

**OBSERVA√á√ïES INTERNAS:**
${dadosFormulario.observacoes_internas || 'Nenhuma'}

SUA TAREFA √â:

1. **ANALISAR** a reclama√ß√£o do cliente para entender exatamente o que ele est√° pedindo
2. **CONSIDERAR** a solu√ß√£o implementada como base factual do que foi feito
3. **INTEGRAR** o hist√≥rico de atendimento e observa√ß√µes internas para contexto completo
4. **FORMULAR** uma resposta personalizada que responda diretamente √† solicita√ß√£o do cliente
5. **ALINHAR** a resposta com a solu√ß√£o implementada, explicando como ela resolve a solicita√ß√£o

REGRAS OBRIGAT√ìRIAS:

- **NUNCA** copie literalmente o texto da "Solu√ß√£o implementada"
- **SEMPRE** formule uma resposta que responda diretamente √† reclama√ß√£o do cliente
- **SEMPRE** explique como a solu√ß√£o implementada resolve a solicita√ß√£o do cliente
- **SEMPRE** use linguagem cordial, objetiva e emp√°tica
- **SEMPRE** contextualize com refer√™ncias legais quando aplic√°vel (LGPD, CCB, etc.)
- **SEMPRE** deixe o texto pronto para publica√ß√£o no Reclame Aqui

AN√ÅLISE INTELIGENTE DAS CL√ÅUSULAS DA CCB:

Voc√™ deve analisar QUAL cl√°usula da CCB se aplica ao tipo de situa√ß√£o espec√≠fica:

**Cl√°usulas Dispon√≠veis:**
- **Cl√°usula 7**: V√≠nculo da Chave Pix e Quita√ß√£o Autom√°tica (para casos de chave Pix, portabilidade, libera√ß√£o)
- **Cl√°usula 8**: Liquida√ß√£o Antecipada (para casos de quita√ß√£o, liquida√ß√£o, encerramento)
- **Cl√°usula 10**: Inadimpl√™ncia e Vencimento Antecipado (para casos de inadimpl√™ncia, vencimento)
- **Cl√°usula 14**: Prote√ß√£o de Dados (LGPD) (para casos de exclus√£o de cadastro, dados pessoais)

**Como determinar a cl√°usula correta:**
1. **ANALISAR** o tipo de situa√ß√£o: ${dadosFormulario.tipo_solicitacao}
2. **IDENTIFICAR** qual cl√°usula se aplica baseado no tipo de situa√ß√£o
3. **USAR** o conhecimento dos feedbacks para aplicar a cl√°usula correta
4. **FUNDAMENTAR** a resposta com base na cl√°usula contratual espec√≠fica
5. **EXPLICAR** ao cliente como a cl√°usula justifica a solu√ß√£o implementada

**IMPORTANTE:** Nem todos os casos usam a Cl√°usula 14 (LGPD). Use a cl√°usula apropriada para cada tipo de situa√ß√£o.

IMPORTANTE:

A resposta deve ser uma formula√ß√£o completa que:
1. Reconhece a solicita√ß√£o do cliente
2. Analisa a solu√ß√£o implementada com base nas cl√°usulas da CCB
3. Explica como a solu√ß√£o resolve a solicita√ß√£o fundamentada contratualmente
4. Inclui contexto relevante do hist√≥rico e observa√ß√µes
5. Demonstra conhecimento das obriga√ß√µes contratuais
6. Mant√©m tom profissional e emp√°tico

${conhecimentoFeedback}

Formule uma resposta personalizada e completa que responda diretamente √† solicita√ß√£o do cliente, explicando como a solu√ß√£o implementada resolve o problema fundamentada nas cl√°usulas contratuais.`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: envVars.OPENAI_MODEL || 'gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: 'Voc√™ √© um assistente especializado em atendimento ao cliente para a empresa Velotax. Sua fun√ß√£o √© analisar TODOS os campos fornecidos (reclama√ß√£o do cliente, solu√ß√£o implementada, hist√≥rico de atendimento, observa√ß√µes internas) e formular uma resposta personalizada que responda diretamente √† solicita√ß√£o do cliente, explicando como a solu√ß√£o implementada resolve o problema. Use as cl√°usulas da CCB quando aplic√°vel para fundamentar a resposta.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: parseFloat(envVars.OPENAI_TEMPERATURE) || 0.7,
                max_tokens: parseInt(envVars.OPENAI_MAX_TOKENS) || 2000
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            let resposta = data.choices[0].message.content;
            
            // Valida√ß√£o p√≥s-processamento mais rigorosa e espec√≠fica
            const palavrasGenericas = [
                'situa√ß√£o atual', 'detalhes espec√≠ficos n√£o foram compartilhados', 
                'nossa equipe est√° comprometida', 'analisar todas as solicita√ß√µes',
                'embora os detalhes espec√≠ficos', 'gostar√≠amos de assegurar',
                'caso a sua solicita√ß√£o envolva', 'estamos aqui para esclarecer',
                'sua situa√ß√£o atual necessitou', 'detalhes espec√≠ficos do seu caso'
            ];
            
            const temGenericas = palavrasGenericas.some(palavra => 
                resposta.toLowerCase().includes(palavra)
            );
            
            // Verificar se a resposta menciona especificamente a solu√ß√£o implementada
            const mencionaSolucao = dadosFormulario.solucao_implementada && 
                resposta.toLowerCase().includes(dadosFormulario.solucao_implementada.toLowerCase().substring(0, 30));
            
            // Verificar se a resposta √© muito curta (menos de 300 caracteres)
            const muitoCurta = resposta.length < 300;
            
            // Verificar se menciona o tipo de solicita√ß√£o espec√≠fico
            const mencionaTipoSolicitacao = dadosFormulario.tipo_solicitacao && 
                resposta.toLowerCase().includes(dadosFormulario.tipo_solicitacao.toLowerCase());
            
            // Verificar se tem palavras conclusivas
            const palavrasConclusivas = ['confirmamos', 'conclu√≠do', 'finalizado', 'realizado', 'processado', 'implementado', 'resolvido', 'atendido', 'exclu√≠do', 'liberado', 'removido', 'cancelado'];
            const temConclusao = palavrasConclusivas.some(palavra => 
                resposta.toLowerCase().includes(palavra)
            );
            
            // Verificar se integra o hist√≥rico de atendimento
            const integraHistorico = dadosFormulario.historico_atendimento && 
                dadosFormulario.historico_atendimento !== 'Nenhum' &&
                resposta.toLowerCase().includes(dadosFormulario.historico_atendimento.toLowerCase().substring(0, 20));
            
            // Verificar se integra as observa√ß√µes internas
            const integraObservacoes = dadosFormulario.observacoes_internas && 
                dadosFormulario.observacoes_internas !== 'Nenhuma' &&
                resposta.toLowerCase().includes(dadosFormulario.observacoes_internas.toLowerCase().substring(0, 20));
            
            // Verificar se a resposta foi gerada com aprendizado (cont√©m conhecimentoFeedback)
            const temAprendizado = conhecimentoFeedback && conhecimentoFeedback.length > 100;
            
            if (temAprendizado) {
                console.log('‚úÖ Resposta gerada com aprendizado aplicado - mantendo resposta da IA');
            } else {
                console.log('‚ö†Ô∏è Resposta gen√©rica detectada - NUNCA usar resposta gen√©rica para RA/Modera√ß√µes');
                console.log('üìù Formulando resposta espec√≠fica baseada nos dados fornecidos pelo usu√°rio...');
                
                // Extrair informa√ß√µes espec√≠ficas dos dados
                const tipoSituacao = dadosFormulario.tipo_solicitacao;
                const solucao = dadosFormulario.solucao_implementada;
                const motivo = dadosFormulario.motivo_solicitacao;
                const historico = dadosFormulario.historico_atendimento;
                const observacoes = dadosFormulario.observacoes_internas;
                
                // Criar resposta mais espec√≠fica e completa baseada nos dados fornecidos
                let respostaEspecifica = `Prezado(a) cliente,

Agradecemos seu contato e reconhecemos sua solicita√ß√£o de ${tipoSituacao}${motivo ? ` - ${motivo}` : ''}.

${solucao ? `Confirmamos que ${solucao}.` : 'Analisamos sua solicita√ß√£o e implementamos a solu√ß√£o adequada.'}

${historico && historico !== 'Nenhum' ? `Considerando o hist√≥rico de atendimento: ${historico}. ` : ''}${observacoes && observacoes !== 'Nenhuma' ? `Observamos que: ${observacoes}. ` : ''}

O processo foi conclu√≠do conforme solicitado. Caso tenha d√∫vidas, nossa equipe est√° dispon√≠vel para esclarecimentos.

Atenciosamente,
Equipe Velotax`;
                
                // Adicionar contexto espec√≠fico baseado no tipo de situa√ß√£o
                if (tipoSituacao.toLowerCase().includes('exclus√£o') || tipoSituacao.toLowerCase().includes('exclusao')) {
                    respostaEspecifica = `Prezado(a) cliente,

Agradecemos seu contato e reconhecemos sua solicita√ß√£o de exclus√£o de cadastro${motivo ? ` - ${motivo}` : ''}.

${solucao ? `Confirmamos que ${solucao}.` : 'Analisamos sua solicita√ß√£o de exclus√£o e implementamos a solu√ß√£o adequada.'}

${historico && historico !== 'Nenhum' ? `Considerando o hist√≥rico de atendimento: ${historico}. ` : ''}${observacoes && observacoes !== 'Nenhuma' ? `Observamos que: ${observacoes}. ` : ''}

O processo foi conclu√≠do conforme solicitado. Caso tenha d√∫vidas, nossa equipe est√° dispon√≠vel para esclarecimentos.

Atenciosamente,
Equipe Velotax`;
                } else if (tipoSituacao.toLowerCase().includes('pix') || tipoSituacao.toLowerCase().includes('portabilidade')) {
                    respostaEspecifica = `Prezado(a) cliente,

Agradecemos seu contato e reconhecemos sua solicita√ß√£o de ${tipoSituacao}${motivo ? ` - ${motivo}` : ''}.

${solucao ? `Confirmamos que ${solucao}.` : 'Analisamos sua solicita√ß√£o de portabilidade e implementamos a solu√ß√£o adequada.'}

${historico && historico !== 'Nenhum' ? `Considerando o hist√≥rico de atendimento: ${historico}. ` : ''}${observacoes && observacoes !== 'Nenhuma' ? `Observamos que: ${observacoes}. ` : ''}

A opera√ß√£o foi realizada conforme estabelecido na Cl√°usula 7 de sua C√©dula de Cr√©dito Banc√°rio (CCB), que trata do v√≠nculo da chave Pix e quita√ß√£o autom√°tica.

Caso tenha d√∫vidas, nossa equipe est√° dispon√≠vel para esclarecimentos.

Atenciosamente,
Equipe Velotax`;
                } else if (tipoSituacao.toLowerCase().includes('quita√ß√£o') || tipoSituacao.toLowerCase().includes('liquida√ß√£o')) {
                    respostaEspecifica = `Prezado(a) cliente,

Agradecemos seu contato e reconhecemos sua solicita√ß√£o de ${tipoSituacao}${motivo ? ` - ${motivo}` : ''}.

${solucao ? `Confirmamos que ${solucao}.` : 'Analisamos sua solicita√ß√£o de quita√ß√£o e implementamos a solu√ß√£o adequada.'}

${historico && historico !== 'Nenhum' ? `Considerando o hist√≥rico de atendimento: ${historico}. ` : ''}${observacoes && observacoes !== 'Nenhuma' ? `Observamos que: ${observacoes}. ` : ''}

A opera√ß√£o foi realizada conforme estabelecido na Cl√°usula 8 de sua C√©dula de Cr√©dito Banc√°rio (CCB), que trata da liquida√ß√£o antecipada.

Caso tenha d√∫vidas, nossa equipe est√° dispon√≠vel para esclarecimentos.

Atenciosamente,
Equipe Velotax`;
                }
                
                resposta = respostaEspecifica;
            }
            
            res.json({
                success: true,
                result: resposta
            });
        } else {
            const errorData = await response.text();
            res.status(400).json({
                success: false,
                error: 'Erro na API OpenAI',
                details: errorData
            });
        }
    } catch (error) {
        console.error('Erro ao gerar resposta RA:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Rota para reformular texto de modera√ß√£o ap√≥s negativa
app.post('/api/reformulate-moderation', rateLimitMiddleware, async (req, res) => {
    try {
        const envVars = loadEnvFile();
        const apiKey = envVars.OPENAI_API_KEY;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o configurada ou inv√°lida'
            });
        }
        
        const { motivoNegativa, textoNegado } = req.body;
        
        if (!motivoNegativa || !textoNegado) {
            return res.status(400).json({
                success: false,
                error: 'Motivo da negativa e texto negado s√£o obrigat√≥rios'
            });
        }
        
        // Obter feedbacks relevantes para melhorar a reformula√ß√£o de modera√ß√£o
        const feedbacksRelevantes = getRelevantFeedbacks('moderacao', {
            motivoNegativa: motivoNegativa
        });
        
        let conhecimentoFeedback = '';
        if (feedbacksRelevantes.length > 0) {
            conhecimentoFeedback = '\n\nCONHECIMENTO BASEADO EM FEEDBACKS ANTERIORES DE MODERA√á√ÉO:\n';
            feedbacksRelevantes.forEach((fb, index) => {
                conhecimentoFeedback += `${index + 1}. Motivo negativa: "${fb.motivoNegativa}"\n`;
                conhecimentoFeedback += `   Texto reformulado: "${fb.textoReformulado.substring(0, 200)}..."\n\n`;
            });
            conhecimentoFeedback += 'Use este conhecimento para evitar erros similares e melhorar a qualidade da reformula√ß√£o de modera√ß√£o.\n';
        }
        
        const prompt = `
TAREFA: Reformular texto de modera√ß√£o negado pelo Reclame Aqui

DADOS DE ENTRADA:
- Motivo da negativa: ${motivoNegativa}
- Texto de modera√ß√£o negado: ${textoNegado}

INSTRU√á√ïES ESPECIALIZADAS:
Voc√™ √© um especialista em Reclame Aqui, com foco em reformula√ß√£o de textos de modera√ß√£o negados. Sua fun√ß√£o √© reformular textos de modera√ß√£o negados pelo RA, garantindo ader√™ncia total aos manuais oficiais de modera√ß√£o (Manual Geral, Manual de Reviews e Manual de Bancos/Institui√ß√µes Financeiras/Meios).

üîπ AN√ÅLISE OBRIGAT√ìRIA:
1. Identifique por que o RA negou (ex.: "Resposta n√£o condizente", "sem rela√ß√£o com os fatos", "tom inadequado")
2. Compare com os manuais de modera√ß√£o e detecte onde o texto falhou
3. Analise o texto negado e identifique os pontos problem√°ticos

üîπ REFORMULA√á√ÉO OBRIGAT√ìRIA:
1. Ajuste apenas o necess√°rio para alinhar ao motivo da negativa
2. Reforce com base no manual aplic√°vel (sempre citar)
3. Mantenha texto objetivo, t√©cnico e impessoal
4. Direcione sempre ao RA (n√£o ao consumidor)

üîπ ESTRUTURA PADR√ÉO OBRIGAT√ìRIA:
"Conforme o apontamento acima, solicitamos a modera√ß√£o desta publica√ß√£o [inserir motivo reformulado]. Tal situa√ß√£o est√° em desacordo com o [manual aplic√°vel]. Diante disso, solicitamos a exclus√£o/modera√ß√£o do conte√∫do."

üîπ REGRAS INQUEBR√ÅVEIS:
- N√£o inventar fatos
- Usar somente registros fornecidos + manuais
- Sempre citar manual aplic√°vel
- Texto deve ser curto, objetivo e t√©cnico
- Pedido sempre direcionado ao RA
- Manter tom impessoal e formal

üîπ MANUAIS APLIC√ÅVEIS:
- Manual Geral de Modera√ß√£o do RA
- Manual de Modera√ß√£o de Reviews do RA
- Manual de Modera√ß√£o ‚Äì Bancos, Institui√ß√µes Financeiras e Meios

Gere uma vers√£o reformulada que corrija especificamente o motivo da negativa, mantendo ader√™ncia total aos manuais oficiais.

${conhecimentoFeedback}

IMPORTANTE: Use o conhecimento dos feedbacks anteriores para evitar erros similares e melhorar a qualidade da reformula√ß√£o de modera√ß√£o.`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: envVars.OPENAI_MODEL || 'gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: 'Voc√™ √© um especialista em Reclame Aqui, com foco em reformula√ß√£o de textos de modera√ß√£o negados.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: parseFloat(envVars.OPENAI_TEMPERATURE) || 0.7,
                max_tokens: parseInt(envVars.OPENAI_MAX_TOKENS) || 2000
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            const textoReformulado = data.choices[0].message.content;
            
            // Salvar feedback para aprendizado futuro
            addModeracaoFeedback(textoNegado, motivoNegativa, textoReformulado);
            
            res.json({
                success: true,
                result: textoReformulado
            });
        } else {
            const errorData = await response.text();
            res.status(400).json({
                success: false,
                error: 'Erro na API OpenAI',
                details: errorData
            });
        }
    } catch (error) {
        console.error('Erro ao reformular modera√ß√£o:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Rota para reformular resposta RA via API OpenAI
app.post('/api/reformulate-response', rateLimitMiddleware, async (req, res) => {
    try {
        const envVars = loadEnvFile();
        const apiKey = envVars.OPENAI_API_KEY;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o configurada ou inv√°lida'
            });
        }
        
        const { dadosFormulario, respostaAnterior, feedback } = req.body;
        
        if (!dadosFormulario || !respostaAnterior) {
            return res.status(400).json({
                success: false,
                error: 'Dados do formul√°rio e resposta anterior s√£o obrigat√≥rios'
            });
        }
        
        // Log do tipo de opera√ß√£o
        if (feedback) {
            console.log('üîÑ GERANDO NOVA RESPOSTA (feedback recebido - resposta anterior estava incorreta)');
            console.log('üìù Feedback:', feedback.substring(0, 100) + '...');
        } else {
            console.log('üîÑ REFORMULANDO RESPOSTA (sem feedback)');
        }
        
        // Obter feedbacks relevantes para melhorar a reformula√ß√£o
        const feedbacksRelevantes = getRelevantFeedbacks('resposta', {
            tipoSituacao: dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao,
            motivoSolicitacao: dadosFormulario.motivo_solicitacao || dadosFormulario.motivoSolicitacao
        });
        
        let conhecimentoFeedback = '';
        if (feedbacksRelevantes.length > 0) {
            conhecimentoFeedback = '\n\nCONHECIMENTO BASEADO EM FEEDBACKS ANTERIORES:\n';
            feedbacksRelevantes.forEach((fb, index) => {
                conhecimentoFeedback += `${index + 1}. Feedback: "${fb.feedback}"\n`;
                conhecimentoFeedback += `   Resposta reformulada: "${fb.respostaReformulada.substring(0, 200)}..."\n\n`;
            });
            conhecimentoFeedback += 'Use este conhecimento para evitar erros similares e melhorar a qualidade da reformula√ß√£o.\n';
        }
        
        const prompt = `
TAREFA: ${feedback ? 'GERAR NOVA RESPOSTA' : 'REFORMULAR RESPOSTA'} do Reclame Aqui

DADOS DO CASO:
- Tipo de Situa√ß√£o: ${dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao}
- Motivo da Solicita√ß√£o: ${dadosFormulario.motivo_solicitacao || dadosFormulario.motivoSolicitacao}
- Solu√ß√£o Implementada: ${dadosFormulario.solucao_implementada || dadosFormulario.solucaoImplementada}
- Reclama√ß√£o do Cliente: ${dadosFormulario.texto_cliente || dadosFormulario.reclamacaoCliente}
- Hist√≥rico de Atendimento: ${dadosFormulario.historico_atendimento || dadosFormulario.historicoAtendimento}
- Observa√ß√µes Internas: ${dadosFormulario.observacoes_internas || dadosFormulario.observacoesInternas}

${feedback ? `
FEEDBACK DO OPERADOR (a resposta anterior estava incorreta):
${feedback}

INSTRU√á√ïES CR√çTICAS:
- A resposta anterior estava INCORRETA e n√£o deve ser usada como base
- GERE UMA NOVA RESPOSTA COMPLETA do zero
- Use APENAS os dados do caso acima como base
- Analise o feedback para entender o que estava errado
- Evite os erros identificados no feedback
- Foque na solu√ß√£o implementada e como ela resolve a solicita√ß√£o do cliente
- Seja espec√≠fico e conclusivo` : `
RESPOSTA ANTERIOR (para refer√™ncia):
${respostaAnterior}

INSTRU√á√ïES PARA REFORMULA√á√ÉO:
- Analise a resposta anterior e identifique pontos de melhoria
- Reformule para ser mais completa e eficaz
- Mantenha o tom profissional e emp√°tico
- Aborde todos os aspectos da reclama√ß√£o do cliente`}

${conhecimentoFeedback}

AN√ÅLISE OBRIGAT√ìRIA DE TODOS OS CAMPOS:

Voc√™ receber√° os seguintes campos que DEVEM ser analisados em conjunto:
- **Reclama√ß√£o do Cliente**: O que o cliente est√° solicitando/reclamando
- **Solu√ß√£o Implementada**: O que a empresa fez para resolver
- **Hist√≥rico de Atendimento**: Contexto de atendimentos anteriores
- **Observa√ß√µes Internas**: Informa√ß√µes adicionais da equipe
- **Tipo de Situa√ß√£o**: Categoria da solicita√ß√£o
- **Motivo da Solicita√ß√£o**: Raz√£o da solicita√ß√£o

SUA TAREFA √â:

1. **ANALISAR** a reclama√ß√£o do cliente para entender exatamente o que ele est√° pedindo
2. **CONSIDERAR** a solu√ß√£o implementada como base factual do que foi feito
3. **INTEGRAR** o hist√≥rico de atendimento e observa√ß√µes internas para contexto completo
4. **FORMULAR** uma resposta personalizada que responda diretamente √† solicita√ß√£o do cliente
5. **ALINHAR** a resposta com a solu√ß√£o implementada, explicando como ela resolve a solicita√ß√£o

REGRAS OBRIGAT√ìRIAS:

- **NUNCA** copie literalmente o texto da "Solu√ß√£o implementada"
- **SEMPRE** formule uma resposta que responda diretamente √† reclama√ß√£o do cliente
- **SEMPRE** explique como a solu√ß√£o implementada resolve a solicita√ß√£o do cliente
- **SEMPRE** use linguagem cordial, objetiva e emp√°tica
- **SEMPRE** contextualize com refer√™ncias legais quando aplic√°vel (LGPD, CCB, etc.)
- **SEMPRE** deixe o texto pronto para publica√ß√£o no Reclame Aqui

IMPORTANTE: Use o conhecimento dos feedbacks anteriores para evitar erros similares e melhorar a qualidade da resposta.

DIRETRIZES GERAIS:
1. TOM E ESTILO:
- Profissional, respeitoso e emp√°tico
- Linguagem clara e acess√≠vel
- Tom conciliador e solucionador
- Evite jarg√µes t√©cnicos desnecess√°rios

2. ESTRUTURA DA RESPOSTA:
a) Agradecimento e reconhecimento
b) Esclarecimento da situa√ß√£o
c) Solu√ß√£o apresentada/implementada
d) Compromisso de melhoria
e) Convite para contato direto

3. DIRETRIZES:
- Sempre reconhe√ßa o problema do cliente
- Explique as a√ß√µes tomadas de forma clara
- Demonstre compromisso com a satisfa√ß√£o
- Mantenha tom profissional e respeitoso
- Evite repeti√ß√µes desnecess√°rias
- Seja espec√≠fico e detalhado

Gere uma resposta reformulada que seja mais completa, eficaz e atenda aos pontos levantados no feedback.`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: envVars.OPENAI_MODEL || 'gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: 'Voc√™ √© um assistente especializado em atendimento ao cliente para a empresa Velotax, com foco em reformula√ß√£o de respostas do Reclame Aqui.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: parseFloat(envVars.OPENAI_TEMPERATURE) || 0.7,
                max_tokens: parseInt(envVars.OPENAI_MAX_TOKENS) || 2000
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            const respostaReformulada = data.choices[0].message.content;
            
            // Aplicar feedback diretamente no script de formula√ß√£o para aprendizado imediato
            if (feedback) {
                console.log('üìù Aplicando feedback diretamente no script de formula√ß√£o para aprendizado imediato');
                addFeedbackAprendizado(
                    dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao,
                    feedback,
                    respostaReformulada
                );
            }
            
            res.json({
                success: true,
                result: respostaReformulada
            });
        } else {
            const errorData = await response.text();
            res.status(400).json({
                success: false,
                error: 'Erro na API OpenAI',
                details: errorData
            });
        }
    } catch (error) {
        console.error('Erro ao reformular resposta RA:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Rota para obter configura√ß√µes do arquivo .env (apenas se chave for v√°lida)
app.post('/api/config/secure', rateLimitMiddleware, (req, res) => {
    try {
        const { apiKey } = req.body;
        
        if (!validateApiKey(apiKey)) {
            return res.status(401).json({
                success: false,
                error: 'Acesso negado',
                message: 'Chave da API inv√°lida'
            });
        }
        
        const envVars = loadEnvFile();
        
        // Verificar se a chave fornecida corresponde √† do arquivo .env
        const envApiKey = envVars.OPENAI_API_KEY;
        if (envApiKey && apiKey !== envApiKey) {
            return res.status(401).json({
                success: false,
                error: 'Acesso negado',
                message: 'Chave da API n√£o corresponde √† configura√ß√£o'
            });
        }
        
        // Retornar configura√ß√µes completas (sem a chave da API)
        const secureConfig = { ...envVars };
        delete secureConfig.OPENAI_API_KEY;
        delete secureConfig.ENCRYPTION_KEY;
        
        res.json({
            success: true,
            config: secureConfig,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('Erro ao obter configura√ß√µes seguras:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Rota para servir arquivos est√°ticos
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Middleware de tratamento de erros
app.use((err, req, res, next) => {
    console.error('Erro no servidor:', err);
    res.status(500).json({
        success: false,
        error: 'Erro interno do servidor',
        message: 'Algo deu errado. Tente novamente.'
    });
});

// Endpoint para visualizar feedbacks de respostas (aba Respostas RA)
app.get('/api/feedbacks/respostas', (req, res) => {
    try {
        const feedbacks = loadFeedbacksRespostas();
        res.json({
            success: true,
            data: feedbacks,
            tipo: 'respostas'
        });
    } catch (error) {
        console.error('Erro ao carregar feedbacks de respostas:', error);
        res.status(500).json({
        success: false,
            error: 'Erro ao carregar feedbacks de respostas'
        });
    }
});

// Endpoint para visualizar feedbacks de modera√ß√µes (aba Modera√ß√£o RA)
app.get('/api/feedbacks/moderacoes', (req, res) => {
    try {
        const feedbacks = loadFeedbacksModeracoes();
        res.json({
            success: true,
            data: feedbacks,
            tipo: 'moderacoes'
        });
    } catch (error) {
        console.error('Erro ao carregar feedbacks de modera√ß√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar feedbacks de modera√ß√µes'
        });
    }
});

// Endpoint para visualizar feedbacks de explica√ß√µes (aba Explica√ß√µes)
app.get('/api/feedbacks/explicacoes', (req, res) => {
    try {
        const feedbacks = loadFeedbacksExplicacoes();
        res.json({
            success: true,
            data: feedbacks,
            tipo: 'explicacoes'
        });
    } catch (error) {
        console.error('Erro ao carregar feedbacks de explica√ß√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar feedbacks de explica√ß√µes'
        });
    }
});

// Endpoint para visualizar aprendizado direto do script
app.get('/api/aprendizado-script', (req, res) => {
    try {
        const aprendizado = loadAprendizadoScript();
        res.json({
            success: true,
            data: aprendizado,
            tipo: 'aprendizado_script'
        });
    } catch (error) {
        console.error('Erro ao carregar aprendizado do script:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar aprendizado do script'
        });
    }
});

// Endpoint para visualizar aprendizado de um tipo espec√≠fico
app.get('/api/aprendizado-script/:tipoSituacao', (req, res) => {
    try {
        const { tipoSituacao } = req.params;
        const aprendizado = getAprendizadoTipoSituacao(tipoSituacao);
        res.json({
            success: true,
            data: aprendizado,
            tipoSituacao: tipoSituacao
        });
    } catch (error) {
        console.error('Erro ao carregar aprendizado do tipo:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar aprendizado do tipo'
        });
    }
});

// Endpoint para for√ßar processamento de padr√µes
app.post('/api/processar-padroes/:tipoSituacao', (req, res) => {
    try {
        const { tipoSituacao } = req.params;
        console.log('üîÑ For√ßando processamento de padr√µes para:', tipoSituacao);
        processarPadroesExistentes(tipoSituacao);
        const aprendizado = getAprendizadoTipoSituacao(tipoSituacao);
        res.json({
            success: true,
            message: 'Padr√µes processados com sucesso',
            data: aprendizado
        });
    } catch (error) {
        console.error('Erro ao processar padr√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao processar padr√µes'
        });
    }
});

// Endpoint para verificar status do aprendizado
app.get('/api/status-aprendizado/:tipoSituacao', (req, res) => {
    try {
        const { tipoSituacao } = req.params;
        const aprendizado = getAprendizadoTipoSituacao(tipoSituacao);
        res.json({
            success: true,
            tipoSituacao: tipoSituacao,
            status: {
                feedbacks: aprendizado.feedbacks.length,
                respostasCoerentes: aprendizado.respostasCoerentes.length,
                padroesIdentificados: aprendizado.padroesIdentificados.length,
                clausulasUsadas: aprendizado.clausulasUsadas.length
            },
            data: aprendizado
        });
    } catch (error) {
        console.error('Erro ao verificar status do aprendizado:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao verificar status do aprendizado'
        });
    }
});

// Endpoint para visualizar todos os feedbacks (compatibilidade)
app.get('/api/feedbacks', (req, res) => {
    try {
        const feedbacks = loadFeedbacks();
        res.json({
            success: true,
            data: feedbacks,
            tipo: 'todos'
        });
    } catch (error) {
        console.error('Erro ao carregar feedbacks:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar feedbacks'
        });
    }
});

// Endpoint para limpar feedbacks de respostas (aba Respostas RA)
app.delete('/api/feedbacks/respostas', (req, res) => {
    try {
        const feedbacksVazios = {
            respostas: [],
            lastUpdated: new Date().toISOString()
        };
        saveFeedbacksRespostas(feedbacksVazios);
        res.json({
            success: true,
            message: 'Feedbacks de respostas limpos com sucesso'
        });
    } catch (error) {
        console.error('Erro ao limpar feedbacks de respostas:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao limpar feedbacks de respostas'
        });
    }
});

// Endpoint para limpar feedbacks de modera√ß√µes (aba Modera√ß√£o RA)
app.delete('/api/feedbacks/moderacoes', (req, res) => {
    try {
        const feedbacksVazios = {
            moderacoes: [],
            lastUpdated: new Date().toISOString()
        };
        saveFeedbacksModeracoes(feedbacksVazios);
        res.json({
            success: true,
            message: 'Feedbacks de modera√ß√µes limpos com sucesso'
        });
    } catch (error) {
        console.error('Erro ao limpar feedbacks de modera√ß√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao limpar feedbacks de modera√ß√µes'
        });
    }
});

// Endpoint para limpar feedbacks de explica√ß√µes (aba Explica√ß√µes)
app.delete('/api/feedbacks/explicacoes', (req, res) => {
    try {
        const feedbacksVazios = {
            explicacoes: [],
            lastUpdated: new Date().toISOString()
        };
        saveFeedbacksExplicacoes(feedbacksVazios);
        res.json({
            success: true,
            message: 'Feedbacks de explica√ß√µes limpos com sucesso'
        });
    } catch (error) {
        console.error('Erro ao limpar feedbacks de explica√ß√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao limpar feedbacks de explica√ß√µes'
        });
    }
});

// Endpoint para limpar todos os feedbacks (compatibilidade)
app.delete('/api/feedbacks', (req, res) => {
    try {
        const feedbacksVazios = {
            respostas: [],
            moderacoes: [],
            lastUpdated: new Date().toISOString()
        };
        saveFeedbacks(feedbacksVazios);
        res.json({
            success: true,
            message: 'Todos os feedbacks limpos com sucesso'
        });
    } catch (error) {
        console.error('Erro ao limpar feedbacks:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao limpar feedbacks'
        });
    }
});

// Endpoint para salvar resposta como modelo (quando clicar em "Resposta Coerente")
app.post('/api/save-modelo-resposta', (req, res) => {
    console.log('üéØ Endpoint /api/save-modelo-resposta chamado');
    try {
        const { dadosFormulario, respostaAprovada } = req.body;
        
        if (!dadosFormulario || !respostaAprovada) {
            return res.status(400).json({
                success: false,
                error: 'Dados do formul√°rio e resposta aprovada s√£o obrigat√≥rios'
            });
        }
        
        console.log('üíæ Salvando resposta como modelo:', {
            tipo_situacao: dadosFormulario.tipo_solicitacao,
            motivo_solicitacao: dadosFormulario.motivo_solicitacao,
            resposta_length: respostaAprovada.length
        });
        
        // Salvar como modelo
        const modelo = addModeloResposta(dadosFormulario, respostaAprovada);
        
        res.json({
            success: true,
            message: 'Resposta salva como modelo para futuras solicita√ß√µes similares',
            modeloId: modelo.id,
            tipoSituacao: modelo.tipo_situacao
        });
        
    } catch (error) {
        console.error('Erro ao salvar modelo de resposta:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Endpoint para gerar explica√ß√µes baseadas em feedbacks (sem API OpenAI)
app.post('/api/generate-explanation', (req, res) => {
    try {
        const { tema } = req.body;
        
        if (!tema) {
            return res.status(400).json({
                success: false,
                error: 'Tema n√£o fornecido'
            });
        }
        
        // Obter feedbacks relevantes para o tema (APENAS feedbacks de respostas)
        const feedbacks = loadFeedbacksRespostas();
        const explicacao = gerarExplicacaoBaseadaEmFeedbacks(tema, feedbacks);
        
        res.json({
            success: true,
            result: explicacao,
            baseadaEmFeedbacks: true,
            totalFeedbacks: feedbacks.respostas.length + feedbacks.moderacoes.length
        });
        
    } catch (error) {
        console.error('Erro ao gerar explica√ß√£o:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Middleware para rotas n√£o encontradas
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Rota n√£o encontrada',
        message: 'A rota solicitada n√£o existe'
    });
});

// ===== INICIALIZA√á√ÉO DO SERVIDOR =====

app.listen(PORT, () => {
    console.log('üöÄ Servidor Velotax Bot iniciado!');
    console.log(`üì° Porta: ${PORT}`);
    console.log(`üåê URL: http://localhost:${PORT}`);
    console.log('üîê Sistema de seguran√ßa ativo');
    console.log('üìÅ Arquivo .env carregado da raiz do projeto');
    console.log('üß† Sistema de aprendizado baseado em feedback ativo');
    
    // Verificar se arquivo .env existe
    const envPath = path.join(__dirname, '.env');
    if (fs.existsSync(envPath)) {
        console.log('‚úÖ Arquivo .env encontrado na raiz');
    } else {
        console.warn('‚ö†Ô∏è Arquivo .env n√£o encontrado na raiz');
    }
    
    // Verificar sistema de feedbacks
    const feedbacks = loadFeedbacks();
    console.log(`üìö ${feedbacks.respostas.length} feedbacks de respostas salvos`);
    console.log(`üìö ${feedbacks.moderacoes.length} feedbacks de modera√ß√£o salvos`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë Encerrando servidor...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë Encerrando servidor...');
    process.exit(0);
});

module.exports = app;

