// ===== SERVIDOR BACKEND SEGURO - VELOTAX BOT =====

const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const crypto = require('crypto');

// ===== INTEGRA√á√ÉO COM GOOGLE SHEETS =====
const googleSheetsIntegration = require('./google-sheets-integration');

const app = express();
const PORT = process.env.PORT || 3001;

// ===== SISTEMA DE APRENDIZADO BASEADO EM FEEDBACK SEPARADO POR ABA =====
// ===== FUN√á√ïES UTILIT√ÅRIAS PARA DATAS =====

// Fun√ß√£o para formatar data no padr√£o brasileiro (DD/MM/AAAA HH:MM:SS)
function formatarDataBrasil(data = new Date()) {
    const dataBrasil = new Date(data.toLocaleString("en-US", {timeZone: "America/Sao_Paulo"}));
    
    const dia = String(dataBrasil.getDate()).padStart(2, '0');
    const mes = String(dataBrasil.getMonth() + 1).padStart(2, '0');
    const ano = dataBrasil.getFullYear();
    const horas = String(dataBrasil.getHours()).padStart(2, '0');
    const minutos = String(dataBrasil.getMinutes()).padStart(2, '0');
    const segundos = String(dataBrasil.getSeconds()).padStart(2, '0');
    
    return `${dia}/${mes}/${ano} ${horas}:${minutos}:${segundos}`;
}

// Fun√ß√£o para obter timestamp no formato brasileiro
function obterTimestampBrasil() {
    return formatarDataBrasil();
}

// ===== SISTEMA DE VERIFICA√á√ÉO AUTOM√ÅTICA DE FEEDBACKS =====

// Verificar feedbacks duplicados ou similares
function verificarFeedbacksDuplicados() {
    console.log('üîç Verificando feedbacks duplicados...');
    const feedbacks = loadFeedbacks();
    const duplicados = [];
    
    for (let i = 0; i < feedbacks.respostas.length; i++) {
        for (let j = i + 1; j < feedbacks.respostas.length; j++) {
            const feedback1 = feedbacks.respostas[i];
            const feedback2 = feedbacks.respostas[j];
            
            // Verificar similaridade no feedback
            if (feedback1.feedback && feedback2.feedback) {
                const similaridade = calcularSimilaridade(feedback1.feedback, feedback2.feedback);
                if (similaridade > 0.8) {
                    duplicados.push({
                        id1: feedback1.id,
                        id2: feedback2.id,
                        similaridade: similaridade,
                        feedback1: feedback1.feedback.substring(0, 100) + '...',
                        feedback2: feedback2.feedback.substring(0, 100) + '...'
                    });
                }
            }
        }
    }
    
    if (duplicados.length > 0) {
        console.log(`‚ö†Ô∏è Encontrados ${duplicados.length} feedbacks potencialmente duplicados`);
        duplicados.forEach(dup => {
            console.log(`   Similaridade: ${(dup.similaridade * 100).toFixed(1)}% entre IDs ${dup.id1} e ${dup.id2}`);
        });
    } else {
        console.log('‚úÖ Nenhum feedback duplicado encontrado');
    }
    
    return duplicados;
}

// Calcular similaridade entre dois textos
function calcularSimilaridade(texto1, texto2) {
    const palavras1 = texto1.toLowerCase().split(/\s+/);
    const palavras2 = texto2.toLowerCase().split(/\s+/);
    
    const set1 = new Set(palavras1);
    const set2 = new Set(palavras2);
    
    const interseccao = new Set([...set1].filter(x => set2.has(x)));
    const uniao = new Set([...set1, ...set2]);
    
    return interseccao.size / uniao.size;
}

// Validar qualidade dos feedbacks
function validarQualidadeFeedbacks() {
    console.log('üìä Validando qualidade dos feedbacks...');
    const feedbacks = loadFeedbacks();
    const relatorio = {
        total: feedbacks.respostas.length,
        validos: 0,
        invalidos: 0,
        problemas: []
    };
    
    feedbacks.respostas.forEach(feedback => {
        const problemas = [];
        
        // Verificar se tem feedback
        if (!feedback.feedback || feedback.feedback.trim().length < 10) {
            problemas.push('Feedback muito curto ou vazio');
        }
        
        // Verificar se tem resposta reformulada
        if (!feedback.respostaReformulada || feedback.respostaReformulada.trim().length < 50) {
            problemas.push('Resposta reformulada muito curta ou vazia');
        }
        
        // Verificar se tem dados do formul√°rio
        if (!feedback.dadosFormulario) {
            problemas.push('Dados do formul√°rio ausentes');
        }
        
        // Verificar se tem tipo de solicita√ß√£o
        if (!feedback.dadosFormulario?.tipo_solicitacao) {
            problemas.push('Tipo de solicita√ß√£o ausente');
        }
        
        if (problemas.length === 0) {
            relatorio.validos++;
        } else {
            relatorio.invalidos++;
            relatorio.problemas.push({
                id: feedback.id,
                problemas: problemas
            });
        }
    });
    
    console.log(`‚úÖ Feedbacks v√°lidos: ${relatorio.validos}`);
    console.log(`‚ùå Feedbacks inv√°lidos: ${relatorio.invalidos}`);
    
    if (relatorio.problemas.length > 0) {
        console.log('‚ö†Ô∏è Problemas encontrados:');
        relatorio.problemas.forEach(prob => {
            console.log(`   ID ${prob.id}: ${prob.problemas.join(', ')}`);
        });
    }
    
    return relatorio;
}

// Sistema de pontua√ß√£o de feedbacks
function pontuarFeedbacks() {
    console.log('‚≠ê Calculando pontua√ß√£o dos feedbacks...');
    const feedbacks = loadFeedbacks();
    const feedbacksPontuados = [];
    
    feedbacks.respostas.forEach(feedback => {
        let pontuacao = 0;
        const criterios = [];
        
        // Crit√©rio 1: Completude do feedback (0-30 pontos)
        if (feedback.feedback && feedback.feedback.length > 50) {
            pontuacao += 30;
            criterios.push('Feedback completo (+30)');
        } else if (feedback.feedback && feedback.feedback.length > 20) {
            pontuacao += 15;
            criterios.push('Feedback parcial (+15)');
        }
        
        // Crit√©rio 2: Qualidade da resposta reformulada (0-25 pontos)
        if (feedback.respostaReformulada && feedback.respostaReformulada.length > 100) {
            pontuacao += 25;
            criterios.push('Resposta reformulada completa (+25)');
        } else if (feedback.respostaReformulada && feedback.respostaReformulada.length > 50) {
            pontuacao += 12;
            criterios.push('Resposta reformulada parcial (+12)');
        }
        
        // Crit√©rio 3: Dados do formul√°rio completos (0-20 pontos)
        if (feedback.dadosFormulario?.tipo_solicitacao && feedback.dadosFormulario?.motivo_solicitacao) {
            pontuacao += 20;
            criterios.push('Dados do formul√°rio completos (+20)');
        } else if (feedback.dadosFormulario?.tipo_solicitacao) {
            pontuacao += 10;
            criterios.push('Dados do formul√°rio parciais (+10)');
        }
        
        // Crit√©rio 4: Contexto adicional (0-15 pontos)
        if (feedback.contexto && Object.keys(feedback.contexto).length > 0) {
            pontuacao += 15;
            criterios.push('Contexto adicional (+15)');
        }
        
        // Crit√©rio 5: Timestamp recente (0-10 pontos)
        const dataFeedback = new Date(feedback.timestamp);
        const agora = new Date();
        const diasDiferenca = (agora - dataFeedback) / (1000 * 60 * 60 * 24);
        
        if (diasDiferenca < 7) {
            pontuacao += 10;
            criterios.push('Feedback recente (+10)');
        } else if (diasDiferenca < 30) {
            pontuacao += 5;
            criterios.push('Feedback moderadamente recente (+5)');
        }
        
        feedbacksPontuados.push({
            id: feedback.id,
            pontuacao: pontuacao,
            criterios: criterios,
            timestamp: feedback.timestamp
        });
    });
    
    // Ordenar por pontua√ß√£o
    feedbacksPontuados.sort((a, b) => b.pontuacao - a.pontuacao);
    
    console.log('üèÜ Top 5 feedbacks com maior pontua√ß√£o:');
    feedbacksPontuados.slice(0, 5).forEach((fb, index) => {
        console.log(`   ${index + 1}. ID ${fb.id}: ${fb.pontuacao} pontos`);
        fb.criterios.forEach(criterio => console.log(`      - ${criterio}`));
    });
    
    return feedbacksPontuados;
}

// Detectar padr√µes de feedback
function detectarPadroesFeedback() {
    console.log('üîç Detectando padr√µes nos feedbacks...');
    const feedbacks = loadFeedbacks();
    const padroes = {
        problemasComuns: {},
        tiposSolicitacao: {},
        palavrasChave: {},
        tendencias: {}
    };
    
    feedbacks.respostas.forEach(feedback => {
        // Analisar problemas identificados
        if (feedback.feedback) {
            const problemas = feedback.feedback.match(/informacoes-incorretas|nao-condiz-solucao|falta-clareza|nao-empatico|tom-inadequado/g);
            if (problemas) {
                problemas.forEach(problema => {
                    padroes.problemasComuns[problema] = (padroes.problemasComuns[problema] || 0) + 1;
                });
            }
        }
        
        // Analisar tipos de solicita√ß√£o
        if (feedback.dadosFormulario?.tipo_solicitacao) {
            const tipo = feedback.dadosFormulario.tipo_solicitacao;
            padroes.tiposSolicitacao[tipo] = (padroes.tiposSolicitacao[tipo] || 0) + 1;
        }
        
        // Analisar palavras-chave
        if (feedback.feedback) {
            const palavras = feedback.feedback.toLowerCase().split(/\s+/);
            palavras.forEach(palavra => {
                if (palavra.length > 4) {
                    padroes.palavrasChave[palavra] = (padroes.palavrasChave[palavra] || 0) + 1;
                }
            });
        }
    });
    
    // Ordenar e mostrar resultados
    console.log('üìà Problemas mais comuns:');
    Object.entries(padroes.problemasComuns)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .forEach(([problema, count]) => {
            console.log(`   ${problema}: ${count} ocorr√™ncias`);
        });
    
    console.log('üìã Tipos de solicita√ß√£o mais frequentes:');
    Object.entries(padroes.tiposSolicitacao)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .forEach(([tipo, count]) => {
            console.log(`   ${tipo}: ${count} ocorr√™ncias`);
        });
    
    return padroes;
}

// Verificar qualidade de um feedback individual
function verificarQualidadeFeedbackIndividual(feedback) {
    let pontuacao = 0;
    const problemas = [];
    
    // Crit√©rio 1: Completude do feedback (0-30 pontos)
    if (feedback.feedback && feedback.feedback.length > 50) {
        pontuacao += 30;
    } else if (feedback.feedback && feedback.feedback.length > 20) {
        pontuacao += 15;
    } else {
        problemas.push('Feedback muito curto ou vazio');
    }
    
    // Crit√©rio 2: Qualidade da resposta reformulada (0-25 pontos)
    if (feedback.respostaReformulada && feedback.respostaReformulada.length > 100) {
        pontuacao += 25;
    } else if (feedback.respostaReformulada && feedback.respostaReformulada.length > 50) {
        pontuacao += 12;
    } else {
        problemas.push('Resposta reformulada muito curta ou vazia');
    }
    
    // Crit√©rio 3: Contexto adicional (0-15 pontos)
    if (feedback.contexto && Object.keys(feedback.contexto).length > 0) {
        pontuacao += 15;
    }
    
    // Crit√©rio 4: Timestamp recente (0-10 pontos)
    const dataFeedback = new Date(feedback.timestamp);
    const agora = new Date();
    const diasDiferenca = (agora - dataFeedback) / (1000 * 60 * 60 * 24);
    
    if (diasDiferenca < 7) {
        pontuacao += 10;
    } else if (diasDiferenca < 30) {
        pontuacao += 5;
    }
    
    return {
        pontuacao: pontuacao,
        problemas: problemas,
        nivel: pontuacao >= 70 ? 'alta' : pontuacao >= 40 ? 'media' : 'baixa'
    };
}

// Executar verifica√ß√£o completa do sistema
function executarVerificacaoCompletaFeedbacks() {
    console.log('üöÄ Iniciando verifica√ß√£o completa do sistema de feedbacks...');
    console.log('=' .repeat(60));
    
    const resultados = {
        duplicados: verificarFeedbacksDuplicados(),
        qualidade: validarQualidadeFeedbacks(),
        pontuacao: pontuarFeedbacks(),
        padroes: detectarPadroesFeedback(),
        timestamp: new Date().toISOString()
    };
    
    console.log('=' .repeat(60));
    console.log('‚úÖ Verifica√ß√£o completa finalizada!');
    
    return resultados;
}

// Arquivos separados para cada tipo de feedback
const FEEDBACKS_RESPOSTAS_FILE = path.join(__dirname, 'data', 'feedbacks_respostas.json');
const FEEDBACKS_MODERACOES_FILE = path.join(__dirname, 'data', 'feedbacks_moderacoes.json');
const FEEDBACKS_EXPLICACOES_FILE = path.join(__dirname, 'data', 'feedbacks_explicacoes.json');

// Arquivo para modelos de respostas aprovadas
const MODELOS_RESPOSTAS_FILE = path.join(__dirname, 'data', 'modelos_respostas.json');

// Arquivo para modelos de modera√ß√µes aprovadas (pasta espec√≠fica)
const MODELOS_MODERACOES_FILE = path.join(__dirname, 'data', 'moderacao_coerente', 'modelos_moderacoes.json');
const ESTATISTICAS_GLOBAIS_FILE = path.join(__dirname, 'data', 'estatisticas_globais.json');

// Arquivo para aprendizado direto no script de formula√ß√£o
const APRENDIZADO_SCRIPT_FILE = path.join(__dirname, 'data', 'aprendizado_script.json');

// Garantir que os diret√≥rios data existem
const dataDir = path.join(__dirname, 'data');
if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
}

// Garantir que o diret√≥rio moderacao_coerente existe
const moderacaoCoerenteDir = path.join(__dirname, 'data', 'moderacao_coerente');
if (!fs.existsSync(moderacaoCoerenteDir)) {
    fs.mkdirSync(moderacaoCoerenteDir, { recursive: true });
}

// ===== FUN√á√ïES PARA FEEDBACKS DE RESPOSTAS RA =====

// Carregar feedbacks de respostas
function loadFeedbacksRespostas() {
    // Verificar se estamos no Vercel e temos dados em mem√≥ria
    if ((process.env.VERCEL || process.env.NODE_ENV === 'production') && feedbacksRespostasMemoria) {
        console.log('üåê Vercel detectado - carregando feedbacks de respostas da mem√≥ria');
        return feedbacksRespostasMemoria;
    }
    
    try {
        if (fs.existsSync(FEEDBACKS_RESPOSTAS_FILE)) {
            const data = fs.readFileSync(FEEDBACKS_RESPOSTAS_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar feedbacks de respostas:', error);
    }
    return {
        respostas: [],
        lastUpdated: obterTimestampBrasil()
    };
}

// Salvar feedbacks de respostas
function saveFeedbacksRespostas(feedbacks) {
    try {
        feedbacks.lastUpdated = obterTimestampBrasil();
        
        // Verificar se estamos no Vercel (sistema de arquivos somente leitura)
        if (process.env.VERCEL || process.env.NODE_ENV === 'production') {
            console.log('üåê Vercel detectado - salvando feedbacks de respostas em mem√≥ria');
            feedbacksRespostasMemoria = feedbacks;
            console.log('‚úÖ Feedbacks de respostas salvos em mem√≥ria');
            
            // Registrar no Google Sheets se ativo (TEMPORARIAMENTE DESABILITADO)
            // if (googleSheetsIntegration && googleSheetsIntegration.isActive()) {
            //     try {
            //         googleSheetsIntegration.registrarFeedback(feedbackData);
            //     } catch (error) {
            //         console.error('‚ùå Erro ao registrar feedback no Google Sheets:', error.message);
            //     }
            // }
            return;
        }
        
        // Desenvolvimento local - usar sistema de arquivos
        fs.writeFileSync(FEEDBACKS_RESPOSTAS_FILE, JSON.stringify(feedbacks, null, 2));
        console.log('‚úÖ Feedbacks de respostas salvos no arquivo');
        
        // Registrar no Google Sheets se ativo (TEMPORARIAMENTE DESABILITADO)
        // if (googleSheetsIntegration && googleSheetsIntegration.isActive()) {
        //     try {
        //         googleSheetsIntegration.registrarRespostaCoerente(respostaData);
        //     } catch (error) {
        //         console.error('‚ùå Erro ao registrar resposta coerente no Google Sheets:', error.message);
        //     }
        // }
    } catch (error) {
        console.error('‚ùå Erro ao salvar feedbacks de respostas:', error);
        
        // Fallback para mem√≥ria se arquivo falhar
        if (!process.env.VERCEL) {
            console.log('üîÑ Fallback para mem√≥ria devido ao erro de arquivo');
            feedbacksRespostasMemoria = feedbacks;
        }
    }
}

// ===== FUN√á√ïES PARA FEEDBACKS DE MODERA√á√ïES RA =====

// Carregar feedbacks de modera√ß√µes
function loadFeedbacksModeracoes() {
    // Verificar se estamos no Vercel e temos dados em mem√≥ria
    if ((process.env.VERCEL || process.env.NODE_ENV === 'production') && feedbacksModeracoesMemoria) {
        console.log('üåê Vercel detectado - carregando feedbacks de modera√ß√µes da mem√≥ria');
        return feedbacksModeracoesMemoria;
    }
    
    try {
        if (fs.existsSync(FEEDBACKS_MODERACOES_FILE)) {
            const data = fs.readFileSync(FEEDBACKS_MODERACOES_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar feedbacks de modera√ß√µes:', error);
    }
    return {
        moderacoes: [],
        lastUpdated: obterTimestampBrasil()
    };
}

// Salvar feedbacks de modera√ß√µes
function saveFeedbacksModeracoes(feedbacks) {
    try {
        feedbacks.lastUpdated = obterTimestampBrasil();
        
        // Verificar se estamos no Vercel (sistema de arquivos somente leitura)
        if (process.env.VERCEL || process.env.NODE_ENV === 'production') {
            console.log('üåê Vercel detectado - salvando feedbacks de modera√ß√µes em mem√≥ria');
            feedbacksModeracoesMemoria = feedbacks;
            console.log('‚úÖ Feedbacks de modera√ß√µes salvos em mem√≥ria');
            
            // Registrar no Google Sheets se ativo (TEMPORARIAMENTE DESABILITADO)
            // if (googleSheetsIntegration && googleSheetsIntegration.isActive()) {
            //     try {
            //         googleSheetsIntegration.registrarFeedback(feedbackData);
            //     } catch (error) {
            //         console.error('‚ùå Erro ao registrar feedback no Google Sheets:', error.message);
            //     }
            // }
            return;
        }
        
        // Desenvolvimento local - usar sistema de arquivos
        fs.writeFileSync(FEEDBACKS_MODERACOES_FILE, JSON.stringify(feedbacks, null, 2));
        console.log('‚úÖ Feedbacks de modera√ß√µes salvos no arquivo');
        
        // Registrar no Google Sheets se ativo (TEMPORARIAMENTE DESABILITADO)
        // if (googleSheetsIntegration && googleSheetsIntegration.isActive()) {
        //     try {
        //         googleSheetsIntegration.registrarRespostaCoerente(respostaData);
        //     } catch (error) {
        //         console.error('‚ùå Erro ao registrar resposta coerente no Google Sheets:', error.message);
        //     }
        // }
    } catch (error) {
        console.error('‚ùå Erro ao salvar feedbacks de modera√ß√µes:', error);
        
        // Fallback para mem√≥ria se arquivo falhar
        if (!process.env.VERCEL) {
            console.log('üîÑ Fallback para mem√≥ria devido ao erro de arquivo');
            feedbacksModeracoesMemoria = feedbacks;
        }
    }
}

// ===== FUN√á√ïES PARA FEEDBACKS DE EXPLICA√á√ïES =====

// Carregar feedbacks de explica√ß√µes
function loadFeedbacksExplicacoes() {
    // Verificar se estamos no Vercel e temos dados em mem√≥ria
    if ((process.env.VERCEL || process.env.NODE_ENV === 'production') && feedbacksExplicacoesMemoria) {
        console.log('üåê Vercel detectado - carregando feedbacks de explica√ß√µes da mem√≥ria');
        return feedbacksExplicacoesMemoria;
    }
    
    try {
        if (fs.existsSync(FEEDBACKS_EXPLICACOES_FILE)) {
            const data = fs.readFileSync(FEEDBACKS_EXPLICACOES_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar feedbacks de explica√ß√µes:', error);
    }
    return {
        explicacoes: [],
        lastUpdated: obterTimestampBrasil()
    };
}

// Salvar feedbacks de explica√ß√µes
function saveFeedbacksExplicacoes(feedbacks) {
    try {
        feedbacks.lastUpdated = obterTimestampBrasil();
        
        // Verificar se estamos no Vercel (sistema de arquivos somente leitura)
        if (process.env.VERCEL || process.env.NODE_ENV === 'production') {
            console.log('üåê Vercel detectado - salvando feedbacks de explica√ß√µes em mem√≥ria');
            feedbacksExplicacoesMemoria = feedbacks;
            console.log('‚úÖ Feedbacks de explica√ß√µes salvos em mem√≥ria');
            return;
        }
        
        // Desenvolvimento local - usar sistema de arquivos
        fs.writeFileSync(FEEDBACKS_EXPLICACOES_FILE, JSON.stringify(feedbacks, null, 2));
        console.log('‚úÖ Feedbacks de explica√ß√µes salvos no arquivo');
    } catch (error) {
        console.error('‚ùå Erro ao salvar feedbacks de explica√ß√µes:', error);
        
        // Fallback para mem√≥ria se arquivo falhar
        if (!process.env.VERCEL) {
            console.log('üîÑ Fallback para mem√≥ria devido ao erro de arquivo');
            feedbacksExplicacoesMemoria = feedbacks;
        }
    }
}

// ===== FUN√á√ïES PARA ESTAT√çSTICAS GLOBAIS =====

// Carregar estat√≠sticas globais
function loadEstatisticasGlobais() {
    // Verificar se estamos no Vercel e temos dados em mem√≥ria
    if ((process.env.VERCEL || process.env.NODE_ENV === 'production') && estatisticasGlobaisMemoria) {
        console.log('üåê Vercel detectado - carregando estat√≠sticas da mem√≥ria');
        return estatisticasGlobaisMemoria;
    }
    
    try {
        if (fs.existsSync(ESTATISTICAS_GLOBAIS_FILE)) {
            const data = fs.readFileSync(ESTATISTICAS_GLOBAIS_FILE, 'utf8');
            
            if (!data.trim()) {
                console.log('Arquivo estatisticas_globais.json est√° vazio, criando estrutura padr√£o');
                const estruturaPadrao = {
                    estatisticas: {
                        respostas_geradas: 0,
                        respostas_coerentes: 0,
                        moderacoes_geradas: 0,
                        moderacoes_coerentes: 0,
                        revisoes_texto: 0,
                        explicacoes_geradas: 0
                    },
                    historico_diario: [],
                    lastUpdated: obterTimestampBrasil(),
                    descricao: "Estat√≠sticas globais do sistema Velotax Bot - compartilhadas entre todos os usu√°rios"
                };
                saveEstatisticasGlobais(estruturaPadrao);
                return estruturaPadrao;
            }
            
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar estat√≠sticas globais:', error);
        console.log('Recriando arquivo estatisticas_globais.json com estrutura padr√£o');
        
        const estruturaPadrao = {
            estatisticas: {
                respostas_geradas: 0,
                respostas_coerentes: 0,
                moderacoes_geradas: 0,
                moderacoes_coerentes: 0,
                revisoes_texto: 0,
                explicacoes_geradas: 0
            },
            historico_diario: [],
            lastUpdated: obterTimestampBrasil(),
            descricao: "Estat√≠sticas globais do sistema Velotax Bot - compartilhadas entre todos os usu√°rios"
        };
        
        try {
            saveEstatisticasGlobais(estruturaPadrao);
        } catch (saveError) {
            console.error('Erro ao recriar arquivo estatisticas_globais.json:', saveError);
        }
        
        return estruturaPadrao;
    }
    return {
        estatisticas: {
            respostas_geradas: 0,
            respostas_coerentes: 0,
            moderacoes_geradas: 0,
            moderacoes_coerentes: 0,
            revisoes_texto: 0,
            explicacoes_geradas: 0
        },
        historico_diario: [],
        lastUpdated: obterTimestampBrasil()
    };
}

// Salvar estat√≠sticas globais
function saveEstatisticasGlobais(estatisticas) {
    try {
        if (!estatisticas || typeof estatisticas !== 'object') {
            throw new Error('Estrutura de estat√≠sticas inv√°lida');
        }
        
        if (!estatisticas.estatisticas) {
            estatisticas.estatisticas = {
                respostas_geradas: 0,
                respostas_coerentes: 0,
                moderacoes_geradas: 0,
                moderacoes_coerentes: 0,
                revisoes_texto: 0,
                explicacoes_geradas: 0
            };
        }
        
        if (!Array.isArray(estatisticas.historico_diario)) {
            estatisticas.historico_diario = [];
        }
        
        estatisticas.lastUpdated = obterTimestampBrasil();
        
        // Verificar se estamos no Vercel (sistema de arquivos somente leitura)
        if (process.env.VERCEL || process.env.NODE_ENV === 'production') {
            console.log('üåê Vercel detectado - salvando estat√≠sticas em mem√≥ria');
            estatisticasGlobaisMemoria = estatisticas;
            console.log('‚úÖ Estat√≠sticas globais salvas em mem√≥ria');
            return;
        }
        
        // Desenvolvimento local - usar sistema de arquivos
        const dir = path.dirname(ESTATISTICAS_GLOBAIS_FILE);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        
        const tempFile = ESTATISTICAS_GLOBAIS_FILE + '.tmp';
        fs.writeFileSync(tempFile, JSON.stringify(estatisticas, null, 2), 'utf8');
        fs.renameSync(tempFile, ESTATISTICAS_GLOBAIS_FILE);
        
        console.log('‚úÖ Estat√≠sticas globais salvas no arquivo');
    } catch (error) {
        console.error('‚ùå Erro ao salvar estat√≠sticas globais:', error);
        
        // Fallback para mem√≥ria se arquivo falhar
        if (!process.env.VERCEL) {
            console.log('üîÑ Fallback para mem√≥ria devido ao erro de arquivo');
            estatisticasGlobaisMemoria = estatisticas;
        }
        
        try {
            const tempFile = ESTATISTICAS_GLOBAIS_FILE + '.tmp';
            if (fs.existsSync(tempFile)) {
                fs.unlinkSync(tempFile);
            }
        } catch (cleanupError) {
            console.error('Erro ao limpar arquivo tempor√°rio:', cleanupError);
        }
    }
}

// Incrementar estat√≠stica global
function incrementarEstatisticaGlobal(tipo, quantidade = 1) {
    console.log(`üìä Incrementando estat√≠stica global: ${tipo} (+${quantidade})`);
    
    const estatisticas = loadEstatisticasGlobais();
    
    if (estatisticas.estatisticas[tipo] !== undefined) {
        estatisticas.estatisticas[tipo] += quantidade;
    } else {
        console.log(`‚ö†Ô∏è Tipo de estat√≠stica n√£o encontrado: ${tipo}`);
        return;
    }
    
    // Adicionar ao hist√≥rico di√°rio
    const hoje = new Date();
    const dataHoje = hoje.toISOString().split('T')[0]; // YYYY-MM-DD
    
    let entradaHoje = estatisticas.historico_diario.find(entrada => entrada.data === dataHoje);
    if (entradaHoje) {
        entradaHoje[tipo] = (entradaHoje[tipo] || 0) + quantidade;
        entradaHoje.ultimaAtualizacao = hoje.toISOString();
    } else {
        entradaHoje = {
            data: dataHoje,
            respostas_geradas: tipo === 'respostas_geradas' ? quantidade : 0,
            respostas_coerentes: tipo === 'respostas_coerentes' ? quantidade : 0,
            moderacoes_geradas: tipo === 'moderacoes_geradas' ? quantidade : 0,
            moderacoes_coerentes: tipo === 'moderacoes_coerentes' ? quantidade : 0,
            revisoes_texto: tipo === 'revisoes_texto' ? quantidade : 0,
            explicacoes_geradas: tipo === 'explicacoes_geradas' ? quantidade : 0,
            ultimaAtualizacao: hoje.toISOString()
        };
        estatisticas.historico_diario.unshift(entradaHoje);
    }
    
    // Manter apenas os √∫ltimos 30 dias
    if (estatisticas.historico_diario.length > 30) {
        estatisticas.historico_diario = estatisticas.historico_diario.slice(0, 30);
    }
    
    saveEstatisticasGlobais(estatisticas);
    console.log(`‚úÖ Estat√≠stica ${tipo} atualizada: ${estatisticas.estatisticas[tipo]}`);
}

// ===== FUN√á√ïES PARA MODELOS DE RESPOSTAS APROVADAS =====

// Carregar modelos de respostas
function loadModelosRespostas() {
    // Verificar se estamos no Vercel e temos dados em mem√≥ria
    if ((process.env.VERCEL || process.env.NODE_ENV === 'production') && modelosRespostasMemoria) {
        console.log('üåê Vercel detectado - carregando da mem√≥ria');
        return modelosRespostasMemoria;
    }
    
    try {
        if (fs.existsSync(MODELOS_RESPOSTAS_FILE)) {
            const data = fs.readFileSync(MODELOS_RESPOSTAS_FILE, 'utf8');
            
            // Verificar se o arquivo n√£o est√° vazio
            if (!data.trim()) {
                console.log('Arquivo modelos_respostas.json est√° vazio, criando estrutura padr√£o');
                const estruturaPadrao = {
                    modelos: [],
                    lastUpdated: obterTimestampBrasil(),
                    descricao: "Modelos de respostas aprovadas como coerentes - utilizados para aprendizado autom√°tico"
                };
                saveModelosRespostas(estruturaPadrao);
                return estruturaPadrao;
            }
            
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar modelos de respostas:', error);
        console.log('Recriando arquivo modelos_respostas.json com estrutura padr√£o');
        
        // Recriar arquivo com estrutura padr√£o
        const estruturaPadrao = {
            modelos: [],
            lastUpdated: obterTimestampBrasil(),
            descricao: "Modelos de respostas aprovadas como coerentes - utilizados para aprendizado autom√°tico"
        };
        
        try {
            saveModelosRespostas(estruturaPadrao);
        } catch (saveError) {
            console.error('Erro ao recriar arquivo modelos_respostas.json:', saveError);
        }
        
        return estruturaPadrao;
    }
    return {
        modelos: [],
        lastUpdated: obterTimestampBrasil()
    };
}

// Armazenamento em mem√≥ria para Vercel
let modelosRespostasMemoria = null;
let estatisticasGlobaisMemoria = null;
let aprendizadoScriptMemoria = null;
let feedbacksRespostasMemoria = null;
let feedbacksModeracoesMemoria = null;
let feedbacksExplicacoesMemoria = null;
let modelosModeracoesMemoria = null;

// Salvar modelos de respostas
function saveModelosRespostas(modelos) {
    try {
        // Validar estrutura antes de salvar
        if (!modelos || typeof modelos !== 'object') {
            throw new Error('Estrutura de modelos inv√°lida');
        }
        
        if (!Array.isArray(modelos.modelos)) {
            modelos.modelos = [];
        }
        
        // Atualizar timestamp
        modelos.lastUpdated = obterTimestampBrasil();
        
        // Verificar se estamos no Vercel (sistema de arquivos somente leitura)
        if (process.env.VERCEL || process.env.NODE_ENV === 'production') {
            console.log('üåê Vercel detectado - salvando em mem√≥ria');
            modelosRespostasMemoria = modelos;
            console.log('‚úÖ Modelos de respostas salvos em mem√≥ria:', modelos.modelos.length);
            
        // Registrar no Google Sheets se ativo (TEMPORARIAMENTE DESABILITADO)
        // if (googleSheetsIntegration && googleSheetsIntegration.isActive()) {
        //     try {
        //         googleSheetsIntegration.registrarRespostaCoerente(respostaData);
        //     } catch (error) {
        //         console.error('‚ùå Erro ao registrar resposta coerente no Google Sheets:', error.message);
        //     }
        // }
            return;
        }
        
        // Desenvolvimento local - usar sistema de arquivos
        const dir = path.dirname(MODELOS_RESPOSTAS_FILE);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        
        // Escrever arquivo tempor√°rio primeiro
        const tempFile = MODELOS_RESPOSTAS_FILE + '.tmp';
        fs.writeFileSync(tempFile, JSON.stringify(modelos, null, 2), 'utf8');
        
        // Mover arquivo tempor√°rio para o arquivo final (opera√ß√£o at√¥mica)
        fs.renameSync(tempFile, MODELOS_RESPOSTAS_FILE);
        
        console.log('‚úÖ Modelos de respostas salvos no arquivo:', modelos.modelos.length);
        
        // Registrar no Google Sheets se ativo (TEMPORARIAMENTE DESABILITADO)
        // if (googleSheetsIntegration && googleSheetsIntegration.isActive()) {
        //     try {
        //         googleSheetsIntegration.registrarRespostaCoerente(respostaData);
        //     } catch (error) {
        //         console.error('‚ùå Erro ao registrar resposta coerente no Google Sheets:', error.message);
        //     }
        // }
    } catch (error) {
        console.error('‚ùå Erro ao salvar modelos de respostas:', error);
        
        // Fallback para mem√≥ria se arquivo falhar
        if (!process.env.VERCEL) {
            console.log('üîÑ Fallback para mem√≥ria devido ao erro de arquivo');
            modelosRespostasMemoria = modelos;
        }
        
        // Tentar remover arquivo tempor√°rio se existir
        try {
            const tempFile = MODELOS_RESPOSTAS_FILE + '.tmp';
            if (fs.existsSync(tempFile)) {
                fs.unlinkSync(tempFile);
            }
        } catch (cleanupError) {
            console.error('Erro ao limpar arquivo tempor√°rio:', cleanupError);
        }
    }
}

// Adicionar modelo de resposta aprovada
function addModeloResposta(dadosFormulario, respostaAprovada) {
    console.log('üöÄ FUN√á√ÉO addModeloResposta INICIADA!');
    console.log('üìù Dados recebidos:', {
        tipo_solicitacao: dadosFormulario.tipo_solicitacao,
        motivo_solicitacao: dadosFormulario.motivo_solicitacao,
        resposta_length: respostaAprovada ? respostaAprovada.length : 0
    });
    
    const modelos = loadModelosRespostas();
    console.log('üìö Modelos carregados:', modelos.modelos ? modelos.modelos.length : 0);
    
    const novoModelo = {
        id: Date.now(),
        timestamp: obterTimestampBrasil(),
        tipo_situacao: dadosFormulario.tipo_solicitacao,
        motivo_solicitacao: dadosFormulario.motivo_solicitacao,
        dadosFormulario: dadosFormulario,
        respostaAprovada: respostaAprovada,
        contexto: {
            tipoSituacao: dadosFormulario.tipo_solicitacao,
            motivoSolicitacao: dadosFormulario.motivo_solicitacao
        }
    };
    
    console.log('üÜï Novo modelo criado com ID:', novoModelo.id);
    
    modelos.modelos.push(novoModelo);
    console.log('üìù Modelo adicionado ao array. Total agora:', modelos.modelos.length);
    
    console.log('üíæ Chamando saveModelosRespostas...');
    saveModelosRespostas(modelos);
    console.log('‚úÖ saveModelosRespostas conclu√≠do');
    
    // Tamb√©m adicionar ao aprendizado direto do script
    console.log('üß† Adicionando ao aprendizado do script...');
    addRespostaCoerenteAprendizado(dadosFormulario.tipo_solicitacao, dadosFormulario.motivo_solicitacao, respostaAprovada, dadosFormulario);
    console.log('‚úÖ Aprendizado do script conclu√≠do');
    
    console.log('üìù Modelo de resposta aprovada adicionado:', novoModelo.id);
    return novoModelo;
}

// Obter modelos relevantes para um tipo de situa√ß√£o
function getModelosRelevantes(tipoSituacao, motivoSolicitacao) {
    const modelos = loadModelosRespostas();
    const relevantes = [];
    
    modelos.modelos.forEach(modelo => {
        let isRelevante = false;
        
        // Verificar correspond√™ncia exata de tipo de situa√ß√£o
        if (modelo.tipo_situacao && modelo.tipo_situacao.toLowerCase() === tipoSituacao.toLowerCase()) {
            isRelevante = true;
        }
        
        // Verificar correspond√™ncia de motivo da solicita√ß√£o
        if (modelo.motivo_solicitacao && motivoSolicitacao) {
            if (modelo.motivo_solicitacao.toLowerCase().includes(motivoSolicitacao.toLowerCase()) ||
                motivoSolicitacao.toLowerCase().includes(modelo.motivo_solicitacao.toLowerCase())) {
                isRelevante = true;
            }
        }
        
        if (isRelevante) {
            relevantes.push(modelo);
        }
    });
    
    // Ordenar por timestamp mais recente e retornar os √∫ltimos 3
    return relevantes
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, 3);
}

// ===== FUN√á√ïES PARA MODELOS DE MODERA√á√ïES APROVADAS =====

// Carregar modelos de modera√ß√µes
function loadModelosModeracoes() {
    // Verificar se estamos no Vercel e temos dados em mem√≥ria
    if ((process.env.VERCEL || process.env.NODE_ENV === 'production') && modelosModeracoesMemoria) {
        console.log('üåê Vercel detectado - carregando modelos de modera√ß√µes da mem√≥ria');
        return modelosModeracoesMemoria;
    }
    
    try {
        if (fs.existsSync(MODELOS_MODERACOES_FILE)) {
            const data = fs.readFileSync(MODELOS_MODERACOES_FILE, 'utf8');
            
            // Verificar se o arquivo n√£o est√° vazio
            if (!data.trim()) {
                console.log('Arquivo modelos_moderacoes.json est√° vazio, criando estrutura padr√£o');
                const estruturaPadrao = {
                    modelos: [],
                    lastUpdated: obterTimestampBrasil(),
                    descricao: "Modelos de modera√ß√µes aprovadas como coerentes - utilizados para aprendizado autom√°tico"
                };
                saveModelosModeracoes(estruturaPadrao);
                return estruturaPadrao;
            }
            
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar modelos de modera√ß√µes:', error);
        console.log('Recriando arquivo modelos_moderacoes.json com estrutura padr√£o');
        
        // Recriar arquivo com estrutura padr√£o
        const estruturaPadrao = {
            modelos: [],
            lastUpdated: obterTimestampBrasil(),
            descricao: "Modelos de modera√ß√µes aprovadas como coerentes - utilizados para aprendizado autom√°tico"
        };
        
        try {
            saveModelosModeracoes(estruturaPadrao);
        } catch (saveError) {
            console.error('Erro ao recriar arquivo modelos_moderacoes.json:', saveError);
        }
        
        return estruturaPadrao;
    }
    return {
        modelos: [],
        lastUpdated: obterTimestampBrasil()
    };
}

// Salvar modelos de modera√ß√µes
function saveModelosModeracoes(modelos) {
    try {
        // Validar estrutura antes de salvar
        if (!modelos || typeof modelos !== 'object') {
            throw new Error('Estrutura de modelos inv√°lida');
        }
        
        if (!Array.isArray(modelos.modelos)) {
            modelos.modelos = [];
        }
        
        // Atualizar timestamp
        modelos.lastUpdated = obterTimestampBrasil();
        
        // Verificar se estamos no Vercel (sistema de arquivos somente leitura)
        if (process.env.VERCEL || process.env.NODE_ENV === 'production') {
            console.log('üåê Vercel detectado - salvando modelos de modera√ß√µes em mem√≥ria');
            modelosModeracoesMemoria = modelos;
            console.log('üìù Modelos de modera√ß√µes salvos em mem√≥ria:', modelos.modelos.length);
            return;
        }
        
        // Desenvolvimento local - usar sistema de arquivos
        const dir = path.dirname(MODELOS_MODERACOES_FILE);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        
        // Escrever arquivo tempor√°rio primeiro
        const tempFile = MODELOS_MODERACOES_FILE + '.tmp';
        fs.writeFileSync(tempFile, JSON.stringify(modelos, null, 2), 'utf8');
        
        // Mover arquivo tempor√°rio para o arquivo final (opera√ß√£o at√¥mica)
        fs.renameSync(tempFile, MODELOS_MODERACOES_FILE);
        
        console.log('üìù Modelos de modera√ß√µes salvos no arquivo:', modelos.modelos.length);
    } catch (error) {
        console.error('Erro ao salvar modelos de modera√ß√µes:', error);
        
        // Fallback para mem√≥ria se arquivo falhar
        if (!process.env.VERCEL) {
            console.log('üîÑ Fallback para mem√≥ria devido ao erro de arquivo');
            modelosModeracoesMemoria = modelos;
        }
        
        // Tentar remover arquivo tempor√°rio se existir
        try {
            const tempFile = MODELOS_MODERACOES_FILE + '.tmp';
            if (fs.existsSync(tempFile)) {
                fs.unlinkSync(tempFile);
            }
        } catch (cleanupError) {
            console.error('Erro ao limpar arquivo tempor√°rio:', cleanupError);
        }
    }
}

// Adicionar modelo de modera√ß√£o aprovada
function addModeloModeracao(dadosModeracao, linhaRaciocinio, textoModeracao) {
    const modelos = loadModelosModeracoes();
    
    const novoModelo = {
        id: Date.now(),
        timestamp: obterTimestampBrasil(),
        motivoModeracao: dadosModeracao.motivoModeracao,
        dadosModeracao: dadosModeracao,
        linhaRaciocinio: linhaRaciocinio,
        textoModeracao: textoModeracao,
        contexto: {
            motivoModeracao: dadosModeracao.motivoModeracao,
            solicitacaoCliente: dadosModeracao.solicitacaoCliente,
            respostaEmpresa: dadosModeracao.respostaEmpresa,
            consideracaoFinal: dadosModeracao.consideracaoFinal
        }
    };
    
    modelos.modelos.push(novoModelo);
    modelos.lastUpdated = obterTimestampBrasil();
    
    saveModelosModeracoes(modelos);
    console.log('üìù Modelo de modera√ß√£o aprovada adicionado:', novoModelo.id);
    return novoModelo;
}

// Obter modelos de modera√ß√£o relevantes
function getModelosModeracaoRelevantes(motivoModeracao) {
    const modelos = loadModelosModeracoes();
    const relevantes = [];
    
    modelos.modelos.forEach(modelo => {
        let isRelevante = false;
        
        // Verificar correspond√™ncia de motivo de modera√ß√£o
        if (modelo.motivoModeracao && motivoModeracao) {
            if (modelo.motivoModeracao.toLowerCase() === motivoModeracao.toLowerCase()) {
                isRelevante = true;
            }
        }
        
        if (isRelevante) {
            relevantes.push(modelo);
        }
    });
    
    // Ordenar por timestamp mais recente e retornar os √∫ltimos 3
    return relevantes
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, 3);
}

// ===== FUN√á√ïES PARA APRENDIZADO DIRETO NO SCRIPT DE FORMULA√á√ÉO =====

// Carregar aprendizado do script
function loadAprendizadoScript() {
    // Verificar se estamos no Vercel e temos dados em mem√≥ria
    if ((process.env.VERCEL || process.env.NODE_ENV === 'production') && aprendizadoScriptMemoria) {
        console.log('üåê Vercel detectado - carregando aprendizado da mem√≥ria');
        return aprendizadoScriptMemoria;
    }
    
    try {
        if (fs.existsSync(APRENDIZADO_SCRIPT_FILE)) {
            const data = fs.readFileSync(APRENDIZADO_SCRIPT_FILE, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error('Erro ao carregar aprendizado do script:', error);
    }
    return {
        tiposSituacao: {},
        lastUpdated: obterTimestampBrasil()
    };
}

// Salvar aprendizado do script
function saveAprendizadoScript(aprendizado) {
    try {
        aprendizado.lastUpdated = obterTimestampBrasil();
        
        // Verificar se estamos no Vercel (sistema de arquivos somente leitura)
        if (process.env.VERCEL || process.env.NODE_ENV === 'production') {
            console.log('üåê Vercel detectado - salvando aprendizado em mem√≥ria');
            aprendizadoScriptMemoria = aprendizado;
            console.log('‚úÖ Aprendizado do script salvo em mem√≥ria');
            return;
        }
        
        // Desenvolvimento local - usar sistema de arquivos
        fs.writeFileSync(APRENDIZADO_SCRIPT_FILE, JSON.stringify(aprendizado, null, 2));
        console.log('‚úÖ Aprendizado do script salvo no arquivo');
    } catch (error) {
        console.error('‚ùå Erro ao salvar aprendizado do script:', error);
        
        // Fallback para mem√≥ria se arquivo falhar
        if (!process.env.VERCEL) {
            console.log('üîÑ Fallback para mem√≥ria devido ao erro de arquivo');
            aprendizadoScriptMemoria = aprendizado;
        }
    }
}

// Adicionar feedback ao aprendizado do script
function addFeedbackAprendizado(tipoSituacao, feedback, respostaReformulada) {
    const aprendizado = loadAprendizadoScript();
    
    if (!aprendizado.tiposSituacao[tipoSituacao]) {
        aprendizado.tiposSituacao[tipoSituacao] = {
            feedbacks: [],
            respostasCoerentes: [],
            padroesIdentificados: [],
            clausulasUsadas: []
        };
    }
    
    const novoFeedback = {
        id: Date.now(),
        timestamp: obterTimestampBrasil(),
        feedback: feedback,
        respostaReformulada: respostaReformulada
    };
    
    // Verificar qualidade do feedback antes de adicionar
    const qualidadeFeedback = verificarQualidadeFeedbackIndividual(novoFeedback);
    if (qualidadeFeedback.pontuacao < 30) {
        console.log(`‚ö†Ô∏è Feedback de baixa qualidade detectado (${qualidadeFeedback.pontuacao} pontos): ${tipoSituacao}`);
        console.log(`   Problemas: ${qualidadeFeedback.problemas.join(', ')}`);
    }
    
    aprendizado.tiposSituacao[tipoSituacao].feedbacks.push(novoFeedback);
    
    // Manter apenas os √∫ltimos 10 feedbacks por tipo
    if (aprendizado.tiposSituacao[tipoSituacao].feedbacks.length > 10) {
        aprendizado.tiposSituacao[tipoSituacao].feedbacks = 
            aprendizado.tiposSituacao[tipoSituacao].feedbacks.slice(-10);
    }
    
    // Identificar padr√µes automaticamente baseado no feedback
    console.log('üîç Identificando padr√µes para:', tipoSituacao);
    identificarPadroesAprendizado(tipoSituacao, '', respostaReformulada);
    
    saveAprendizadoScript(aprendizado);
    console.log('üìù Feedback adicionado ao aprendizado do script:', tipoSituacao);
}

// Adicionar resposta coerente ao aprendizado do script
function addRespostaCoerenteAprendizado(tipoSituacao, motivoSolicitacao, respostaAprovada, dadosFormulario) {
    const aprendizado = loadAprendizadoScript();
    
    if (!aprendizado.tiposSituacao[tipoSituacao]) {
        aprendizado.tiposSituacao[tipoSituacao] = {
            feedbacks: [],
            respostasCoerentes: [],
            padroesIdentificados: [],
            clausulasUsadas: []
        };
    }
    
    const novaResposta = {
        id: Date.now(),
        timestamp: obterTimestampBrasil(),
        motivoSolicitacao: motivoSolicitacao,
        respostaAprovada: respostaAprovada,
        dadosFormulario: dadosFormulario
    };
    
    aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes.push(novaResposta);
    
    // Manter apenas as √∫ltimas 5 respostas coerentes por tipo
    if (aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes.length > 5) {
        aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes = 
            aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes.slice(-5);
    }
    
    // Identificar padr√µes automaticamente
    identificarPadroesAprendizado(tipoSituacao, motivoSolicitacao, respostaAprovada);
    
    saveAprendizadoScript(aprendizado);
    console.log('üìù Resposta coerente adicionada ao aprendizado do script:', tipoSituacao);
}

// Identificar padr√µes automaticamente
function identificarPadroesAprendizado(tipoSituacao, motivoSolicitacao, respostaAprovada) {
    console.log('üîç Identificando padr√µes para:', tipoSituacao);
    const aprendizado = loadAprendizadoScript();
    
    if (!aprendizado.tiposSituacao[tipoSituacao]) {
        console.log('‚ùå Tipo de situa√ß√£o n√£o encontrado:', tipoSituacao);
        return;
    }
    
    console.log('üìä Feedbacks dispon√≠veis:', aprendizado.tiposSituacao[tipoSituacao].feedbacks.length);
    
    // Identificar cl√°usula CCB baseada no tipo de situa√ß√£o
    let clausulaIdentificada = '';
    if (tipoSituacao.toLowerCase().includes('pix') || tipoSituacao.toLowerCase().includes('portabilidade')) {
        clausulaIdentificada = 'Cl√°usula 7 - V√≠nculo da Chave Pix e Quita√ß√£o Autom√°tica';
    } else if (tipoSituacao.toLowerCase().includes('quita√ß√£o') || tipoSituacao.toLowerCase().includes('liquida√ß√£o')) {
        clausulaIdentificada = 'Cl√°usula 8 - Liquida√ß√£o Antecipada';
    } else if (tipoSituacao.toLowerCase().includes('inadimpl√™ncia') || tipoSituacao.toLowerCase().includes('vencimento')) {
        clausulaIdentificada = 'Cl√°usula 10 - Inadimpl√™ncia e Vencimento Antecipado';
    } else if (tipoSituacao.toLowerCase().includes('exclus√£o') || tipoSituacao.toLowerCase().includes('dados')) {
        clausulaIdentificada = 'Cl√°usula 14 - Prote√ß√£o de Dados (LGPD)';
    }
    
    if (clausulaIdentificada && !aprendizado.tiposSituacao[tipoSituacao].clausulasUsadas.includes(clausulaIdentificada)) {
        aprendizado.tiposSituacao[tipoSituacao].clausulasUsadas.push(clausulaIdentificada);
    }
    
    // Identificar padr√µes na resposta e nos feedbacks
    const padroes = [];
    
    // Padr√µes da resposta aprovada
    if (respostaAprovada.toLowerCase().includes('conforme solicitado')) {
        padroes.push('Confirma√ß√£o de atendimento √† solicita√ß√£o');
    }
    if (respostaAprovada.toLowerCase().includes('conforme estabelecido')) {
        padroes.push('Refer√™ncia a cl√°usulas contratuais');
    }
    if (respostaAprovada.toLowerCase().includes('lgpd') || respostaAprovada.toLowerCase().includes('lei geral')) {
        padroes.push('Fundamenta√ß√£o legal (LGPD)');
    }
    if (respostaAprovada.toLowerCase().includes('processo foi conclu√≠do')) {
        padroes.push('Confirma√ß√£o de conclus√£o do processo');
    }
    
    // Padr√µes dos feedbacks (CR√çTICO - EVITAR ESTES ERROS)
    const feedbacks = aprendizado.tiposSituacao[tipoSituacao].feedbacks;
    feedbacks.forEach(fb => {
        const feedback = fb.feedback.toLowerCase();
        
        if (feedback.includes('n√£o pe√ßa desculpas') || feedback.includes('jamais pe√ßa desculpas')) {
            padroes.push('NUNCA pedir desculpas em nome da empresa');
        }
        if (feedback.includes('n√£o estipular prazos') || feedback.includes('sem estar presente')) {
            padroes.push('NUNCA estipular prazos que n√£o est√£o na solu√ß√£o implementada');
        }
        if (feedback.includes('n√£o condiz') || feedback.includes('nao-condiz-solucao')) {
            padroes.push('SEMPRE usar EXATAMENTE a solu√ß√£o implementada como base');
        }
        if (feedback.includes('informa√ß√µes incorretas') || feedback.includes('informacoes-incorretas')) {
            padroes.push('NUNCA inventar informa√ß√µes que n√£o est√£o nos dados fornecidos');
        }
        if (feedback.includes('falta clareza') || feedback.includes('falta-clareza')) {
            padroes.push('SEMPRE ser espec√≠fico e conclusivo sobre o que foi feito');
        }
        if (feedback.includes('exclus√£o de cadastro')) {
            padroes.push('Para exclus√£o: confirmar que dados foram removidos e n√£o receber√° mais comunica√ß√µes');
        }
        if (feedback.includes('portabilidade') || feedback.includes('chave pix')) {
            padroes.push('Para portabilidade: confirmar que processo foi conclu√≠do e chave liberada');
        }
    });
    
    console.log('üìã Padr√µes identificados:', padroes);
    padroes.forEach(padrao => {
        if (!aprendizado.tiposSituacao[tipoSituacao].padroesIdentificados.includes(padrao)) {
            aprendizado.tiposSituacao[tipoSituacao].padroesIdentificados.push(padrao);
            console.log('‚úÖ Novo padr√£o adicionado:', padrao);
        }
    });
}

// Processar padr√µes existentes baseado nos feedbacks salvos
function processarPadroesExistentes(tipoSituacao) {
    console.log('üîÑ Processando padr√µes existentes para:', tipoSituacao);
    const aprendizado = loadAprendizadoScript();
    
    if (!aprendizado.tiposSituacao[tipoSituacao]) {
        return;
    }
    
    const padroes = [];
    const clausulas = [];
    
    // Identificar cl√°usula CCB baseada no tipo de situa√ß√£o
    if (tipoSituacao.toLowerCase().includes('pix') || tipoSituacao.toLowerCase().includes('portabilidade')) {
        clausulas.push('Cl√°usula 7 - V√≠nculo da Chave Pix e Quita√ß√£o Autom√°tica');
    } else if (tipoSituacao.toLowerCase().includes('quita√ß√£o') || tipoSituacao.toLowerCase().includes('liquida√ß√£o')) {
        clausulas.push('Cl√°usula 8 - Liquida√ß√£o Antecipada');
    } else if (tipoSituacao.toLowerCase().includes('inadimpl√™ncia') || tipoSituacao.toLowerCase().includes('vencimento')) {
        clausulas.push('Cl√°usula 10 - Inadimpl√™ncia e Vencimento Antecipado');
    } else if (tipoSituacao.toLowerCase().includes('exclus√£o') || tipoSituacao.toLowerCase().includes('dados')) {
        clausulas.push('Cl√°usula 14 - Prote√ß√£o de Dados (LGPD)');
    }
    
    // Analisar todos os feedbacks para extrair padr√µes
    aprendizado.tiposSituacao[tipoSituacao].feedbacks.forEach(fb => {
        const feedback = fb.feedback.toLowerCase();
        
        if (feedback.includes('n√£o pe√ßa desculpas') || feedback.includes('jamais pe√ßa desculpas')) {
            padroes.push('NUNCA pedir desculpas em nome da empresa');
        }
        if (feedback.includes('n√£o estipular prazos') || feedback.includes('sem estar presente')) {
            padroes.push('NUNCA estipular prazos que n√£o est√£o na solu√ß√£o implementada');
        }
        if (feedback.includes('n√£o condiz') || feedback.includes('nao-condiz-solucao')) {
            padroes.push('SEMPRE usar EXATAMENTE a solu√ß√£o implementada como base');
        }
        if (feedback.includes('informa√ß√µes incorretas') || feedback.includes('informacoes-incorretas')) {
            padroes.push('NUNCA inventar informa√ß√µes que n√£o est√£o nos dados fornecidos');
        }
        if (feedback.includes('falta clareza') || feedback.includes('falta-clareza')) {
            padroes.push('SEMPRE ser espec√≠fico e conclusivo sobre o que foi feito');
        }
        if (feedback.includes('exclus√£o de cadastro')) {
            padroes.push('Para exclus√£o: confirmar que dados foram removidos e n√£o receber√° mais comunica√ß√µes');
        }
        if (feedback.includes('portabilidade') || feedback.includes('chave pix')) {
            padroes.push('Para portabilidade: confirmar que processo foi conclu√≠do e chave liberada');
        }
    });
    
    // Analisar respostas coerentes para extrair padr√µes positivos
    aprendizado.tiposSituacao[tipoSituacao].respostasCoerentes.forEach(resp => {
        const resposta = resp.respostaAprovada.toLowerCase();
        
        if (resposta.includes('conforme solicitado')) {
            padroes.push('Confirma√ß√£o de atendimento √† solicita√ß√£o');
        }
        if (resposta.includes('conforme estabelecido')) {
            padroes.push('Refer√™ncia a cl√°usulas contratuais');
        }
        if (resposta.includes('processo foi conclu√≠do')) {
            padroes.push('Confirma√ß√£o de conclus√£o do processo');
        }
        if (resposta.includes('confirmamos que')) {
            padroes.push('Confirma√ß√£o direta do que foi feito');
        }
    });
    
    // Remover duplicatas
    const padroesUnicos = [...new Set(padroes)];
    const clausulasUnicas = [...new Set(clausulas)];
    
    // Atualizar aprendizado
    aprendizado.tiposSituacao[tipoSituacao].padroesIdentificados = padroesUnicos;
    aprendizado.tiposSituacao[tipoSituacao].clausulasUsadas = clausulasUnicas;
    
    saveAprendizadoScript(aprendizado);
    console.log('‚úÖ Padr√µes processados:', padroesUnicos.length, 'padr√µes,', clausulasUnicas.length, 'cl√°usulas');
    console.log('üìã Padr√µes identificados:', padroesUnicos);
}

// Obter aprendizado para um tipo de situa√ß√£o
function getAprendizadoTipoSituacao(tipoSituacao) {
    const aprendizado = loadAprendizadoScript();
    return aprendizado.tiposSituacao[tipoSituacao] || {
        feedbacks: [],
        respostasCoerentes: [],
        padroesIdentificados: [],
        clausulasUsadas: []
    };
}

// ===== FUN√á√ÉO COMPATIBILIDADE (para n√£o quebrar c√≥digo existente) =====

// Carregar feedbacks (mantido para compatibilidade)
function loadFeedbacks() {
    const respostas = loadFeedbacksRespostas();
    const moderacoes = loadFeedbacksModeracoes();
    return {
        respostas: respostas.respostas || [],
        moderacoes: moderacoes.moderacoes || [],
        lastUpdated: obterTimestampBrasil()
    };
}

// Adicionar feedback de resposta (APENAS para aba Respostas RA)
function addRespostaFeedback(dadosFormulario, respostaAnterior, feedback, respostaReformulada) {
    const feedbacks = loadFeedbacksRespostas();
    
    const novoFeedback = {
        id: Date.now(),
        timestamp: obterTimestampBrasil(),
        tipo: 'resposta',
        dadosFormulario: dadosFormulario,
        respostaAnterior: respostaAnterior,
        feedback: feedback,
        respostaReformulada: respostaReformulada,
        contexto: {
            tipoSituacao: dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao,
            motivoSolicitacao: dadosFormulario.motivo_solicitacao || dadosFormulario.motivoSolicitacao
        }
    };
    
    feedbacks.respostas.push(novoFeedback);
    saveFeedbacksRespostas(feedbacks);
    
    // Tamb√©m adicionar ao aprendizado direto do script
    addFeedbackAprendizado(dadosFormulario.tipo_solicitacao, feedback, respostaReformulada);
    
    console.log('üìù Feedback de resposta adicionado (aba Respostas RA):', novoFeedback.id);
    return novoFeedback;
}

// Adicionar feedback de modera√ß√£o (APENAS para aba Modera√ß√£o RA)
function addModeracaoFeedback(textoNegado, motivoNegativa, textoReformulado) {
    const feedbacks = loadFeedbacksModeracoes();
    
    const novoFeedback = {
        id: Date.now(),
        timestamp: obterTimestampBrasil(),
        tipo: 'moderacao',
        textoNegado: textoNegado,
        motivoNegativa: motivoNegativa,
        textoReformulado: textoReformulado
    };
    
    feedbacks.moderacoes.push(novoFeedback);
    saveFeedbacksModeracoes(feedbacks);
    
    console.log('üìù Feedback de modera√ß√£o adicionado (aba Modera√ß√£o RA):', novoFeedback.id);
    return novoFeedback;
}

// Obter feedbacks relevantes para um contexto (SEPARADO POR ABA)
function getRelevantFeedbacks(tipo, contexto) {
    const relevantes = [];
    
    if (tipo === 'resposta') {
        // Usar APENAS feedbacks de respostas (aba Respostas RA)
        const feedbacks = loadFeedbacksRespostas();
        feedbacks.respostas.forEach(feedback => {
            let isRelevante = false;
            
            // Verificar correspond√™ncia exata de tipo de situa√ß√£o
            if (feedback.contexto && feedback.contexto.tipoSituacao === contexto.tipoSituacao) {
                isRelevante = true;
            }
            
            // Verificar correspond√™ncia de motivo de solicita√ß√£o
            if (feedback.contexto && feedback.contexto.motivoSolicitacao === contexto.motivoSolicitacao) {
                isRelevante = true;
            }
            
            // Busca por palavras-chave no feedback (para casos de exclus√£o de cadastro, LGPD, etc.)
            if (feedback.feedback && typeof feedback.feedback === 'string') {
                const feedbackLower = feedback.feedback.toLowerCase();
                const contextoLower = (contexto.tipoSituacao + ' ' + contexto.motivoSolicitacao).toLowerCase();
                
                // Buscar palavras-chave importantes
                const palavrasChave = ['exclus√£o', 'cadastro', 'lgpd', 'dados pessoais', 'desculpas', 'empresa'];
                const temPalavraChave = palavrasChave.some(palavra => 
                    feedbackLower.includes(palavra) && contextoLower.includes(palavra)
                );
                
                if (temPalavraChave) {
                    isRelevante = true;
                }
            }
            
            if (isRelevante) {
                relevantes.push(feedback);
            }
        });
    } else if (tipo === 'moderacao') {
        // Usar APENAS feedbacks de modera√ß√µes (aba Modera√ß√£o RA)
        const feedbacks = loadFeedbacksModeracoes();
        feedbacks.moderacoes.forEach(feedback => {
            if (feedback.motivoNegativa && contexto.motivoNegativa) {
                const motivoFeedback = feedback.motivoNegativa.toLowerCase();
                const motivoContexto = contexto.motivoNegativa.toLowerCase();
                
                if (motivoFeedback.includes(motivoContexto) || 
                    motivoContexto.includes(motivoFeedback) ||
                    motivoFeedback.includes('resposta n√£o condizente') ||
                    motivoFeedback.includes('tom inadequado')) {
                relevantes.push(feedback);
                }
            }
        });
    }
    
    // Ordenar por timestamp mais recente e retornar os √∫ltimos 5
    return relevantes
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, 5);
}

// Gerar explica√ß√£o baseada em feedbacks salvos (APENAS feedbacks de respostas)
function gerarExplicacaoBaseadaEmFeedbacks(tema, feedbacks) {
    console.log(`üß† Gerando explica√ß√£o para tema: ${tema} baseada em ${feedbacks.respostas.length} feedbacks de respostas (aba Respostas RA)`);
    
    // Buscar feedbacks relevantes para o tema
    const feedbacksRelevantes = [];
    
    // Buscar em feedbacks de respostas
    feedbacks.respostas.forEach(feedback => {
        let isRelevante = false;
        
        // Verificar no contexto (se existir)
        if (feedback.contexto && feedback.contexto.tipoSituacao) {
            const tipoSituacao = feedback.contexto.tipoSituacao.toLowerCase();
            const motivoSolicitacao = feedback.contexto.motivoSolicitacao ? feedback.contexto.motivoSolicitacao.toLowerCase() : '';
            
            if (tipoSituacao.includes(tema.toLowerCase()) || 
                motivoSolicitacao.includes(tema.toLowerCase())) {
                isRelevante = true;
            }
        }
        
        // Verificar nos dados do formul√°rio (fallback para feedbacks antigos)
        if (feedback.dadosFormulario) {
            const tipoSituacao = feedback.dadosFormulario.tipo_solicitacao ? feedback.dadosFormulario.tipo_solicitacao.toLowerCase() : '';
            const motivoSolicitacao = feedback.dadosFormulario.motivo_solicitacao ? feedback.dadosFormulario.motivo_solicitacao.toLowerCase() : '';
            
            if (tipoSituacao.includes(tema.toLowerCase()) || 
                motivoSolicitacao.includes(tema.toLowerCase())) {
                isRelevante = true;
            }
        }
        
        // Verificar no texto do feedback
        if (feedback.feedback) {
            const feedbackTexto = feedback.feedback.toLowerCase();
            if (feedbackTexto.includes(tema.toLowerCase()) ||
                (tema.toLowerCase().includes('exclusao') && feedbackTexto.includes('exclus√£o')) ||
                (tema.toLowerCase().includes('exclus√£o') && feedbackTexto.includes('exclusao'))) {
                isRelevante = true;
            }
        }
        
        if (isRelevante) {
            feedbacksRelevantes.push({
                tipo: 'resposta',
                feedback: feedback,
                relevancia: 'alta'
            });
        }
    });
    
    // NOTA: Explica√ß√µes usam APENAS feedbacks de respostas (aba Respostas RA)
    // Feedbacks de modera√ß√£o s√£o isolados para a aba Modera√ß√£o RA
    
    // Gerar explica√ß√£o baseada nos feedbacks encontrados
    let explicacao = '';
    
    if (feedbacksRelevantes.length > 0) {
        explicacao = gerarExplicacaoDetalhada(tema, feedbacksRelevantes);
    } else {
        explicacao = gerarExplicacaoPadrao(tema);
    }
    
    return explicacao;
}

// Gerar explica√ß√£o detalhada baseada em feedbacks
function gerarExplicacaoDetalhada(tema, feedbacksRelevantes) {
    let explicacao = `<p><strong>Explica√ß√£o sobre ${tema.charAt(0).toUpperCase() + tema.slice(1)}</strong></p>`;
    explicacao += `<p><em>Baseada em ${feedbacksRelevantes.length} experi√™ncia(s) anterior(es) documentada(s) no sistema.</em></p>`;
    
    // Extrair padr√µes dos feedbacks
    const padroes = new Set();
    const exemplos = [];
    
    feedbacksRelevantes.forEach(fb => {
        if (fb.feedback.feedback) {
            padroes.add(fb.feedback.feedback);
        }
        if (fb.feedback.respostaReformulada) {
            exemplos.push(fb.feedback.respostaReformulada.substring(0, 200));
        }
    });
    
    // Adicionar padr√µes identificados
    if (padroes.size > 0) {
        explicacao += `<h6>üìã Diretrizes Identificadas:</h6><ul>`;
        Array.from(padroes).forEach(padrao => {
            explicacao += `<li>${padrao}</li>`;
        });
        explicacao += `</ul>`;
    }
    
    // Adicionar exemplos pr√°ticos
    if (exemplos.length > 0) {
        explicacao += `<h6>‚úÖ Exemplos de Boas Pr√°ticas:</h6>`;
        exemplos.slice(0, 2).forEach((exemplo, index) => {
            explicacao += `<p><strong>Exemplo ${index + 1}:</strong> "${exemplo}..."</p>`;
        });
    }
    
    // Adicionar explica√ß√£o espec√≠fica baseada no tema
    explicacao += gerarExplicacaoEspecifica(tema);
    
    return explicacao;
}

// Gerar explica√ß√£o espec√≠fica baseada no tema
function gerarExplicacaoEspecifica(tema) {
    const explicacoesEspecificas = {
        'exclusao': `
            <h6>üîç Sobre Exclus√£o de Cadastro:</h6>
            <p>Com base nas experi√™ncias documentadas, seguem as diretrizes essenciais:</p>
            <ul>
                <li><strong>LGPD:</strong> Sempre citar a Lei Geral de Prote√ß√£o de Dados Pessoais (Lei n¬∫ 13.709/2018)</li>
                <li><strong>Tom Profissional:</strong> Nunca pedir desculpas em nome da empresa</li>
                <li><strong>Foco na Solu√ß√£o:</strong> Enfatizar que a solicita√ß√£o foi atendida</li>
                <li><strong>Transpar√™ncia:</strong> Informar a data exata da exclus√£o</li>
            </ul>
        `,
        'exclus√£o': `
            <h6>üîç Sobre Exclus√£o de Cadastro:</h6>
            <p>Com base nas experi√™ncias documentadas, seguem as diretrizes essenciais:</p>
            <ul>
                <li><strong>LGPD:</strong> Sempre citar a Lei Geral de Prote√ß√£o de Dados Pessoais (Lei n¬∫ 13.709/2018)</li>
                <li><strong>Tom Profissional:</strong> Nunca pedir desculpas em nome da empresa</li>
                <li><strong>Foco na Solu√ß√£o:</strong> Enfatizar que a solicita√ß√£o foi atendida</li>
                <li><strong>Transpar√™ncia:</strong> Informar a data exata da exclus√£o</li>
            </ul>
        `,
        'moderacao': `
            <h6>üîç Sobre Modera√ß√£o no Reclame Aqui:</h6>
            <p>Com base nas experi√™ncias documentadas:</p>
            <ul>
                <li><strong>Estrutura Padr√£o:</strong> "Conforme o apontamento acima, solicitamos a modera√ß√£o..."</li>
                <li><strong>Fundamenta√ß√£o:</strong> Sempre citar o manual aplic√°vel (Geral, Reviews ou Bancos)</li>
                <li><strong>Tom T√©cnico:</strong> Linguagem objetiva e impessoal</li>
                <li><strong>Evid√™ncias:</strong> Anexar documenta√ß√£o comprobat√≥ria</li>
            </ul>
        `
    };
    
    return explicacoesEspecificas[tema.toLowerCase()] || '';
}

// Gerar explica√ß√£o padr√£o quando n√£o h√° feedbacks relevantes
function gerarExplicacaoPadrao(tema) {
    const explicacoesPadrao = {
        'fgts': `
            <p><strong>Explica√ß√£o sobre FGTS (Fundo de Garantia do Tempo de Servi√ßo)</strong></p>
            <p>O FGTS √© um fundo que garante prote√ß√£o ao trabalhador demitido sem justa causa. O empregador deposita mensalmente 8% do sal√°rio do funcion√°rio em uma conta vinculada.</p>
            <p>Restitui√ß√µes podem ocorrer em casos espec√≠ficos como demiss√£o sem justa causa, aposentadoria, ou compra da casa pr√≥pria.</p>
            <p>Para consultar seus saldos, utilize o aplicativo FGTS ou o site da Caixa Econ√¥mica Federal.</p>
        `,
        'malha-fina': `
            <p><strong>Explica√ß√£o sobre Malha Fina e Regulariza√ß√£o</strong></p>
            <p>A malha fina √© um processo de verifica√ß√£o da Receita Federal que identifica inconsist√™ncias na declara√ß√£o do Imposto de Renda.</p>
            <p>Para regulariza√ß√£o, √© necess√°rio apresentar documenta√ß√£o comprobat√≥ria e, se necess√°rio, fazer uma declara√ß√£o retificadora.</p>
        `,
        'ccb': `
            <p><strong>Explica√ß√£o sobre C√©dula de Cr√©dito Banc√°rio (CCB)</strong></p>
            <p>A CCB √© um t√≠tulo de cr√©dito que representa uma promessa de pagamento. √â amplamente utilizada em opera√ß√µes de cr√©dito pessoal e empresarial.</p>
            <p>Possui caracter√≠sticas espec√≠ficas como prazo, taxa de juros e garantias, conforme estabelecido no contrato.</p>
        `
    };
    
    return explicacoesPadrao[tema.toLowerCase()] || `<p>Explica√ß√£o sobre ${tema} n√£o dispon√≠vel no momento. Consulte nossa equipe para mais informa√ß√µes.</p>`;
}

// ===== CONFIGURA√á√ïES DE SEGURAN√áA =====

// Middleware de seguran√ßa
app.use(cors({
    origin: [
        'http://localhost:3000', 
        'http://127.0.0.1:3000', 
        'file://',
        'https://velo-xxx.vercel.app',
        'https://velo.vercel.app',
        'https://velotax-bot.vercel.app'
    ],
    credentials: true
}));

// Headers de seguran√ßa
app.use((req, res, next) => {
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
    next();
});

// For√ßar HTTPS em produ√ß√£o
if (process.env.NODE_ENV === 'production' || process.env.VERCEL) {
    app.use((req, res, next) => {
        if (req.header('x-forwarded-proto') !== 'https') {
            res.redirect(`https://${req.header('host')}${req.url}`);
        } else {
            next();
        }
    });
}

app.use(express.json());
app.use(express.static('.'));

// Rate limiting simples
const rateLimit = new Map();
const RATE_LIMIT_WINDOW = 60000; // 1 minuto
const RATE_LIMIT_MAX = 10; // 10 requests por minuto

// Middleware de rate limiting
function rateLimitMiddleware(req, res, next) {
    const clientIP = req.ip || req.connection.remoteAddress;
    const now = Date.now();
    
    if (!rateLimit.has(clientIP)) {
        rateLimit.set(clientIP, { count: 1, resetTime: now + RATE_LIMIT_WINDOW });
        return next();
    }
    
    const clientData = rateLimit.get(clientIP);
    
    if (now > clientData.resetTime) {
        rateLimit.set(clientIP, { count: 1, resetTime: now + RATE_LIMIT_WINDOW });
        return next();
    }
    
    if (clientData.count >= RATE_LIMIT_MAX) {
        return res.status(429).json({ 
            error: 'Rate limit exceeded',
            message: 'Muitas requisi√ß√µes. Tente novamente em 1 minuto.'
        });
    }
    
    clientData.count++;
    next();
}

// ===== FUN√á√ïES DE SEGURAN√áA =====

// Fun√ß√£o auxiliar para carregar vari√°veis de um arquivo espec√≠fico
function loadEnvFromFile(filePath) {
    try {
        console.log('üìÅ Carregando arquivo de configura√ß√£o:', filePath);
        const envContent = fs.readFileSync(filePath, 'utf8');
        const envVars = {};
        
        const lines = envContent.split('\n');
        for (const line of lines) {
            const trimmedLine = line.trim();
            
            if (trimmedLine.startsWith('#') || trimmedLine === '') {
                continue;
            }
            
            const equalIndex = trimmedLine.indexOf('=');
            if (equalIndex === -1) {
                continue;
            }
            
            const key = trimmedLine.substring(0, equalIndex).trim();
            const value = trimmedLine.substring(equalIndex + 1).trim();
            const cleanValue = value.replace(/^["']|["']$/g, '');
            
            envVars[key] = cleanValue;
        }
        
        console.log(`‚úÖ ${Object.keys(envVars).length} vari√°veis carregadas de ${path.basename(filePath)}`);
        if (envVars.GOOGLE_CLIENT_ID) {
            console.log('üîß GOOGLE_CLIENT_ID carregado:', envVars.GOOGLE_CLIENT_ID);
        }
        
        return envVars;
    } catch (error) {
        console.error('‚ùå Erro ao carregar arquivo:', error);
        return {};
    }
}

// Carregar vari√°veis de ambiente do arquivo .env ou process.env (Vercel)
function loadEnvFile() {
    try {
        // Se estiver na Vercel (NODE_ENV=production), usar process.env
        if (process.env.NODE_ENV === 'production' || process.env.VERCEL) {
            console.log('üåê Carregando vari√°veis de ambiente da Vercel (process.env)');
            const envVars = {
                OPENAI_API_KEY: process.env.OPENAI_API_KEY,
                OPENAI_MODEL: process.env.OPENAI_MODEL || 'gpt-4o',
                OPENAI_TEMPERATURE: process.env.OPENAI_TEMPERATURE || '0.7',
                OPENAI_MAX_TOKENS: process.env.OPENAI_MAX_TOKENS || '2000',
                OPENAI_BASE_URL: process.env.OPENAI_BASE_URL || 'https://api.openai.com/v1',
                MAX_API_CALLS_PER_HOUR: process.env.MAX_API_CALLS_PER_HOUR || '100',
                APP_NAME: process.env.APP_NAME || 'Velotax Bot',
                APP_VERSION: process.env.APP_VERSION || '2.0.0',
                DEBUG_MODE: process.env.DEBUG_MODE || 'false',
                LOG_LEVEL: process.env.LOG_LEVEL || 'info',
                GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID || '108948157850402889475',
                DOMINIO_PERMITIDO: process.env.DOMINIO_PERMITIDO || '@velotax.com.br'
            };
            
            console.log(`‚úÖ ${Object.keys(envVars).filter(k => envVars[k]).length} vari√°veis carregadas do process.env`);
            return envVars;
        }
        
        // Para desenvolvimento local, tentar carregar do arquivo .env primeiro
        let envPath = path.join(__dirname, '.env');
        let envVars = {};
        
        if (fs.existsSync(envPath)) {
            console.log('üìÅ Carregando arquivo .env...');
            envVars = loadEnvFromFile(envPath);
        }
        
        // Se n√£o encontrou GOOGLE_CLIENT_ID no .env, tentar config.env
        if (!envVars.GOOGLE_CLIENT_ID) {
            const configEnvPath = path.join(__dirname, 'config.env');
            if (fs.existsSync(configEnvPath)) {
                console.log('üìÅ GOOGLE_CLIENT_ID n√£o encontrado no .env, carregando config.env...');
                const configVars = loadEnvFromFile(configEnvPath);
                // Mesclar vari√°veis, priorizando config.env para GOOGLE_CLIENT_ID
                envVars = { ...envVars, ...configVars };
            }
        }
        
        // Log final das vari√°veis carregadas
        console.log('üîß Vari√°veis finais carregadas:');
        console.log('  - GOOGLE_CLIENT_ID:', envVars.GOOGLE_CLIENT_ID || 'N√ÉO ENCONTRADO');
        console.log('  - DOMINIO_PERMITIDO:', envVars.DOMINIO_PERMITIDO || 'N√ÉO ENCONTRADO');
        
        if (Object.keys(envVars).length === 0) {
            console.warn('‚ö†Ô∏è Nenhum arquivo de configura√ß√£o encontrado');
            return {};
        }
        
        return envVars;
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar vari√°veis de ambiente:', error);
        return {};
    }
}

// Validar chave da API
function validateApiKey(apiKey) {
    if (!apiKey || typeof apiKey !== 'string') {
        return false;
    }
    
    if (!apiKey.startsWith('sk-')) {
        return false;
    }
    
    if (apiKey.length < 20) {
        return false;
    }
    
    return true;
}

// Criptografar dados sens√≠veis
function encryptSensitiveData(data, key) {
    try {
        const cipher = crypto.createCipher('aes-256-cbc', key);
        let encrypted = cipher.update(JSON.stringify(data), 'utf8', 'hex');
        encrypted += cipher.final('hex');
        return encrypted;
    } catch (error) {
        console.error('Erro ao criptografar dados:', error);
        return null;
    }
}

// Descriptografar dados sens√≠veis
function decryptSensitiveData(encryptedData, key) {
    try {
        const decipher = crypto.createDecipher('aes-256-cbc', key);
        let decrypted = decipher.update(encryptedData, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return JSON.parse(decrypted);
    } catch (error) {
        console.error('Erro ao descriptografar dados:', error);
        return null;
    }
}

// ===== ROTAS DE API =====

// Endpoint para registrar acesso √† interface
app.post('/api/registrar-acesso', rateLimitMiddleware, (req, res) => {
    try {
        const { acao, usuario } = req.body;
        const ip = req.ip || req.connection.remoteAddress;
        const userAgent = req.get('User-Agent') || '';
        
        const acessoData = {
            acao: acao || 'Acesso',
            usuario: usuario || 'An√¥nimo',
            ip: ip,
            userAgent: userAgent,
            duracaoSessao: 0,
            status: 'Sucesso'
        };
        
        // Registrar no Google Sheets se ativo (TEMPORARIAMENTE DESABILITADO)
        // if (googleSheetsIntegration && googleSheetsIntegration.isActive()) {
        //     try {
        //         googleSheetsIntegration.registrarRespostaCoerente(respostaData);
        //     } catch (error) {
        //         console.error('‚ùå Erro ao registrar resposta coerente no Google Sheets:', error.message);
        //     }
        // }
        
        res.json({
            success: true,
            message: 'Acesso registrado com sucesso'
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao registrar acesso:', error);
        res.status(500).json({
            success: false,
            message: 'Erro ao registrar acesso'
        });
    }
});

// Rota para verificar status do servidor
app.get('/api/status', rateLimitMiddleware, (req, res) => {
    try {
        const envVars = loadEnvFile();
        const hasApiKey = validateApiKey(envVars.OPENAI_API_KEY);
        
    res.json({
            success: true,
        status: 'online',
            apiKeyConfigured: hasApiKey,
            environment: process.env.NODE_ENV || 'development',
            vercel: !!process.env.VERCEL,
        timestamp: new Date().toISOString(),
            version: '2.0.0'
        });
        
    } catch (error) {
        console.error('Erro ao verificar status:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Rota para obter configura√ß√µes p√∫blicas (sem dados sens√≠veis)
app.get('/api/config/public', rateLimitMiddleware, (req, res) => {
    try {
        const envVars = loadEnvFile();
        
        // Retornar apenas configura√ß√µes p√∫blicas
        const publicConfig = {
            OPENAI_MODEL: envVars.OPENAI_MODEL || 'gpt-4o',
            OPENAI_TEMPERATURE: envVars.OPENAI_TEMPERATURE || '0.7',
            OPENAI_MAX_TOKENS: envVars.OPENAI_MAX_TOKENS || '2000',
            OPENAI_BASE_URL: envVars.OPENAI_BASE_URL || 'https://api.openai.com/v1',
            MAX_API_CALLS_PER_HOUR: envVars.MAX_API_CALLS_PER_HOUR || '100',
            APP_NAME: envVars.APP_NAME || 'Velotax Bot',
            APP_VERSION: envVars.APP_VERSION || '2.0.0',
            DEBUG_MODE: envVars.DEBUG_MODE || 'false',
            LOG_LEVEL: envVars.LOG_LEVEL || 'info',
            apiKeyConfigured: validateApiKey(envVars.OPENAI_API_KEY)
        };
        
        res.json({
            success: true,
            config: publicConfig,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('Erro ao obter configura√ß√µes p√∫blicas:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: 'N√£o foi poss√≠vel carregar as configura√ß√µes'
        });
    }
});

// Rota para validar chave da API (sem expor a chave)
app.post('/api/validate-key', rateLimitMiddleware, (req, res) => {
    try {
        const { apiKey } = req.body;
        
        if (!apiKey) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o fornecida'
            });
        }
        
        const isValid = validateApiKey(apiKey);
        
        if (isValid) {
            res.json({
                success: true,
                message: 'Chave da API v√°lida',
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(400).json({
                success: false,
                error: 'Chave da API inv√°lida',
                message: 'Formato ou tamanho da chave incorreto'
            });
        }
        
    } catch (error) {
        console.error('Erro ao validar chave:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Rota para testar conex√£o com OpenAI
app.post('/api/test-openai', rateLimitMiddleware, async (req, res) => {
    try {
        const { apiKey } = req.body;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API inv√°lida'
            });
        }
        
        // Fazer teste simples com OpenAI
        const response = await fetch('https://api.openai.com/v1/models', {
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            res.json({
                success: true,
                message: 'Conex√£o com OpenAI bem-sucedida',
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(400).json({
                success: false,
                error: 'Erro na conex√£o com OpenAI',
                message: 'Verifique sua chave da API'
            });
        }
        
    } catch (error) {
        console.error('Erro ao testar OpenAI:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: 'N√£o foi poss√≠vel testar a conex√£o'
        });
    }
});

// Rota para gerar modera√ß√£o via API OpenAI
app.post('/api/generate-moderation', rateLimitMiddleware, async (req, res) => {
    try {
        const envVars = loadEnvFile();
        const apiKey = envVars.OPENAI_API_KEY;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o configurada ou inv√°lida'
            });
        }
        
        const { dadosModeracao } = req.body;
        
        if (!dadosModeracao) {
            return res.status(400).json({
                success: false,
                error: 'Dados de modera√ß√£o n√£o fornecidos'
            });
        }
        
        // Obter feedbacks relevantes para melhorar a gera√ß√£o de modera√ß√£o
        const feedbacksRelevantes = getRelevantFeedbacks('moderacao', {
            motivoNegativa: dadosModeracao.motivoModeracao
        });
        
        // Obter modelos de modera√ß√£o aprovados
        const modelosRelevantes = getModelosModeracaoRelevantes(dadosModeracao.motivoModeracao);
        
        let conhecimentoFeedback = '';
        
        // PRIORIDADE 1: MODELOS APROVADOS (seguir este padr√£o)
        if (modelosRelevantes.length > 0) {
            conhecimentoFeedback = '\n\n‚úÖ MODELOS DE MODERA√á√ÉO APROVADOS (SEGUIR ESTE PADR√ÉO):\n';
            conhecimentoFeedback += `Baseado em ${modelosRelevantes.length} modera√ß√µes aprovadas para "${dadosModeracao.motivoModeracao}":\n\n`;
            
            modelosRelevantes.forEach((modelo, index) => {
                conhecimentoFeedback += `${index + 1}. üìÖ Data: ${modelo.timestamp}\n`;
                conhecimentoFeedback += `   üéØ Motivo: ${modelo.motivoModeracao}\n`;
                conhecimentoFeedback += `   üìù Linha de racioc√≠nio: "${modelo.linhaRaciocinio.substring(0, 200)}..."\n`;
                conhecimentoFeedback += `   ‚úÖ Texto aprovado: "${modelo.textoModeracao.substring(0, 200)}..."\n\n`;
            });
            
            conhecimentoFeedback += 'üéØ INSTRU√á√ÉO CR√çTICA: Use estes modelos aprovados como refer√™ncia para gerar uma modera√ß√£o de alta qualidade, seguindo a mesma estrutura e abordagem.\n';
        }
        
        // PRIORIDADE 2: FEEDBACKS DE ERROS (evitar estes problemas)
        if (feedbacksRelevantes.length > 0) {
            if (conhecimentoFeedback) {
                conhecimentoFeedback += '\n\n‚ö†Ô∏è ERROS IDENTIFICADOS (EVITAR):\n';
            } else {
                conhecimentoFeedback = '\n\nüß† CONHECIMENTO BASEADO EM FEEDBACKS ANTERIORES DE MODERA√á√ÉO:\n';
            }
            
            conhecimentoFeedback += `Baseado em ${feedbacksRelevantes.length} modera√ß√µes negadas anteriormente, evite os seguintes erros:\n\n`;
            
            feedbacksRelevantes.forEach((fb, index) => {
                conhecimentoFeedback += `${index + 1}. ‚ùå ERRO IDENTIFICADO: "${fb.motivoNegativa}"\n`;
                conhecimentoFeedback += `   üìù Texto original negado: "${fb.textoNegado.substring(0, 200)}..."\n`;
                conhecimentoFeedback += `   ‚úÖ Texto reformulado aprovado: "${fb.textoReformulado.substring(0, 200)}..."\n\n`;
            });
            
            conhecimentoFeedback += 'üéØ INSTRU√á√ÉO CR√çTICA: Use este conhecimento para evitar erros similares e aplicar as corre√ß√µes identificadas.\n';
        }
        
        const prompt = `
üìå SCRIPT ESTRUTURADO PARA FORMULA√á√ÉO DE MODERA√á√ÉO RA

Voc√™ √© respons√°vel por elaborar solicita√ß√µes de modera√ß√£o no Reclame Aqui seguindo o fluxo l√≥gico estruturado abaixo.

INFORMA√á√ïES DISPON√çVEIS:
- Solicita√ß√£o do cliente: ${dadosModeracao.solicitacaoCliente}
- Resposta da empresa: ${dadosModeracao.respostaEmpresa}
- Considera√ß√£o final do consumidor: ${dadosModeracao.consideracaoFinal}
- Motivo da modera√ß√£o: ${dadosModeracao.motivoModeracao}

${conhecimentoFeedback}

‚öôÔ∏è FLUXO L√ìGICO OBRIGAT√ìRIO (siga sem pular etapas):

1. AN√ÅLISE DO CONTE√öDO REAL:
- Analise a SOLICITA√á√ÉO DO CLIENTE: identifique o problema alegado, acusa√ß√µes feitas, pedidos solicitados
- Analise a RESPOSTA DA EMPRESA: verifique se a empresa respondeu adequadamente, se ofereceu solu√ß√£o, se esclareceu fatos
- Analise a CONSIDERA√á√ÉO FINAL DO CONSUMIDOR: verifique se o cliente aceitou a solu√ß√£o, se insistiu no problema, se trouxe novas alega√ß√µes, se omitiu informa√ß√µes

2. CONSULTA E VALIDA√á√ÉO NORMATIVA (etapa obrigat√≥ria):
Com base no conte√∫do analisado, verifique os 3 manuais oficiais do RA:
- Manual Geral de Modera√ß√£o
- Manual de Modera√ß√£o RA Reviews  
- Manual de Modera√ß√£o ‚Äì Bancos, Institui√ß√µes Financeiras e Meios

Identifique viola√ß√µes espec√≠ficas:
- H√° informa√ß√µes falsas ou divergentes da realidade no conte√∫do?
- O caso j√° estava resolvido antes da abertura da reclama√ß√£o?
- Houve omiss√£o da solu√ß√£o aplicada na plataforma pelo cliente?
- H√° linguagem ofensiva, acusa√ß√µes gen√©ricas ou sem provas?
- Existe duplicidade (mesmo cliente, mesmo caso)?
- Para bancos/financeiras: h√° cita√ß√£o incorreta de cl√°usula contratual, ou omiss√£o de previs√£o contratual aceita pelo cliente?

3. REVIS√ÉO CONTRATUAL E FACTUAL:
- Confronte o conte√∫do da reclama√ß√£o/considera√ß√£o com registros internos e cl√°usulas contratuais
- Identifique diverg√™ncias entre o que foi alegado e os fatos reais
- Verifique se h√° omiss√£o de informa√ß√µes importantes pelo cliente
- Confirme se a solu√ß√£o j√° foi implementada e n√£o foi mencionada pelo cliente

4. CONSTRU√á√ÉO DA LINHA DE RACIOC√çNIO INTERNA:
Esse bloco n√£o vai para o RA, mas √© obrigat√≥rio na sa√≠da. Estrutura:
- An√°lise do conte√∫do: resuma o que o cliente alegou, como a empresa respondeu, e o que o cliente disse na considera√ß√£o final
- Fatos reais comprovados: descreva o que realmente ocorreu, com datas, registros e documentos (internos ou oficiais)
- Diverg√™ncia/viola√ß√£o identificada: aponte especificamente onde o conte√∫do (solicita√ß√£o, resposta ou considera√ß√£o) foge da realidade, est√° desatualizado ou infringe regras do RA
- Base normativa: indique explicitamente:
  * Qual manual do RA d√° respaldo (citar manual + se√ß√£o, se aplic√°vel)
  * Qual cl√°usula contratual ou termo aceito pelo cliente fundamenta o pedido
  * Qual regra espec√≠fica foi violada pelo conte√∫do analisado

5. CONSTRU√á√ÉO DA RESPOSTA FINAL DE MODERA√á√ÉO:
Esse √© o texto que vai ser enviado ao RA. Deve ser:
- Baseado na an√°lise real do conte√∫do (solicita√ß√£o, resposta, considera√ß√£o)
- Objetivo e t√©cnico
- Impessoal (sem "eu", "n√≥s sentimos", etc.)
- Sem tom emocional
- Estruturado em 3 par√°grafos curtos
- Focado nas viola√ß√µes espec√≠ficas identificadas no conte√∫do analisado

MODELO FIXO OBRIGAT√ìRIO - USE EXATAMENTE ESTA ESTRUTURA:

TEXTO FINAL DE MODERA√á√ÉO (a ser enviado ao RA):
"Prezados,

Solicitamos a modera√ß√£o da reclama√ß√£o em quest√£o, tendo em vista que [explique o motivo objetivo baseado na an√°lise do conte√∫do real - solicita√ß√£o, resposta e considera√ß√£o final do consumidor].

Conforme registros internos e documenta√ß√£o de suporte, [descrever de forma resumida os fatos corretos que divergem do que foi apresentado pelo cliente]. Ressaltamos que [especificar qual parte do conte√∫do - solicita√ß√£o, resposta ou considera√ß√£o - diverge da realidade], enquadrando-se nas hip√≥teses de modera√ß√£o previstas no [manual aplic√°vel espec√≠fico].

Dessa forma, solicitamos a adequa√ß√£o ou exclus√£o da publica√ß√£o, conforme regras vigentes da plataforma."

‚ö†Ô∏è IMPORTANTE: O texto final DEVE seguir EXATAMENTE esta estrutura de 3 par√°grafos. N√ÉO use outros formatos como "Prezados Senhores", "Atenciosamente", ou estruturas diferentes.

6. SA√çDA FINAL OBRIGAT√ìRIA:
A resposta deve conter EXATAMENTE dois blocos:
(1) LINHA DE RACIOC√çNIO INTERNA (explica√ß√£o do processo)
(2) TEXTO FINAL DE MODERA√á√ÉO (a ser enviado ao RA)

üìã DICAS CR√çTICAS PARA FORMULA√á√ÉO DE MODERA√á√ÉO:

1. CONSULTE SEMPRE OS MANUAIS DO RA:
- Manual Geral de Modera√ß√£o ‚Üí regras universais (informa√ß√£o falsa, ofensas, duplicidade)
- Manual RA Reviews ‚Üí foco em avalia√ß√µes e coment√°rios de reputa√ß√£o
- Manual de Bancos, Institui√ß√µes Financeiras e Meios ‚Üí regras espec√≠ficas para opera√ß√µes financeiras, contratos, CCB, termos aceitos
‚ö†Ô∏è N√ÉO PULE ESSA PARTE: o RA pode negar a modera√ß√£o se o pedido n√£o se apoiar nas regras deles

2. VERIFIQUE OS REGISTROS INTERNOS ANTES DE ESCREVER:
- Data da contrata√ß√£o ou opera√ß√£o
- Status real da solicita√ß√£o (ex.: quita√ß√£o antecipada, reagendamento BB, restitui√ß√£o no eCAC)
- Situa√ß√£o da chave Pix (se estava vinculada, portabilizada, ou desvinculada)
- Evid√™ncias objetivas: prints, protocolos, comprovantes

3. COMPARE A RECLAMA√á√ÉO COM OS FATOS:
- O cliente alegou algo que j√° foi resolvido antes da abertura no RA?
- H√° omiss√£o da solu√ß√£o aplicada?
- A descri√ß√£o do cliente contraria cl√°usulas aceitas em contrato (ex.: v√≠nculo da chave Pix na CCB)?
- O texto cont√©m linguagem ofensiva ou acusa√ß√£o sem prova?

4. NA LINHA DE RACIOC√çNIO INTERNA, NUNCA ESQUE√áA:
- Fatos reais comprovados ‚Üí cite data, registro, opera√ß√£o
- Diverg√™ncia clara ‚Üí onde o cliente erra ou omite
- Base normativa ‚Üí diga "conforme Manual Geral de Modera√ß√£o", "conforme Cl√°usula 7 da CCB", etc.

5. NA REDA√á√ÉO FINAL (TEXTO AO RA), SIGA O TOM:
- T√©cnico, claro e objetivo
- Impessoal (nada de "entendemos sua frustra√ß√£o")
- Estrutura em 3 par√°grafos curtos:
  * Motivo objetivo do pedido
  * Fatos internos que comprovam a diverg√™ncia
  * Solicita√ß√£o de adequa√ß√£o/exclus√£o conforme regras do RA

6. NUNCA PE√áA MODERA√á√ÉO POR MOTIVO FR√ÅGIL:
- N√£o basta "n√£o gostar" do coment√°rio
- S√≥ pe√ßa modera√ß√£o se:
  * Violou regra do RA
  * Est√° em desacordo com fatos comprov√°veis
  * Houve solu√ß√£o omitida
  * Houve quebra de diretriz contratual clara

7. CITE O MANUAL/CAP√çTULO SEMPRE QUE POSS√çVEL:
- Exemplo: "conforme previsto no Manual Geral de Modera√ß√£o (item de informa√ß√µes falsas)"
- Exemplo: "em linha com o Manual de Bancos, que prev√™ corre√ß√£o de informa√ß√µes contratuais incorretas"
- Isso mostra base s√≥lida e aumenta as chances de aprova√ß√£o

üéØ TRIP√â DA MODERA√á√ÉO: registre fatos + aponte diverg√™ncia + fundamente em manual/contrato

IMPORTANTE: Use o conhecimento dos feedbacks anteriores para gerar um texto de modera√ß√£o de alta qualidade desde o in√≠cio, evitando negativas do RA.

Execute o fluxo completo e forne√ßa os dois blocos solicitados.

FORMATO DE SA√çDA OBRIGAT√ìRIO:
(1) LINHA DE RACIOC√çNIO INTERNA (explica√ß√£o do processo)
[Conte√∫do da linha de racioc√≠nio interna]

(2) TEXTO FINAL DE MODERA√á√ÉO (a ser enviado ao RA)
[Texto seguindo EXATAMENTE o modelo fixo de 3 par√°grafos acima]

‚ö†Ô∏è CR√çTICO: O texto final DEVE come√ßar com "Prezados," e seguir exatamente a estrutura de 3 par√°grafos definida. N√ÉO use varia√ß√µes.

üö´ PROIBIDO: N√ÉO cite os dados de entrada (solicita√ß√£o do cliente, resposta da empresa, considera√ß√£o final) literalmente. Analise o conte√∫do e formule baseado na an√°lise, n√£o na cita√ß√£o dos dados.`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: envVars.OPENAI_MODEL || 'gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: 'Voc√™ √© um especialista em Reclame Aqui, com foco em formula√ß√£o de textos de modera√ß√£o.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: parseFloat(envVars.OPENAI_TEMPERATURE) || 0.7,
                max_tokens: parseInt(envVars.OPENAI_MAX_TOKENS) || 2000
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            let resposta = data.choices[0].message.content;
            
            // Valida√ß√£o p√≥s-processamento para modera√ß√£o - NUNCA usar resposta gen√©rica
            const palavrasGenericas = [
                'situa√ß√£o atual', 'detalhes espec√≠ficos n√£o foram compartilhados', 
                'nossa equipe est√° comprometida', 'analisar todas as solicita√ß√µes',
                'embora os detalhes espec√≠ficos', 'gostar√≠amos de assegurar',
                'caso a sua solicita√ß√£o envolva', 'estamos aqui para esclarecer',
                'sua situa√ß√£o atual necessitou', 'detalhes espec√≠ficos do seu caso'
            ];
            
            const temGenericas = palavrasGenericas.some(palavra => 
                resposta.toLowerCase().includes(palavra)
            );
            
            // Verificar se a resposta foi gerada com aprendizado (cont√©m conhecimentoFeedback)
            const temAprendizado = conhecimentoFeedback && conhecimentoFeedback.length > 100;
            
            if (temAprendizado) {
                console.log('‚úÖ Modera√ß√£o gerada com aprendizado aplicado - mantendo resposta da IA');
            } else {
                console.log('‚ö†Ô∏è Modera√ß√£o gen√©rica detectada - usando resposta da IA mesmo assim');
                console.log('üìù A IA deve seguir o script estruturado definido no prompt');
            }
            
            // Incrementar estat√≠stica global
            incrementarEstatisticaGlobal('moderacoes_geradas');
            
            res.json({
                success: true,
                result: resposta
            });
        } else {
            const errorData = await response.text();
            res.status(400).json({
                success: false,
                error: 'Erro na API OpenAI',
                details: errorData
            });
        }
    } catch (error) {
        console.error('Erro ao gerar modera√ß√£o:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Rota para gerar resposta RA via API OpenAI
app.post('/api/generate-response', rateLimitMiddleware, async (req, res) => {
    try {
        const envVars = loadEnvFile();
        const apiKey = envVars.OPENAI_API_KEY;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o configurada ou inv√°lida'
            });
        }
        
        const { dadosFormulario } = req.body;
        
        if (!dadosFormulario) {
            return res.status(400).json({
                success: false,
                error: 'Dados do formul√°rio n√£o fornecidos'
            });
        }
        
        console.log('üìã Dados recebidos do formul√°rio:', {
            tipo_solicitacao: dadosFormulario.tipo_solicitacao,
            motivo_solicitacao: dadosFormulario.motivo_solicitacao,
            solucao_implementada: dadosFormulario.solucao_implementada?.substring(0, 100) + '...',
            texto_cliente: dadosFormulario.texto_cliente?.substring(0, 100) + '...',
            historico_atendimento: dadosFormulario.historico_atendimento?.substring(0, 50) + '...',
            observacoes_internas: dadosFormulario.observacoes_internas?.substring(0, 50) + '...'
        });
        
        // Obter aprendizado direto do script para este tipo de situa√ß√£o (PRIORIT√ÅRIO)
        const aprendizadoScript = getAprendizadoTipoSituacao(dadosFormulario.tipo_solicitacao);
        
        // Obter feedbacks relevantes para melhorar a gera√ß√£o de resposta (COMPLEMENTAR)
        const feedbacksRelevantes = getRelevantFeedbacks('resposta', {
            tipoSituacao: dadosFormulario.tipo_solicitacao,
            motivoSolicitacao: dadosFormulario.motivo_solicitacao
        });
        
        // Obter modelos de respostas aprovadas para o mesmo tipo de situa√ß√£o
        const modelosRelevantes = getModelosRelevantes(dadosFormulario.tipo_solicitacao, dadosFormulario.motivo_solicitacao);
        
        console.log(`üîç Buscando aprendizado para: ${dadosFormulario.tipo_solicitacao} - ${dadosFormulario.motivo_solicitacao}`);
        console.log(`üß† APRENDIZADO DO SCRIPT: ${aprendizadoScript.feedbacks.length} feedbacks, ${aprendizadoScript.respostasCoerentes.length} respostas coerentes`);
        console.log(`üìö Feedbacks complementares: ${feedbacksRelevantes.length}`);
        console.log(`üéØ Modelos encontrados: ${modelosRelevantes.length}`);
        
        let conhecimentoFeedback = '';
        
        // Identificar padr√µes automaticamente se ainda n√£o foram identificados
        console.log('üîç Verificando se precisa identificar padr√µes:', {
            tipo: dadosFormulario.tipo_solicitacao,
            feedbacks: aprendizadoScript.feedbacks.length,
            padroes: aprendizadoScript.padroesIdentificados.length
        });
        
        if (aprendizadoScript.feedbacks.length > 0 && aprendizadoScript.padroesIdentificados.length === 0) {
            console.log('üîç Identificando padr√µes automaticamente para:', dadosFormulario.tipo_solicitacao);
            processarPadroesExistentes(dadosFormulario.tipo_solicitacao);
            // Recarregar aprendizado ap√≥s identificar padr√µes
            const aprendizadoAtualizado = getAprendizadoTipoSituacao(dadosFormulario.tipo_solicitacao);
            aprendizadoScript.padroesIdentificados = aprendizadoAtualizado.padroesIdentificados;
            aprendizadoScript.clausulasUsadas = aprendizadoAtualizado.clausulasUsadas;
            console.log('‚úÖ Padr√µes atualizados:', aprendizadoScript.padroesIdentificados.length);
        }
        
        // PRIORIDADE 1: APRENDIZADO DIRETO DO SCRIPT (mais recente e espec√≠fico)
        if (aprendizadoScript.feedbacks.length > 0 || aprendizadoScript.respostasCoerentes.length > 0 || aprendizadoScript.padroesIdentificados.length > 0) {
            conhecimentoFeedback = '\n\nüéì APRENDIZADO DIRETO DO SCRIPT DE FORMULA√á√ÉO (PRIORIT√ÅRIO):\n';
            conhecimentoFeedback += `Baseado em ${aprendizadoScript.feedbacks.length} feedbacks e ${aprendizadoScript.respostasCoerentes.length} respostas coerentes para "${dadosFormulario.tipo_solicitacao}":\n\n`;
            console.log('üß† Aplicando aprendizado do script:', {
                feedbacks: aprendizadoScript.feedbacks.length,
                respostasCoerentes: aprendizadoScript.respostasCoerentes.length,
                padroes: aprendizadoScript.padroesIdentificados.length
            });
            
            // Adicionar padr√µes identificados
            if (aprendizadoScript.padroesIdentificados.length > 0) {
                conhecimentoFeedback += 'üìã PADR√ïES IDENTIFICADOS (OBRIGAT√ìRIOS):\n';
                aprendizadoScript.padroesIdentificados.forEach((padrao, index) => {
                    conhecimentoFeedback += `${index + 1}. ${padrao}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar cl√°usulas usadas
            if (aprendizadoScript.clausulasUsadas.length > 0) {
                conhecimentoFeedback += '‚öñÔ∏è CL√ÅUSULAS CCB APLIC√ÅVEIS:\n';
                aprendizadoScript.clausulasUsadas.forEach(clausula => {
                    conhecimentoFeedback += `‚Ä¢ ${clausula}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar feedbacks recentes (CR√çTICO - EVITAR ESTES ERROS)
            if (aprendizadoScript.feedbacks.length > 0) {
                conhecimentoFeedback += '‚ö†Ô∏è FEEDBACKS RECENTES (EVITAR ESTES ERROS):\n';
                aprendizadoScript.feedbacks.slice(-5).forEach((fb, index) => {
                    conhecimentoFeedback += `${index + 1}. ERRO: "${fb.feedback}"\n`;
                    conhecimentoFeedback += `   RESPOSTA CORRIGIDA: "${fb.respostaReformulada.substring(0, 200)}..."\n\n`;
                });
            }
            
            // Adicionar respostas coerentes recentes (SEGUIR ESTE PADR√ÉO)
            if (aprendizadoScript.respostasCoerentes.length > 0) {
                conhecimentoFeedback += '‚úÖ RESPOSTAS COERENTES RECENTES (SEGUIR ESTE PADR√ÉO):\n';
                aprendizadoScript.respostasCoerentes.slice(-3).forEach((resp, index) => {
                    conhecimentoFeedback += `${index + 1}. Motivo: ${resp.motivoSolicitacao}\n`;
                    conhecimentoFeedback += `   RESPOSTA APROVADA: "${resp.respostaAprovada.substring(0, 250)}..."\n\n`;
                });
            }
            
            conhecimentoFeedback += 'üéØ INSTRU√á√ÉO CR√çTICA: Use este aprendizado direto do script para gerar uma resposta de alta qualidade desde o in√≠cio, aplicando os padr√µes identificados e evitando os erros documentados.\n';
        }
        
        // PRIORIDADE 2: FEEDBACKS COMPLEMENTARES (se n√£o houver aprendizado do script)
        else if (feedbacksRelevantes.length > 0) {
            conhecimentoFeedback = '\n\nüß† CONHECIMENTO BASEADO EM FEEDBACKS ANTERIORES:\n';
            conhecimentoFeedback += 'Com base em feedbacks anteriores de situa√ß√µes similares, siga estas diretrizes:\n\n';
            
            // Extrair padr√µes dos feedbacks e determinar cl√°usulas
            const padroes = new Set();
            const exemplos = [];
            const clausulasPorTipo = {};
            
            feedbacksRelevantes.forEach((fb, index) => {
                if (fb.feedback) {
                    padroes.add(fb.feedback);
                    
                    // Determinar cl√°usula baseada no tipo de situa√ß√£o
                    const tipoSituacao = fb.contexto.tipoSituacao || fb.dadosFormulario?.tipo_solicitacao || '';
                    let clausulaAplicavel = '';
                    
                    if (tipoSituacao.toLowerCase().includes('pix') || tipoSituacao.toLowerCase().includes('portabilidade') || tipoSituacao.toLowerCase().includes('chave')) {
                        clausulaAplicavel = 'Cl√°usula 7 - V√≠nculo da Chave Pix e Quita√ß√£o Autom√°tica';
                    } else if (tipoSituacao.toLowerCase().includes('quita√ß√£o') || tipoSituacao.toLowerCase().includes('liquida√ß√£o') || tipoSituacao.toLowerCase().includes('encerramento')) {
                        clausulaAplicavel = 'Cl√°usula 8 - Liquida√ß√£o Antecipada';
                    } else if (tipoSituacao.toLowerCase().includes('inadimpl√™ncia') || tipoSituacao.toLowerCase().includes('vencimento')) {
                        clausulaAplicavel = 'Cl√°usula 10 - Inadimpl√™ncia e Vencimento Antecipado';
                    } else if (tipoSituacao.toLowerCase().includes('exclus√£o') || tipoSituacao.toLowerCase().includes('dados') || tipoSituacao.toLowerCase().includes('lgpd')) {
                        clausulaAplicavel = 'Cl√°usula 14 - Prote√ß√£o de Dados (LGPD)';
                    }
                    
                    if (clausulaAplicavel) {
                        if (!clausulasPorTipo[tipoSituacao]) {
                            clausulasPorTipo[tipoSituacao] = new Set();
                        }
                        clausulasPorTipo[tipoSituacao].add(clausulaAplicavel);
                    }
                    
                    exemplos.push({
                        feedback: fb.feedback,
                        contexto: `${tipoSituacao} - ${fb.contexto.motivoSolicitacao || fb.dadosFormulario?.motivo_solicitacao || ''}`,
                        clausula: clausulaAplicavel,
                        resposta: fb.respostaReformulada.substring(0, 200)
                    });
                }
            });
            
            // Adicionar padr√µes identificados
            if (padroes.size > 0) {
                conhecimentoFeedback += 'üìã PADR√ïES IDENTIFICADOS (OBRIGAT√ìRIOS):\n';
                Array.from(padroes).forEach((padrao, index) => {
                    conhecimentoFeedback += `${index + 1}. ${padrao}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar cl√°usulas por tipo de situa√ß√£o
            if (Object.keys(clausulasPorTipo).length > 0) {
                conhecimentoFeedback += '‚öñÔ∏è CL√ÅUSULAS CCB POR TIPO DE SITUA√á√ÉO:\n';
                Object.keys(clausulasPorTipo).forEach(tipo => {
                    const clausulas = Array.from(clausulasPorTipo[tipo]);
                    conhecimentoFeedback += `‚Ä¢ **${tipo}**: ${clausulas.join(', ')}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar exemplos de boas pr√°ticas
            if (exemplos.length > 0) {
                conhecimentoFeedback += '‚úÖ EXEMPLOS DE BOAS PR√ÅTICAS:\n';
                exemplos.slice(0, 3).forEach((exemplo, index) => {
                    conhecimentoFeedback += `${index + 1}. Contexto: ${exemplo.contexto}\n`;
                    if (exemplo.clausula) {
                        conhecimentoFeedback += `   Cl√°usula CCB: ${exemplo.clausula}\n`;
                    }
                    conhecimentoFeedback += `   Aplicar: ${exemplo.feedback}\n`;
                    conhecimentoFeedback += `   Exemplo: "${exemplo.resposta}..."\n\n`;
                });
            }
            
            conhecimentoFeedback += 'üéØ INSTRU√á√ÉO: Use este conhecimento para gerar uma resposta de alta qualidade desde o in√≠cio, aplicando os padr√µes identificados e a cl√°usula CCB correta para cada tipo de situa√ß√£o.\n';
        }
        
        // PRIORIDADE 3: CONSULTAR FEEDBACKS_RESPOSTAS.JSON COMO BASE DE CONHECIMENTO
        const feedbacksRespostas = loadFeedbacksRespostas();
        if (feedbacksRespostas.respostas && feedbacksRespostas.respostas.length > 0) {
            const feedbacksRelevantesRespostas = feedbacksRespostas.respostas.filter(fb => {
                const tipoSituacao = fb.contexto?.tipoSituacao || fb.dadosFormulario?.tipo_solicitacao || '';
                return tipoSituacao.toLowerCase() === dadosFormulario.tipo_solicitacao.toLowerCase();
            });
            
            if (feedbacksRelevantesRespostas.length > 0) {
                if (!conhecimentoFeedback) {
                    conhecimentoFeedback = '\n\nüß† BASE DE CONHECIMENTO - FEEDBACKS DE RESPOSTAS RA:\n';
                } else {
                    conhecimentoFeedback += '\n\nüìö CONHECIMENTO COMPLEMENTAR - FEEDBACKS DE RESPOSTAS RA:\n';
                }
                
                conhecimentoFeedback += `Baseado em ${feedbacksRelevantesRespostas.length} feedbacks de respostas RA para "${dadosFormulario.tipo_solicitacao}":\n\n`;
                
                // Analisar problemas mais comuns
                const problemasComuns = {};
                const exemplosRespostas = [];
                
                feedbacksRelevantesRespostas.forEach(fb => {
                    if (fb.feedback) {
                        // Extrair problemas identificados
                        const problemas = fb.feedback.match(/informacoes-incorretas|nao-condiz-solucao|falta-clareza|nao-empatico|tom-inadequado/g);
                        if (problemas) {
                            problemas.forEach(problema => {
                                problemasComuns[problema] = (problemasComuns[problema] || 0) + 1;
                            });
                        }
                        
                        exemplosRespostas.push({
                            feedback: fb.feedback,
                            respostaReformulada: fb.respostaReformulada,
                            timestamp: fb.timestamp
                        });
                    }
                });
                
                // Adicionar problemas mais comuns
                if (Object.keys(problemasComuns).length > 0) {
                    conhecimentoFeedback += '‚ö†Ô∏è PROBLEMAS MAIS COMUNS IDENTIFICADOS:\n';
                    Object.entries(problemasComuns)
                        .sort(([,a], [,b]) => b - a)
                        .forEach(([problema, count]) => {
                            conhecimentoFeedback += `- ${problema.replace(/-/g, ' ').toUpperCase()}: ${count} ocorr√™ncias\n`;
                        });
                    conhecimentoFeedback += '\n';
                }
                
                // Adicionar exemplos de corre√ß√µes
                if (exemplosRespostas.length > 0) {
                    conhecimentoFeedback += '‚úÖ EXEMPLOS DE CORRE√á√ïES APLICADAS:\n';
                    exemplosRespostas.slice(0, 3).forEach((exemplo, index) => {
                        conhecimentoFeedback += `${index + 1}. Data: ${exemplo.timestamp}\n`;
                        conhecimentoFeedback += `   Problema: "${exemplo.feedback}"\n`;
                        conhecimentoFeedback += `   Corre√ß√£o aplicada: "${exemplo.respostaReformulada.substring(0, 200)}..."\n\n`;
                    });
                }
                
                conhecimentoFeedback += 'üéØ INSTRU√á√ÉO CR√çTICA: Use este conhecimento dos feedbacks de respostas RA para evitar os problemas identificados e aplicar as corre√ß√µes j√° validadas.\n';
            }
        }
        
        // Adicionar modelos de respostas aprovadas
        if (modelosRelevantes.length > 0) {
            conhecimentoFeedback += '\n\nüèÜ MODELOS DE RESPOSTAS APROVADAS:\n';
            conhecimentoFeedback += 'Baseado em respostas que foram marcadas como "coerentes" para situa√ß√µes similares, use estes exemplos como refer√™ncia:\n\n';
            
            modelosRelevantes.forEach((modelo, index) => {
                conhecimentoFeedback += `üìã **MODELO ${index + 1}** (${modelo.tipo_situacao}):\n`;
                conhecimentoFeedback += `   Motivo: ${modelo.motivo_solicitacao}\n`;
                conhecimentoFeedback += `   Resposta aprovada: "${modelo.respostaAprovada.substring(0, 300)}..."\n\n`;
            });
            
            conhecimentoFeedback += 'üéØ INSTRU√á√ÉO: Use estes modelos como base para estruturar sua resposta, adaptando o conte√∫do para os dados espec√≠ficos fornecidos acima.\n';
        }
        
        
        const prompt = `Voc√™ √© respons√°vel por redigir respostas da empresa Velotax no Reclame Aqui.

AN√ÅLISE OBRIGAT√ìRIA DE TODOS OS CAMPOS:

Voc√™ receber√° os seguintes campos que DEVEM ser analisados em conjunto:
- **Reclama√ß√£o do Cliente**: O que o cliente est√° solicitando/reclamando
- **Solu√ß√£o Implementada**: O que a empresa fez para resolver
- **Hist√≥rico de Atendimento**: Contexto de atendimentos anteriores
- **Observa√ß√µes Internas**: Informa√ß√µes adicionais da equipe
- **Tipo de Situa√ß√£o**: Categoria da solicita√ß√£o
- **Motivo da Solicita√ß√£o**: Raz√£o da solicita√ß√£o

DADOS RECEBIDOS PARA AN√ÅLISE COMPLETA:

**Tipo de solicita√ß√£o:** ${dadosFormulario.tipo_solicitacao}
**Motivo da solicita√ß√£o:** ${dadosFormulario.motivo_solicitacao}

**RECLAMA√á√ÉO DO CLIENTE (ANALISAR PRIMEIRO):**
"${dadosFormulario.texto_cliente}"

**SOLU√á√ÉO IMPLEMENTADA (BASE FACTUAL):**
"${dadosFormulario.solucao_implementada}"

**HIST√ìRICO DE ATENDIMENTO:**
${dadosFormulario.historico_atendimento || 'Nenhum'}

**OBSERVA√á√ïES INTERNAS:**
${dadosFormulario.observacoes_internas || 'Nenhuma'}

SUA TAREFA √â:

1. **ANALISAR** a reclama√ß√£o do cliente para entender exatamente o que ele est√° pedindo
2. **CONSIDERAR** a solu√ß√£o implementada como base factual do que foi feito
3. **INTEGRAR** o hist√≥rico de atendimento e observa√ß√µes internas para contexto completo
4. **FORMULAR** uma resposta personalizada que responda diretamente √† solicita√ß√£o do cliente
5. **ALINHAR** a resposta com a solu√ß√£o implementada, explicando como ela resolve a solicita√ß√£o

REGRAS OBRIGAT√ìRIAS:

- **NUNCA** copie literalmente o texto da "Solu√ß√£o implementada"
- **SEMPRE** formule uma resposta que responda diretamente √† reclama√ß√£o do cliente
- **SEMPRE** explique como a solu√ß√£o implementada resolve a solicita√ß√£o do cliente
- **SEMPRE** use linguagem cordial, objetiva e emp√°tica
- **SEMPRE** contextualize com refer√™ncias legais quando aplic√°vel (LGPD, CCB, etc.)
- **SEMPRE** deixe o texto pronto para publica√ß√£o no Reclame Aqui

AN√ÅLISE INTELIGENTE DAS CL√ÅUSULAS DA CCB:

Voc√™ deve analisar QUAL cl√°usula da CCB se aplica ao tipo de situa√ß√£o espec√≠fica:

**Cl√°usulas Dispon√≠veis:**
- **Cl√°usula 7**: V√≠nculo da Chave Pix e Quita√ß√£o Autom√°tica (para casos de chave Pix, portabilidade, libera√ß√£o)
- **Cl√°usula 8**: Liquida√ß√£o Antecipada (para casos de quita√ß√£o, liquida√ß√£o, encerramento)
- **Cl√°usula 10**: Inadimpl√™ncia e Vencimento Antecipado (para casos de inadimpl√™ncia, vencimento)
- **Cl√°usula 14**: Prote√ß√£o de Dados (LGPD) (para casos de exclus√£o de cadastro, dados pessoais)

**Como determinar a cl√°usula correta:**
1. **ANALISAR** o tipo de situa√ß√£o: ${dadosFormulario.tipo_solicitacao}
2. **IDENTIFICAR** qual cl√°usula se aplica baseado no tipo de situa√ß√£o
3. **USAR** o conhecimento dos feedbacks para aplicar a cl√°usula correta
4. **FUNDAMENTAR** a resposta com base na cl√°usula contratual espec√≠fica
5. **EXPLICAR** ao cliente como a cl√°usula justifica a solu√ß√£o implementada

**IMPORTANTE:** Nem todos os casos usam a Cl√°usula 14 (LGPD). Use a cl√°usula apropriada para cada tipo de situa√ß√£o.

IMPORTANTE:

A resposta deve ser uma formula√ß√£o completa que:
1. Reconhece a solicita√ß√£o do cliente
2. Analisa a solu√ß√£o implementada com base nas cl√°usulas da CCB
3. Explica como a solu√ß√£o resolve a solicita√ß√£o fundamentada contratualmente
4. Inclui contexto relevante do hist√≥rico e observa√ß√µes
5. Demonstra conhecimento das obriga√ß√µes contratuais
6. Mant√©m tom profissional e emp√°tico

${conhecimentoFeedback}

Formule uma resposta personalizada e completa que responda diretamente √† solicita√ß√£o do cliente, explicando como a solu√ß√£o implementada resolve o problema fundamentada nas cl√°usulas contratuais.`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: envVars.OPENAI_MODEL || 'gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: 'Voc√™ √© um assistente especializado em atendimento ao cliente para a empresa Velotax. Sua fun√ß√£o √© analisar TODOS os campos fornecidos (reclama√ß√£o do cliente, solu√ß√£o implementada, hist√≥rico de atendimento, observa√ß√µes internas) e formular uma resposta personalizada que responda diretamente √† solicita√ß√£o do cliente, explicando como a solu√ß√£o implementada resolve o problema. Use as cl√°usulas da CCB quando aplic√°vel para fundamentar a resposta.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: parseFloat(envVars.OPENAI_TEMPERATURE) || 0.7,
                max_tokens: parseInt(envVars.OPENAI_MAX_TOKENS) || 2000
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            let resposta = data.choices[0].message.content;
            
            // Valida√ß√£o p√≥s-processamento mais rigorosa e espec√≠fica
            const palavrasGenericas = [
                'situa√ß√£o atual', 'detalhes espec√≠ficos n√£o foram compartilhados', 
                'nossa equipe est√° comprometida', 'analisar todas as solicita√ß√µes',
                'embora os detalhes espec√≠ficos', 'gostar√≠amos de assegurar',
                'caso a sua solicita√ß√£o envolva', 'estamos aqui para esclarecer',
                'sua situa√ß√£o atual necessitou', 'detalhes espec√≠ficos do seu caso'
            ];
            
            const temGenericas = palavrasGenericas.some(palavra => 
                resposta.toLowerCase().includes(palavra)
            );
            
            // Verificar se a resposta menciona especificamente a solu√ß√£o implementada
            const mencionaSolucao = dadosFormulario.solucao_implementada && 
                resposta.toLowerCase().includes(dadosFormulario.solucao_implementada.toLowerCase().substring(0, 30));
            
            // Verificar se a resposta √© muito curta (menos de 300 caracteres)
            const muitoCurta = resposta.length < 300;
            
            // Verificar se menciona o tipo de solicita√ß√£o espec√≠fico
            const mencionaTipoSolicitacao = dadosFormulario.tipo_solicitacao && 
                resposta.toLowerCase().includes(dadosFormulario.tipo_solicitacao.toLowerCase());
            
            // Verificar se tem palavras conclusivas
            const palavrasConclusivas = ['confirmamos', 'conclu√≠do', 'finalizado', 'realizado', 'processado', 'implementado', 'resolvido', 'atendido', 'exclu√≠do', 'liberado', 'removido', 'cancelado'];
            const temConclusao = palavrasConclusivas.some(palavra => 
                resposta.toLowerCase().includes(palavra)
            );
            
            // Verificar se integra o hist√≥rico de atendimento
            const integraHistorico = dadosFormulario.historico_atendimento && 
                dadosFormulario.historico_atendimento !== 'Nenhum' &&
                resposta.toLowerCase().includes(dadosFormulario.historico_atendimento.toLowerCase().substring(0, 20));
            
            // Verificar se integra as observa√ß√µes internas
            const integraObservacoes = dadosFormulario.observacoes_internas && 
                dadosFormulario.observacoes_internas !== 'Nenhuma' &&
                resposta.toLowerCase().includes(dadosFormulario.observacoes_internas.toLowerCase().substring(0, 20));
            
            // Verificar se a resposta foi gerada com aprendizado (cont√©m conhecimentoFeedback)
            const temAprendizado = conhecimentoFeedback && conhecimentoFeedback.length > 100;
            
            if (temAprendizado) {
                console.log('‚úÖ Resposta gerada com aprendizado aplicado - mantendo resposta da IA');
            } else {
                console.log('‚ö†Ô∏è Resposta gen√©rica detectada - NUNCA usar resposta gen√©rica para RA/Modera√ß√µes');
                console.log('üìù Formulando resposta espec√≠fica baseada nos dados fornecidos pelo usu√°rio...');
                
                // Extrair informa√ß√µes espec√≠ficas dos dados
                const tipoSituacao = dadosFormulario.tipo_solicitacao;
                const solucao = dadosFormulario.solucao_implementada;
                const motivo = dadosFormulario.motivo_solicitacao;
                const historico = dadosFormulario.historico_atendimento;
                const observacoes = dadosFormulario.observacoes_internas;
                
                // Criar resposta mais espec√≠fica e completa baseada nos dados fornecidos
                let respostaEspecifica = `Prezado(a) cliente,

Agradecemos seu contato e reconhecemos sua solicita√ß√£o de ${tipoSituacao}${motivo ? ` - ${motivo}` : ''}.

${solucao ? `Confirmamos que ${solucao}.` : 'Analisamos sua solicita√ß√£o e implementamos a solu√ß√£o adequada.'}

${historico && historico !== 'Nenhum' ? `Considerando o hist√≥rico de atendimento: ${historico}. ` : ''}${observacoes && observacoes !== 'Nenhuma' ? `Observamos que: ${observacoes}. ` : ''}

O processo foi conclu√≠do conforme solicitado. Caso tenha d√∫vidas, nossa equipe est√° dispon√≠vel para esclarecimentos.

Atenciosamente,
Equipe Velotax`;
                
                // Adicionar contexto espec√≠fico baseado no tipo de situa√ß√£o
                if (tipoSituacao.toLowerCase().includes('exclus√£o') || tipoSituacao.toLowerCase().includes('exclusao')) {
                    respostaEspecifica = `Prezado(a) cliente,

Agradecemos seu contato e reconhecemos sua solicita√ß√£o de exclus√£o de cadastro${motivo ? ` - ${motivo}` : ''}.

${solucao ? `Confirmamos que ${solucao}.` : 'Analisamos sua solicita√ß√£o de exclus√£o e implementamos a solu√ß√£o adequada.'}

${historico && historico !== 'Nenhum' ? `Considerando o hist√≥rico de atendimento: ${historico}. ` : ''}${observacoes && observacoes !== 'Nenhuma' ? `Observamos que: ${observacoes}. ` : ''}

O processo foi conclu√≠do conforme solicitado. Caso tenha d√∫vidas, nossa equipe est√° dispon√≠vel para esclarecimentos.

Atenciosamente,
Equipe Velotax`;
                } else if (tipoSituacao.toLowerCase().includes('pix') || tipoSituacao.toLowerCase().includes('portabilidade')) {
                    respostaEspecifica = `Prezado(a) cliente,

Agradecemos seu contato e reconhecemos sua solicita√ß√£o de ${tipoSituacao}${motivo ? ` - ${motivo}` : ''}.

${solucao ? `Confirmamos que ${solucao}.` : 'Analisamos sua solicita√ß√£o de portabilidade e implementamos a solu√ß√£o adequada.'}

${historico && historico !== 'Nenhum' ? `Considerando o hist√≥rico de atendimento: ${historico}. ` : ''}${observacoes && observacoes !== 'Nenhuma' ? `Observamos que: ${observacoes}. ` : ''}

A opera√ß√£o foi realizada conforme estabelecido na Cl√°usula 7 de sua C√©dula de Cr√©dito Banc√°rio (CCB), que trata do v√≠nculo da chave Pix e quita√ß√£o autom√°tica.

Caso tenha d√∫vidas, nossa equipe est√° dispon√≠vel para esclarecimentos.

Atenciosamente,
Equipe Velotax`;
                } else if (tipoSituacao.toLowerCase().includes('quita√ß√£o') || tipoSituacao.toLowerCase().includes('liquida√ß√£o')) {
                    respostaEspecifica = `Prezado(a) cliente,

Agradecemos seu contato e reconhecemos sua solicita√ß√£o de ${tipoSituacao}${motivo ? ` - ${motivo}` : ''}.

${solucao ? `Confirmamos que ${solucao}.` : 'Analisamos sua solicita√ß√£o de quita√ß√£o e implementamos a solu√ß√£o adequada.'}

${historico && historico !== 'Nenhum' ? `Considerando o hist√≥rico de atendimento: ${historico}. ` : ''}${observacoes && observacoes !== 'Nenhuma' ? `Observamos que: ${observacoes}. ` : ''}

A opera√ß√£o foi realizada conforme estabelecido na Cl√°usula 8 de sua C√©dula de Cr√©dito Banc√°rio (CCB), que trata da liquida√ß√£o antecipada.

Caso tenha d√∫vidas, nossa equipe est√° dispon√≠vel para esclarecimentos.

Atenciosamente,
Equipe Velotax`;
                }
                
                resposta = respostaEspecifica;
            }
            
            // Incrementar estat√≠stica global
            incrementarEstatisticaGlobal('respostas_geradas');
            
            res.json({
                success: true,
                result: resposta
            });
        } else {
            const errorData = await response.text();
            res.status(400).json({
                success: false,
                error: 'Erro na API OpenAI',
                details: errorData
            });
        }
    } catch (error) {
        console.error('Erro ao gerar resposta RA:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Rota para reformular texto de modera√ß√£o ap√≥s negativa
app.post('/api/reformulate-moderation', rateLimitMiddleware, async (req, res) => {
    try {
        const envVars = loadEnvFile();
        const apiKey = envVars.OPENAI_API_KEY;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o configurada ou inv√°lida'
            });
        }
        
        const { motivoNegativa, textoNegado } = req.body;
        
        if (!motivoNegativa || !textoNegado) {
            return res.status(400).json({
                success: false,
                error: 'Motivo da negativa e texto negado s√£o obrigat√≥rios'
            });
        }
        
        // Obter feedbacks relevantes para melhorar a reformula√ß√£o de modera√ß√£o
        const feedbacksRelevantes = getRelevantFeedbacks('moderacao', {
            motivoNegativa: motivoNegativa
        });
        
        let conhecimentoFeedback = '';
        if (feedbacksRelevantes.length > 0) {
            conhecimentoFeedback = '\n\nCONHECIMENTO BASEADO EM FEEDBACKS ANTERIORES DE MODERA√á√ÉO:\n';
            feedbacksRelevantes.forEach((fb, index) => {
                conhecimentoFeedback += `${index + 1}. Motivo negativa: "${fb.motivoNegativa}"\n`;
                conhecimentoFeedback += `   Texto reformulado: "${fb.textoReformulado.substring(0, 200)}..."\n\n`;
            });
            conhecimentoFeedback += 'Use este conhecimento para evitar erros similares e melhorar a qualidade da reformula√ß√£o de modera√ß√£o.\n';
        }
        
        const prompt = `
üìå REFORMULA√á√ÉO DE TEXTO DE MODERA√á√ÉO NEGADO PELO RA

Voc√™ √© respons√°vel por reformular textos de modera√ß√£o negados pelo Reclame Aqui seguindo o script estruturado.

DADOS DE ENTRADA:
- Motivo da negativa: ${motivoNegativa}
- Texto de modera√ß√£o negado: ${textoNegado}

${conhecimentoFeedback}

‚öôÔ∏è FLUXO DE REFORMULA√á√ÉO OBRIGAT√ìRIO:

1. AN√ÅLISE DA NEGATIVA:
- Identifique por que o RA negou (ex.: "Resposta n√£o condizente", "sem rela√ß√£o com os fatos", "tom inadequado")
- Analise o conte√∫do original (solicita√ß√£o, resposta, considera√ß√£o) que gerou a negativa
- Compare com os manuais de modera√ß√£o e detecte onde o texto falhou
- Identifique os pontos problem√°ticos na an√°lise anterior

2. CONSULTA AOS MANUAIS:
Sempre verificar os 3 manuais oficiais do RA:
- Manual Geral de Modera√ß√£o
- Manual de Modera√ß√£o RA Reviews  
- Manual de Modera√ß√£o ‚Äì Bancos, Institui√ß√µes Financeiras e Meios

3. REFORMULA√á√ÉO ESTRUTURADA:
- Ajuste apenas o necess√°rio para alinhar ao motivo da negativa
- Reforce com base no manual aplic√°vel (sempre citar)
- Mantenha texto objetivo, t√©cnico e impessoal
- Direcione sempre ao RA (n√£o ao consumidor)

4. MODELO FIXO OBRIGAT√ìRIO PARA REFORMULA√á√ÉO - USE EXATAMENTE ESTA ESTRUTURA:

"Prezados,

Solicitamos a modera√ß√£o da reclama√ß√£o em quest√£o, tendo em vista que [explique o motivo objetivo corrigido, baseado no feedback da negativa].

Conforme registros internos e documenta√ß√£o de suporte, [descrever de forma resumida os fatos corretos]. Ressaltamos que a alega√ß√£o feita diverge da realidade, enquadrando-se nas hip√≥teses de modera√ß√£o previstas no [manual aplic√°vel espec√≠fico].

Dessa forma, solicitamos a adequa√ß√£o ou exclus√£o da publica√ß√£o, conforme regras vigentes da plataforma."

‚ö†Ô∏è IMPORTANTE: O texto reformulado DEVE seguir EXATAMENTE esta estrutura de 3 par√°grafos. N√ÉO use outros formatos.

5. REGRAS INQUEBR√ÅVEIS:
- N√£o inventar fatos
- Usar somente registros fornecidos + manuais
- Sempre citar manual aplic√°vel espec√≠fico
- Texto deve ser curto, objetivo e t√©cnico
- Pedido sempre direcionado ao RA
- Manter tom impessoal e formal

6. SA√çDA FINAL:
Forne√ßa APENAS o texto reformulado seguindo EXATAMENTE o modelo fixo de 3 par√°grafos acima, corrigindo especificamente o motivo da negativa.

‚ö†Ô∏è CR√çTICO: O texto DEVE come√ßar com "Prezados," e seguir exatamente a estrutura de 3 par√°grafos definida. N√ÉO use varia√ß√µes.

üö´ PROIBIDO: N√ÉO cite os dados de entrada literalmente. Analise o conte√∫do original e formule baseado na an√°lise, n√£o na cita√ß√£o dos dados.

üìã DICAS CR√çTICAS PARA REFORMULA√á√ÉO DE MODERA√á√ÉO:

1. CONSULTE SEMPRE OS MANUAIS DO RA:
- Manual Geral de Modera√ß√£o ‚Üí regras universais (informa√ß√£o falsa, ofensas, duplicidade)
- Manual RA Reviews ‚Üí foco em avalia√ß√µes e coment√°rios de reputa√ß√£o
- Manual de Bancos, Institui√ß√µes Financeiras e Meios ‚Üí regras espec√≠ficas para opera√ß√µes financeiras, contratos, CCB, termos aceitos
‚ö†Ô∏è N√ÉO PULE ESSA PARTE: o RA pode negar a modera√ß√£o se o pedido n√£o se apoiar nas regras deles

2. VERIFIQUE OS REGISTROS INTERNOS ANTES DE ESCREVER:
- Data da contrata√ß√£o ou opera√ß√£o
- Status real da solicita√ß√£o (ex.: quita√ß√£o antecipada, reagendamento BB, restitui√ß√£o no eCAC)
- Situa√ß√£o da chave Pix (se estava vinculada, portabilizada, ou desvinculada)
- Evid√™ncias objetivas: prints, protocolos, comprovantes

3. COMPARE A RECLAMA√á√ÉO COM OS FATOS:
- O cliente alegou algo que j√° foi resolvido antes da abertura no RA?
- H√° omiss√£o da solu√ß√£o aplicada?
- A descri√ß√£o do cliente contraria cl√°usulas aceitas em contrato (ex.: v√≠nculo da chave Pix na CCB)?
- O texto cont√©m linguagem ofensiva ou acusa√ß√£o sem prova?

4. NA REFORMULA√á√ÉO, CORRIJA ESPECIFICAMENTE:
- O motivo da negativa identificado pelo RA
- Analise novamente o conte√∫do original (solicita√ß√£o, resposta, considera√ß√£o) com foco na negativa
- Mantenha fatos reais comprovados ‚Üí cite data, registro, opera√ß√£o
- Aponte diverg√™ncia clara ‚Üí onde o conte√∫do analisado erra ou omite informa√ß√µes
- Base normativa ‚Üí diga "conforme Manual Geral de Modera√ß√£o", "conforme Cl√°usula 7 da CCB", etc.

5. NA REDA√á√ÉO FINAL (TEXTO AO RA), SIGA O TOM:
- T√©cnico, claro e objetivo
- Impessoal (nada de "entendemos sua frustra√ß√£o")
- Estrutura em 3 par√°grafos curtos:
  * Motivo objetivo do pedido
  * Fatos internos que comprovam a diverg√™ncia
  * Solicita√ß√£o de adequa√ß√£o/exclus√£o conforme regras do RA

6. NUNCA PE√áA MODERA√á√ÉO POR MOTIVO FR√ÅGIL:
- N√£o basta "n√£o gostar" do coment√°rio
- S√≥ pe√ßa modera√ß√£o se:
  * Violou regra do RA
  * Est√° em desacordo com fatos comprov√°veis
  * Houve solu√ß√£o omitida
  * Houve quebra de diretriz contratual clara

7. CITE O MANUAL/CAP√çTULO SEMPRE QUE POSS√çVEL:
- Exemplo: "conforme previsto no Manual Geral de Modera√ß√£o (item de informa√ß√µes falsas)"
- Exemplo: "em linha com o Manual de Bancos, que prev√™ corre√ß√£o de informa√ß√µes contratuais incorretas"
- Isso mostra base s√≥lida e aumenta as chances de aprova√ß√£o

üéØ TRIP√â DA MODERA√á√ÉO: registre fatos + aponte diverg√™ncia + fundamente em manual/contrato

IMPORTANTE: Use o conhecimento dos feedbacks anteriores para evitar erros similares e melhorar a qualidade da reformula√ß√£o de modera√ß√£o.`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: envVars.OPENAI_MODEL || 'gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: 'Voc√™ √© um especialista em Reclame Aqui, com foco em reformula√ß√£o de textos de modera√ß√£o negados.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: parseFloat(envVars.OPENAI_TEMPERATURE) || 0.7,
                max_tokens: parseInt(envVars.OPENAI_MAX_TOKENS) || 2000
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            const textoReformulado = data.choices[0].message.content;
            
            // Salvar feedback para aprendizado futuro
            addModeracaoFeedback(textoNegado, motivoNegativa, textoReformulado);
            
            res.json({
                success: true,
                result: textoReformulado
            });
        } else {
            const errorData = await response.text();
            res.status(400).json({
                success: false,
                error: 'Erro na API OpenAI',
                details: errorData
            });
        }
    } catch (error) {
        console.error('Erro ao reformular modera√ß√£o:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Rota para reformular resposta RA via API OpenAI
app.post('/api/reformulate-response', rateLimitMiddleware, async (req, res) => {
    try {
        const envVars = loadEnvFile();
        const apiKey = envVars.OPENAI_API_KEY;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API n√£o configurada ou inv√°lida'
            });
        }
        
        const { dadosFormulario, respostaAnterior, feedback } = req.body;
        
        if (!dadosFormulario || !respostaAnterior) {
            return res.status(400).json({
                success: false,
                error: 'Dados do formul√°rio e resposta anterior s√£o obrigat√≥rios'
            });
        }
        
        // Log do tipo de opera√ß√£o
        if (feedback) {
            console.log('üîÑ GERANDO NOVA RESPOSTA (feedback recebido - resposta anterior estava incorreta)');
            console.log('üìù Feedback:', feedback.substring(0, 100) + '...');
        } else {
            console.log('üîÑ REFORMULANDO RESPOSTA (sem feedback)');
        }
        
        // Obter aprendizado direto do script para este tipo de situa√ß√£o (PRIORIT√ÅRIO)
        const aprendizadoScript = getAprendizadoTipoSituacao(dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao);
        
        // Obter feedbacks relevantes para melhorar a reformula√ß√£o (COMPLEMENTAR)
        const feedbacksRelevantes = getRelevantFeedbacks('resposta', {
            tipoSituacao: dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao,
            motivoSolicitacao: dadosFormulario.motivo_solicitacao || dadosFormulario.motivoSolicitacao
        });
        
        console.log(`üîÑ REFORMULA√á√ÉO - Buscando aprendizado para: ${dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao}`);
        console.log(`üß† APRENDIZADO DO SCRIPT: ${aprendizadoScript.feedbacks.length} feedbacks, ${aprendizadoScript.respostasCoerentes.length} respostas coerentes`);
        console.log(`üìö Feedbacks complementares: ${feedbacksRelevantes.length}`);
        
        let conhecimentoFeedback = '';
        
        // PRIORIDADE 1: APRENDIZADO DIRETO DO SCRIPT (mais recente e espec√≠fico)
        if (aprendizadoScript.feedbacks.length > 0 || aprendizadoScript.respostasCoerentes.length > 0 || aprendizadoScript.padroesIdentificados.length > 0) {
            conhecimentoFeedback = '\n\nüéì APRENDIZADO DIRETO DO SCRIPT DE FORMULA√á√ÉO (PRIORIT√ÅRIO):\n';
            conhecimentoFeedback += `Baseado em ${aprendizadoScript.feedbacks.length} feedbacks e ${aprendizadoScript.respostasCoerentes.length} respostas coerentes para "${dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao}":\n\n`;
            
            console.log('üß† Aplicando aprendizado do script na reformula√ß√£o:', {
                feedbacks: aprendizadoScript.feedbacks.length,
                respostasCoerentes: aprendizadoScript.respostasCoerentes.length,
                padroes: aprendizadoScript.padroesIdentificados.length
            });
            
            // Adicionar padr√µes identificados
            if (aprendizadoScript.padroesIdentificados.length > 0) {
                conhecimentoFeedback += 'üìã PADR√ïES IDENTIFICADOS (OBRIGAT√ìRIOS):\n';
                aprendizadoScript.padroesIdentificados.forEach((padrao, index) => {
                    conhecimentoFeedback += `${index + 1}. ${padrao}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar cl√°usulas usadas
            if (aprendizadoScript.clausulasUsadas.length > 0) {
                conhecimentoFeedback += '‚öñÔ∏è CL√ÅUSULAS CCB APLIC√ÅVEIS:\n';
                aprendizadoScript.clausulasUsadas.forEach(clausula => {
                    conhecimentoFeedback += `‚Ä¢ ${clausula}\n`;
                });
                conhecimentoFeedback += '\n';
            }
            
            // Adicionar feedbacks recentes (CR√çTICO - EVITAR ESTES ERROS)
            if (aprendizadoScript.feedbacks.length > 0) {
                conhecimentoFeedback += '‚ö†Ô∏è FEEDBACKS RECENTES (EVITAR ESTES ERROS):\n';
                aprendizadoScript.feedbacks.slice(-5).forEach((fb, index) => {
                    conhecimentoFeedback += `${index + 1}. ERRO: "${fb.feedback}"\n`;
                    conhecimentoFeedback += `   RESPOSTA CORRIGIDA: "${fb.respostaReformulada.substring(0, 200)}..."\n\n`;
                });
            }
            
            // Adicionar respostas coerentes recentes (SEGUIR ESTE PADR√ÉO)
            if (aprendizadoScript.respostasCoerentes.length > 0) {
                conhecimentoFeedback += '‚úÖ RESPOSTAS COERENTES RECENTES (SEGUIR ESTE PADR√ÉO):\n';
                aprendizadoScript.respostasCoerentes.slice(-3).forEach((resp, index) => {
                    conhecimentoFeedback += `${index + 1}. Motivo: ${resp.motivoSolicitacao}\n`;
                    conhecimentoFeedback += `   RESPOSTA APROVADA: "${resp.respostaAprovada.substring(0, 250)}..."\n\n`;
                });
            }
            
            conhecimentoFeedback += 'üéØ INSTRU√á√ÉO CR√çTICA: Use este aprendizado direto do script para gerar uma resposta de alta qualidade, aplicando os padr√µes identificados e evitando os erros documentados.\n';
        }
        
        // PRIORIDADE 2: FEEDBACKS COMPLEMENTARES (se n√£o houver aprendizado do script)
        else if (feedbacksRelevantes.length > 0) {
            conhecimentoFeedback = '\n\nCONHECIMENTO BASEADO EM FEEDBACKS ANTERIORES:\n';
            feedbacksRelevantes.forEach((fb, index) => {
                conhecimentoFeedback += `${index + 1}. Feedback: "${fb.feedback}"\n`;
                conhecimentoFeedback += `   Resposta reformulada: "${fb.respostaReformulada.substring(0, 200)}..."\n\n`;
            });
            conhecimentoFeedback += 'Use este conhecimento para evitar erros similares e melhorar a qualidade da reformula√ß√£o.\n';
        }
        
        // PRIORIDADE 3: CONSULTAR FEEDBACKS_RESPOSTAS.JSON COMO BASE DE CONHECIMENTO (REFORMULA√á√ÉO)
        const feedbacksRespostasReformulacao = loadFeedbacksRespostas();
        if (feedbacksRespostasReformulacao.respostas && feedbacksRespostasReformulacao.respostas.length > 0) {
            const feedbacksRelevantesReformulacao = feedbacksRespostasReformulacao.respostas.filter(fb => {
                const tipoSituacao = fb.contexto?.tipoSituacao || fb.dadosFormulario?.tipo_solicitacao || '';
                return tipoSituacao.toLowerCase() === dadosFormulario.tipo_solicitacao.toLowerCase();
            });
            
            if (feedbacksRelevantesReformulacao.length > 0) {
                if (!conhecimentoFeedback) {
                    conhecimentoFeedback = '\n\nüß† BASE DE CONHECIMENTO - FEEDBACKS DE RESPOSTAS RA:\n';
                } else {
                    conhecimentoFeedback += '\n\nüìö CONHECIMENTO COMPLEMENTAR - FEEDBACKS DE RESPOSTAS RA:\n';
                }
                
                conhecimentoFeedback += `Baseado em ${feedbacksRelevantesReformulacao.length} feedbacks de respostas RA para "${dadosFormulario.tipo_solicitacao}":\n\n`;
                
                // Analisar problemas mais comuns para reformula√ß√£o
                const problemasComunsReformulacao = {};
                const exemplosReformulacao = [];
                
                feedbacksRelevantesReformulacao.forEach(fb => {
                    if (fb.feedback) {
                        // Extrair problemas identificados
                        const problemas = fb.feedback.match(/informacoes-incorretas|nao-condiz-solucao|falta-clareza|nao-empatico|tom-inadequado/g);
                        if (problemas) {
                            problemas.forEach(problema => {
                                problemasComunsReformulacao[problema] = (problemasComunsReformulacao[problema] || 0) + 1;
                            });
                        }
                        
                        exemplosReformulacao.push({
                            feedback: fb.feedback,
                            respostaReformulada: fb.respostaReformulada,
                            timestamp: fb.timestamp
                        });
                    }
                });
                
                // Adicionar problemas mais comuns
                if (Object.keys(problemasComunsReformulacao).length > 0) {
                    conhecimentoFeedback += '‚ö†Ô∏è PROBLEMAS MAIS COMUNS IDENTIFICADOS:\n';
                    Object.entries(problemasComunsReformulacao)
                        .sort(([,a], [,b]) => b - a)
                        .forEach(([problema, count]) => {
                            conhecimentoFeedback += `- ${problema.replace(/-/g, ' ').toUpperCase()}: ${count} ocorr√™ncias\n`;
                        });
                    conhecimentoFeedback += '\n';
                }
                
                // Adicionar exemplos de corre√ß√µes
                if (exemplosReformulacao.length > 0) {
                    conhecimentoFeedback += '‚úÖ EXEMPLOS DE CORRE√á√ïES APLICADAS:\n';
                    exemplosReformulacao.slice(0, 3).forEach((exemplo, index) => {
                        conhecimentoFeedback += `${index + 1}. Data: ${exemplo.timestamp}\n`;
                        conhecimentoFeedback += `   Problema: "${exemplo.feedback}"\n`;
                        conhecimentoFeedback += `   Corre√ß√£o aplicada: "${exemplo.respostaReformulada.substring(0, 200)}..."\n\n`;
                    });
                }
                
                conhecimentoFeedback += 'üéØ INSTRU√á√ÉO CR√çTICA: Use este conhecimento dos feedbacks de respostas RA para evitar os problemas identificados e aplicar as corre√ß√µes j√° validadas na reformula√ß√£o.\n';
            }
        }
        
        const prompt = `
TAREFA: ${feedback ? 'GERAR NOVA RESPOSTA' : 'REFORMULAR RESPOSTA'} do Reclame Aqui

DADOS DO CASO:
- Tipo de Situa√ß√£o: ${dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao}
- Motivo da Solicita√ß√£o: ${dadosFormulario.motivo_solicitacao || dadosFormulario.motivoSolicitacao}
- Solu√ß√£o Implementada: ${dadosFormulario.solucao_implementada || dadosFormulario.solucaoImplementada}
- Reclama√ß√£o do Cliente: ${dadosFormulario.texto_cliente || dadosFormulario.reclamacaoCliente}
- Hist√≥rico de Atendimento: ${dadosFormulario.historico_atendimento || dadosFormulario.historicoAtendimento}
- Observa√ß√µes Internas: ${dadosFormulario.observacoes_internas || dadosFormulario.observacoesInternas}

${feedback ? `
FEEDBACK DO OPERADOR (a resposta anterior estava incorreta):
${feedback}

INSTRU√á√ïES CR√çTICAS:
- A resposta anterior estava INCORRETA e n√£o deve ser usada como base
- GERE UMA NOVA RESPOSTA COMPLETA do zero
- Use APENAS os dados do caso acima como base
- Analise o feedback para entender o que estava errado
- Evite os erros identificados no feedback
- Foque na solu√ß√£o implementada e como ela resolve a solicita√ß√£o do cliente
- Seja espec√≠fico e conclusivo` : `
RESPOSTA ANTERIOR (para refer√™ncia):
${respostaAnterior}

INSTRU√á√ïES PARA REFORMULA√á√ÉO:
- Analise a resposta anterior e identifique pontos de melhoria
- Reformule para ser mais completa e eficaz
- Mantenha o tom profissional e emp√°tico
- Aborde todos os aspectos da reclama√ß√£o do cliente`}

${conhecimentoFeedback}

AN√ÅLISE OBRIGAT√ìRIA DE TODOS OS CAMPOS:

Voc√™ receber√° os seguintes campos que DEVEM ser analisados em conjunto:
- **Reclama√ß√£o do Cliente**: O que o cliente est√° solicitando/reclamando
- **Solu√ß√£o Implementada**: O que a empresa fez para resolver
- **Hist√≥rico de Atendimento**: Contexto de atendimentos anteriores
- **Observa√ß√µes Internas**: Informa√ß√µes adicionais da equipe
- **Tipo de Situa√ß√£o**: Categoria da solicita√ß√£o
- **Motivo da Solicita√ß√£o**: Raz√£o da solicita√ß√£o

SUA TAREFA √â:

1. **ANALISAR** a reclama√ß√£o do cliente para entender exatamente o que ele est√° pedindo
2. **CONSIDERAR** a solu√ß√£o implementada como base factual do que foi feito
3. **INTEGRAR** o hist√≥rico de atendimento e observa√ß√µes internas para contexto completo
4. **FORMULAR** uma resposta personalizada que responda diretamente √† solicita√ß√£o do cliente
5. **ALINHAR** a resposta com a solu√ß√£o implementada, explicando como ela resolve a solicita√ß√£o

REGRAS OBRIGAT√ìRIAS:

- **NUNCA** copie literalmente o texto da "Solu√ß√£o implementada"
- **SEMPRE** formule uma resposta que responda diretamente √† reclama√ß√£o do cliente
- **SEMPRE** explique como a solu√ß√£o implementada resolve a solicita√ß√£o do cliente
- **SEMPRE** use linguagem cordial, objetiva e emp√°tica
- **SEMPRE** contextualize com refer√™ncias legais quando aplic√°vel (LGPD, CCB, etc.)
- **SEMPRE** deixe o texto pronto para publica√ß√£o no Reclame Aqui

IMPORTANTE: Use o conhecimento dos feedbacks anteriores para evitar erros similares e melhorar a qualidade da resposta.

DIRETRIZES GERAIS:
1. TOM E ESTILO:
- Profissional, respeitoso e emp√°tico
- Linguagem clara e acess√≠vel
- Tom conciliador e solucionador
- Evite jarg√µes t√©cnicos desnecess√°rios

2. ESTRUTURA DA RESPOSTA:
a) Agradecimento e reconhecimento
b) Esclarecimento da situa√ß√£o
c) Solu√ß√£o apresentada/implementada
d) Compromisso de melhoria
e) Convite para contato direto

3. DIRETRIZES:
- Sempre reconhe√ßa o problema do cliente
- Explique as a√ß√µes tomadas de forma clara
- Demonstre compromisso com a satisfa√ß√£o
- Mantenha tom profissional e respeitoso
- Evite repeti√ß√µes desnecess√°rias
- Seja espec√≠fico e detalhado

Gere uma resposta reformulada que seja mais completa, eficaz e atenda aos pontos levantados no feedback.`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: envVars.OPENAI_MODEL || 'gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: 'Voc√™ √© um assistente especializado em atendimento ao cliente para a empresa Velotax, com foco em reformula√ß√£o de respostas do Reclame Aqui.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: parseFloat(envVars.OPENAI_TEMPERATURE) || 0.7,
                max_tokens: parseInt(envVars.OPENAI_MAX_TOKENS) || 2000
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            const respostaReformulada = data.choices[0].message.content;
            
            // Aplicar feedback diretamente no script de formula√ß√£o para aprendizado imediato
            if (feedback) {
                console.log('üìù Aplicando feedback diretamente no script de formula√ß√£o para aprendizado imediato');
                addFeedbackAprendizado(
                    dadosFormulario.tipo_solicitacao || dadosFormulario.tipoSituacao,
                    feedback,
                    respostaReformulada
                );
                
                // Tamb√©m salvar no arquivo de feedbacks de respostas para hist√≥rico completo
                console.log('üìù Salvando feedback no arquivo de feedbacks de respostas');
                addRespostaFeedback(
                    dadosFormulario,
                    respostaAnterior,
                    feedback,
                    respostaReformulada
                );
            }
            
            res.json({
                success: true,
                result: respostaReformulada
            });
        } else {
            const errorData = await response.text();
            res.status(400).json({
                success: false,
                error: 'Erro na API OpenAI',
                details: errorData
            });
        }
    } catch (error) {
        console.error('Erro ao reformular resposta RA:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Rota para obter configura√ß√µes do arquivo .env (apenas se chave for v√°lida)
app.post('/api/config/secure', rateLimitMiddleware, (req, res) => {
    try {
        const { apiKey } = req.body;
        
        if (!validateApiKey(apiKey)) {
            return res.status(401).json({
                success: false,
                error: 'Acesso negado',
                message: 'Chave da API inv√°lida'
            });
        }
        
        const envVars = loadEnvFile();
        
        // Verificar se a chave fornecida corresponde √† do arquivo .env
        const envApiKey = envVars.OPENAI_API_KEY;
        if (envApiKey && apiKey !== envApiKey) {
            return res.status(401).json({
                success: false,
                error: 'Acesso negado',
                message: 'Chave da API n√£o corresponde √† configura√ß√£o'
            });
        }
        
        // Retornar configura√ß√µes completas (sem a chave da API)
        const secureConfig = { ...envVars };
        delete secureConfig.OPENAI_API_KEY;
        delete secureConfig.ENCRYPTION_KEY;
        
        res.json({
            success: true,
            config: secureConfig,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('Erro ao obter configura√ß√µes seguras:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Rota para servir arquivos est√°ticos
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Middleware de tratamento de erros
app.use((err, req, res, next) => {
    console.error('Erro no servidor:', err);
    res.status(500).json({
        success: false,
        error: 'Erro interno do servidor',
        message: 'Algo deu errado. Tente novamente.'
    });
});

// Endpoint para visualizar feedbacks de respostas (aba Respostas RA)
app.get('/api/feedbacks/respostas', (req, res) => {
    try {
        const feedbacks = loadFeedbacksRespostas();
        res.json({
            success: true,
            data: feedbacks,
            tipo: 'respostas'
        });
    } catch (error) {
        console.error('Erro ao carregar feedbacks de respostas:', error);
        res.status(500).json({
        success: false,
            error: 'Erro ao carregar feedbacks de respostas'
        });
    }
});

// Endpoint para visualizar feedbacks de modera√ß√µes (aba Modera√ß√£o RA)
app.get('/api/feedbacks/moderacoes', (req, res) => {
    try {
        const feedbacks = loadFeedbacksModeracoes();
        res.json({
            success: true,
            data: feedbacks,
            tipo: 'moderacoes'
        });
    } catch (error) {
        console.error('Erro ao carregar feedbacks de modera√ß√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar feedbacks de modera√ß√µes'
        });
    }
});

// Endpoint para visualizar feedbacks de explica√ß√µes (aba Explica√ß√µes)
app.get('/api/feedbacks/explicacoes', (req, res) => {
    try {
        const feedbacks = loadFeedbacksExplicacoes();
        res.json({
            success: true,
            data: feedbacks,
            tipo: 'explicacoes'
        });
    } catch (error) {
        console.error('Erro ao carregar feedbacks de explica√ß√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar feedbacks de explica√ß√µes'
        });
    }
});

// Endpoint para visualizar aprendizado direto do script
app.get('/api/aprendizado-script', (req, res) => {
    try {
        const aprendizado = loadAprendizadoScript();
        res.json({
            success: true,
            data: aprendizado,
            tipo: 'aprendizado_script'
        });
    } catch (error) {
        console.error('Erro ao carregar aprendizado do script:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar aprendizado do script'
        });
    }
});

// Endpoint para visualizar aprendizado de um tipo espec√≠fico
app.get('/api/aprendizado-script/:tipoSituacao', (req, res) => {
    try {
        const { tipoSituacao } = req.params;
        const aprendizado = getAprendizadoTipoSituacao(tipoSituacao);
        res.json({
            success: true,
            data: aprendizado,
            tipoSituacao: tipoSituacao
        });
    } catch (error) {
        console.error('Erro ao carregar aprendizado do tipo:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar aprendizado do tipo'
        });
    }
});

// Endpoint para for√ßar processamento de padr√µes
app.post('/api/processar-padroes/:tipoSituacao', (req, res) => {
    try {
        const { tipoSituacao } = req.params;
        console.log('üîÑ For√ßando processamento de padr√µes para:', tipoSituacao);
        processarPadroesExistentes(tipoSituacao);
        const aprendizado = getAprendizadoTipoSituacao(tipoSituacao);
        res.json({
            success: true,
            message: 'Padr√µes processados com sucesso',
            data: aprendizado
        });
    } catch (error) {
        console.error('Erro ao processar padr√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao processar padr√µes'
        });
    }
});

// Endpoint para verificar status do aprendizado
app.get('/api/status-aprendizado/:tipoSituacao', (req, res) => {
    try {
        const { tipoSituacao } = req.params;
        const aprendizado = getAprendizadoTipoSituacao(tipoSituacao);
        res.json({
            success: true,
            tipoSituacao: tipoSituacao,
            status: {
                feedbacks: aprendizado.feedbacks.length,
                respostasCoerentes: aprendizado.respostasCoerentes.length,
                padroesIdentificados: aprendizado.padroesIdentificados.length,
                clausulasUsadas: aprendizado.clausulasUsadas.length
            },
            data: aprendizado
        });
    } catch (error) {
        console.error('Erro ao verificar status do aprendizado:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao verificar status do aprendizado'
        });
    }
});

// Endpoint para visualizar todos os feedbacks (compatibilidade)
app.get('/api/feedbacks', (req, res) => {
    try {
        const feedbacks = loadFeedbacks();
        res.json({
            success: true,
            data: feedbacks,
            tipo: 'todos'
        });
    } catch (error) {
        console.error('Erro ao carregar feedbacks:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao carregar feedbacks'
        });
    }
});

// Endpoint para limpar feedbacks de respostas (aba Respostas RA)
app.delete('/api/feedbacks/respostas', (req, res) => {
    try {
        const feedbacksVazios = {
            respostas: [],
            lastUpdated: obterTimestampBrasil()
        };
        saveFeedbacksRespostas(feedbacksVazios);
        res.json({
            success: true,
            message: 'Feedbacks de respostas limpos com sucesso'
        });
    } catch (error) {
        console.error('Erro ao limpar feedbacks de respostas:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao limpar feedbacks de respostas'
        });
    }
});

// Endpoint para limpar feedbacks de modera√ß√µes (aba Modera√ß√£o RA)
app.delete('/api/feedbacks/moderacoes', (req, res) => {
    try {
        const feedbacksVazios = {
            moderacoes: [],
            lastUpdated: obterTimestampBrasil()
        };
        saveFeedbacksModeracoes(feedbacksVazios);
        res.json({
            success: true,
            message: 'Feedbacks de modera√ß√µes limpos com sucesso'
        });
    } catch (error) {
        console.error('Erro ao limpar feedbacks de modera√ß√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao limpar feedbacks de modera√ß√µes'
        });
    }
});

// Endpoint para limpar feedbacks de explica√ß√µes (aba Explica√ß√µes)
app.delete('/api/feedbacks/explicacoes', (req, res) => {
    try {
        const feedbacksVazios = {
            explicacoes: [],
            lastUpdated: obterTimestampBrasil()
        };
        saveFeedbacksExplicacoes(feedbacksVazios);
        res.json({
            success: true,
            message: 'Feedbacks de explica√ß√µes limpos com sucesso'
        });
    } catch (error) {
        console.error('Erro ao limpar feedbacks de explica√ß√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao limpar feedbacks de explica√ß√µes'
        });
    }
});

// Endpoint para limpar todos os feedbacks (compatibilidade)
app.delete('/api/feedbacks', (req, res) => {
    try {
        const feedbacksVazios = {
            respostas: [],
            moderacoes: [],
            lastUpdated: obterTimestampBrasil()
        };
        saveFeedbacks(feedbacksVazios);
        res.json({
            success: true,
            message: 'Todos os feedbacks limpos com sucesso'
        });
    } catch (error) {
        console.error('Erro ao limpar feedbacks:', error);
        res.status(500).json({
            success: false,
            error: 'Erro ao limpar feedbacks'
        });
    }
});

// Endpoint para salvar resposta como modelo (quando clicar em "Resposta Coerente")
app.post('/api/save-modelo-resposta', (req, res) => {
    console.log('üéØ Endpoint /api/save-modelo-resposta chamado');
    try {
        const { dadosFormulario, respostaAprovada } = req.body;
        
        if (!dadosFormulario || !respostaAprovada) {
            return res.status(400).json({
                success: false,
                error: 'Dados do formul√°rio e resposta aprovada s√£o obrigat√≥rios'
            });
        }
        
        console.log('üíæ Salvando resposta como modelo:', {
            tipo_situacao: dadosFormulario.tipo_solicitacao,
            motivo_solicitacao: dadosFormulario.motivo_solicitacao,
            resposta_length: respostaAprovada.length
        });
        
        // Salvar como modelo
        const modelo = addModeloResposta(dadosFormulario, respostaAprovada);
        
        // Incrementar estat√≠stica global
        incrementarEstatisticaGlobal('respostas_coerentes');
        
        res.json({
            success: true,
            message: 'Resposta salva como modelo para futuras solicita√ß√µes similares',
            modeloId: modelo.id,
            tipoSituacao: modelo.tipo_situacao
        });
        
    } catch (error) {
        console.error('Erro ao salvar modelo de resposta:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Endpoint para revis√£o de textos
app.post('/api/revisar-texto', async (req, res) => {
    console.log('üéØ Endpoint /api/revisar-texto chamado');
    try {
        const { textoOriginal, tipoRevisao, observacoes } = req.body;
        
        if (!textoOriginal || !tipoRevisao || tipoRevisao.length === 0) {
            return res.status(400).json({
                success: false,
                error: 'Texto original e tipo de revis√£o s√£o obrigat√≥rios'
            });
        }
        
        // Construir prompt estruturado para revis√£o
        const tiposRevisaoTexto = tipoRevisao.map(tipo => {
            switch(tipo) {
                case 'padronizacao': return 'Padroniza√ß√£o';
                case 'clareza': return 'Melhoria de Clareza';
                case 'compliance': return 'Compliance';
                case 'estrutura': return 'Estrutura';
                default: return tipo;
            }
        }).join(', ');
        
        const prompt = `
üìå SCRIPT ESTRUTURADO PARA REVIS√ÉO DE TEXTOS

ENTRADA OBRIGAT√ìRIA:
- Texto original: ${textoOriginal}
- Tipo de revis√£o: ${tiposRevisaoTexto}
- Observa√ß√µes adicionais: ${observacoes || 'Nenhuma'}

‚öôÔ∏è FLUXO L√ìGICO OBRIGAT√ìRIO:

1. LEITURA INICIAL
- Leia o texto original atentamente
- Entenda o objetivo principal do texto (informar, responder cliente, pedir modera√ß√£o, etc.)
- Verifique se h√° observa√ß√µes adicionais que indicam ajustes espec√≠ficos

2. AN√ÅLISE CONFORME TIPO DE REVIS√ÉO SELECIONADO:

üîπ PADRONIZA√á√ÉO (se selecionado):
- Ajustar para o tom de voz usado pela empresa (formal/t√©cnico, ou simp√°tico/acolhedor, conforme contexto)
- Uniformizar termos (ex.: usar sempre "antecipa√ß√£o de restitui√ß√£o" e n√£o varia√ß√µes soltas)
- Garantir consist√™ncia em datas, n√∫meros e refer√™ncias contratuais

üîπ MELHORIA DE CLAREZA (se selecionado):
- Reescrever frases longas em vers√µes mais diretas
- Evitar jarg√µes t√©cnicos sem explica√ß√£o
- Dar ritmo fluido (per√≠odos curtos, par√°grafos objetivos)

üîπ COMPLIANCE (se selecionado):
- Validar se o texto est√° aderente √† LGPD (dados pessoais s√≥ quando necess√°rio)
- Aos contratos (ex.: C√©dula de Cr√©dito Banc√°rio ‚Äì CCB)
- Aos manuais do RA (se for resposta/modera√ß√£o)
- Remover termos arriscados: promessas n√£o garantidas, subjetividades ("sempre", "nunca", "garantimos")
- Checar se n√£o h√° afirma√ß√µes incorretas sobre leis ou processos

üîπ ESTRUTURA (se selecionado):
- Verificar se o texto tem in√≠cio (contexto), meio (explica√ß√£o) e fim (encaminhamento/solu√ß√£o)
- Garantir uso de t√≥picos ou par√°grafos quando facilita a leitura
- Sugerir t√≠tulos, subt√≠tulos ou formata√ß√µes quando aplic√°vel

3. CONSTRU√á√ÉO DA LINHA DE RACIOC√çNIO INTERNA:
- Indicar quais pontos foram analisados
- Explicar quais mudan√ßas foram feitas ou sugeridas
- Justificar com base em boas pr√°ticas de reda√ß√£o e, quando aplic√°vel, em compliance/contrato/manual RA

4. ENTREGA FINAL OBRIGAT√ìRIA:

FORMATO DE SA√çDA OBRIGAT√ìRIO:
(1) LINHA DE RACIOC√çNIO INTERNA (explica√ß√£o do processo)
[Conte√∫do da linha de racioc√≠nio interna]

(2) TEXTO REVISADO (vers√£o final pronta para uso)
[Texto revisado seguindo as diretrizes solicitadas]

‚ö†Ô∏è CR√çTICO: A sa√≠da DEVE conter exatamente estes dois blocos, separados pelos marcadores (1) e (2).

üö´ PROIBIDO: N√ÉO cite o texto original literalmente. Analise o conte√∫do e reformule baseado na an√°lise, n√£o na cita√ß√£o dos dados.`;

        console.log('üìù Enviando solicita√ß√£o para OpenAI...');
        
        const envVars = loadEnvFile();
        const apiKey = envVars.OPENAI_API_KEY;
        
        if (!validateApiKey(apiKey)) {
            return res.status(400).json({
                success: false,
                error: 'Chave da API OpenAI n√£o configurada'
            });
        }
        
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: envVars.OPENAI_MODEL || 'gpt-4o-mini',
                messages: [
                    {
                        role: 'system',
                        content: 'Voc√™ √© um especialista em revis√£o de textos corporativos, focado em clareza, compliance e padroniza√ß√£o. Sempre siga exatamente o formato de sa√≠da solicitado.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: 0.3,
                max_tokens: 2000
            })
        });

        if (!response.ok) {
            const errorData = await response.text();
            console.error('‚ùå Erro na API OpenAI:', errorData);
            return res.status(400).json({
                success: false,
                error: 'Erro na API OpenAI',
                details: errorData
            });
        }

        const data = await response.json();
        const resultado = data.choices[0].message.content;
        console.log('‚úÖ Revis√£o de texto gerada com sucesso');

        // Incrementar estat√≠stica global
        incrementarEstatisticaGlobal('revisoes_texto');

        res.json({
            success: true,
            result: resultado
        });

    } catch (error) {
        console.error('‚ùå Erro na revis√£o de texto:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor na revis√£o de texto'
        });
    }
});

// Endpoint para buscar estat√≠sticas globais
// ===== ENDPOINTS DE AUTENTICA√á√ÉO =====

// Endpoint para obter configura√ß√µes do Google OAuth
app.get('/api/google-config', (req, res) => {
    console.log('üéØ Endpoint /api/google-config chamado');
    try {
        // Carregar configura√ß√µes do arquivo .env
        const envVars = loadEnvFile();
        const clientId = envVars.GOOGLE_CLIENT_ID || '108948157850402889475';
        const dominioPermitido = envVars.DOMINIO_PERMITIDO || '@velotax.com.br';
        
        console.log('üîß GOOGLE_CLIENT_ID carregado:', clientId);
        console.log('üîß DOMINIO_PERMITIDO:', dominioPermitido);
        console.log('üîß NODE_ENV:', process.env.NODE_ENV);
        console.log('üîß VERCEL:', process.env.VERCEL);
        console.log('üîß Todas as vari√°veis de ambiente:', Object.keys(process.env).filter(k => k.includes('GOOGLE') || k.includes('DOMINIO')));
        
        // Verificar se o CLIENT_ID est√° no formato correto
        if (clientId && !clientId.includes('.apps.googleusercontent.com')) {
            console.warn('‚ö†Ô∏è CLIENT_ID pode estar incompleto:', clientId);
        }
        
        res.json({
            success: true,
            clientId: clientId,
            dominioPermitido: dominioPermitido,
            debug: {
                nodeEnv: process.env.NODE_ENV,
                vercel: process.env.VERCEL,
                clientIdFormat: clientId.includes('.apps.googleusercontent.com') ? 'correto' : 'incompleto'
            }
        });
    } catch (error) {
        console.error('Erro ao obter configura√ß√µes do Google:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Endpoint para obter perfil do usu√°rio
app.get('/api/getUserProfile', (req, res) => {
    console.log('üéØ Endpoint /api/getUserProfile chamado');
    try {
        const { email } = req.query;
        
        if (!email) {
            return res.status(400).json({
                success: false,
                error: 'Email n√£o fornecido'
            });
        }
        
        // Por enquanto, retornar perfil padr√£o
        // Em produ√ß√£o, voc√™ pode integrar com um banco de dados ou planilha
        const userProfile = {
            funcao: 'Usu√°rio',
            departamento: 'Geral',
            permissoes: ['visualizar', 'gerar_respostas']
        };
        
        console.log('üìã Perfil do usu√°rio retornado:', userProfile);
        
        res.json({
            success: true,
            profile: userProfile
        });
        
    } catch (error) {
        console.error('Erro ao buscar perfil do usu√°rio:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Endpoint para registrar logs de acesso
app.post('/api/logAccess', (req, res) => {
    console.log('üéØ Endpoint /api/logAccess chamado');
    try {
        const { email, nome, status, timestamp } = req.body;
        
        if (!email || !status) {
            return res.status(400).json({
                success: false,
                error: 'Dados obrigat√≥rios n√£o fornecidos'
            });
        }
        
        // Log do acesso
        console.log(`üìù Log de acesso: ${email} (${nome}) - ${status} - ${new Date(timestamp).toLocaleString('pt-BR')}`);
        
        // Aqui voc√™ pode salvar em um arquivo de log ou banco de dados
        // Por enquanto, apenas log no console
        
        res.json({
            success: true,
            message: 'Log de acesso registrado'
        });
        
    } catch (error) {
        console.error('Erro ao registrar log de acesso:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Endpoint para validar token do Google (opcional - para valida√ß√£o no backend)
app.post('/api/validateGoogleToken', async (req, res) => {
    console.log('üéØ Endpoint /api/validateGoogleToken chamado');
    try {
        const { token } = req.body;
        
        if (!token) {
            return res.status(400).json({
                success: false,
                error: 'Token n√£o fornecido'
            });
        }
        
        // Em produ√ß√£o, voc√™ pode usar a biblioteca google-auth-library
        // para validar o token no backend
        // const { OAuth2Client } = require('google-auth-library');
        // const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);
        // const ticket = await client.verifyIdToken({ idToken: token, audience: process.env.GOOGLE_CLIENT_ID });
        // const payload = ticket.getPayload();
        
        // Por enquanto, retornar sucesso (valida√ß√£o feita no frontend)
        res.json({
            success: true,
            message: 'Token validado com sucesso'
        });
        
    } catch (error) {
        console.error('Erro ao validar token:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// ===== ENDPOINTS DE ESTAT√çSTICAS GLOBAIS =====

app.get('/api/estatisticas-globais', (req, res) => {
    console.log('üéØ Endpoint /api/estatisticas-globais chamado');
    try {
        const estatisticas = loadEstatisticasGlobais();
        
        res.json({
            success: true,
            estatisticas: estatisticas.estatisticas,
            historico: estatisticas.historico_diario,
            lastUpdated: estatisticas.lastUpdated
        });
        
    } catch (error) {
        console.error('Erro ao buscar estat√≠sticas globais:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Endpoint para salvar modera√ß√£o como modelo (quando clicar em "Coerente")
app.post('/api/save-modelo-moderacao', (req, res) => {
    console.log('üéØ Endpoint /api/save-modelo-moderacao chamado');
    try {
        const { dadosModeracao, linhaRaciocinio, textoModeracao } = req.body;
        
        if (!dadosModeracao || !linhaRaciocinio || !textoModeracao) {
            return res.status(400).json({
                success: false,
                error: 'Dados de modera√ß√£o, linha de racioc√≠nio e texto de modera√ß√£o s√£o obrigat√≥rios'
            });
        }
        
        // Salvar como modelo de modera√ß√£o aprovada
        const modelo = addModeloModeracao(dadosModeracao, linhaRaciocinio, textoModeracao);
        
        // Incrementar estat√≠stica global
        incrementarEstatisticaGlobal('moderacoes_coerentes');
        
        res.json({
            success: true,
            message: 'Modelo de modera√ß√£o salvo com sucesso!',
            modelo: {
                id: modelo.id,
                timestamp: modelo.timestamp,
                motivoModeracao: modelo.motivoModeracao
            }
        });
        
    } catch (error) {
        console.error('Erro ao salvar modelo de modera√ß√£o:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// Endpoint para gerar explica√ß√µes baseadas em feedbacks (sem API OpenAI)
app.post('/api/generate-explanation', (req, res) => {
    try {
        const { tema } = req.body;
        
        if (!tema) {
            return res.status(400).json({
                success: false,
                error: 'Tema n√£o fornecido'
            });
        }
        
        // Obter feedbacks relevantes para o tema (APENAS feedbacks de respostas)
        const feedbacks = loadFeedbacksRespostas();
        const explicacao = gerarExplicacaoBaseadaEmFeedbacks(tema, feedbacks);
        
        // Incrementar estat√≠stica global
        incrementarEstatisticaGlobal('explicacoes_geradas');

        res.json({
            success: true,
            result: explicacao,
            baseadaEmFeedbacks: true,
            totalFeedbacks: feedbacks.respostas.length + feedbacks.moderacoes.length
        });
        
    } catch (error) {
        console.error('Erro ao gerar explica√ß√£o:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor',
            message: error.message
        });
    }
});

// ===== ENDPOINTS PARA VERIFICA√á√ÉO DE FEEDBACKS =====

// Endpoint para verificar feedbacks duplicados
app.get('/api/verificacao/duplicados', (req, res) => {
    try {
        const duplicados = verificarFeedbacksDuplicados();
        res.json({
            success: true,
            duplicados: duplicados,
            total: duplicados.length
        });
    } catch (error) {
        console.error('Erro ao verificar duplicados:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Endpoint para validar qualidade dos feedbacks
app.get('/api/verificacao/qualidade', (req, res) => {
    try {
        const relatorio = validarQualidadeFeedbacks();
        res.json({
            success: true,
            relatorio: relatorio
        });
    } catch (error) {
        console.error('Erro ao validar qualidade:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Endpoint para pontuar feedbacks
app.get('/api/verificacao/pontuacao', (req, res) => {
    try {
        const feedbacksPontuados = pontuarFeedbacks();
        res.json({
            success: true,
            feedbacks: feedbacksPontuados,
            total: feedbacksPontuados.length
        });
    } catch (error) {
        console.error('Erro ao pontuar feedbacks:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Endpoint para detectar padr√µes
app.get('/api/verificacao/padroes', (req, res) => {
    try {
        const padroes = detectarPadroesFeedback();
        res.json({
            success: true,
            padroes: padroes
        });
    } catch (error) {
        console.error('Erro ao detectar padr√µes:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Endpoint para executar verifica√ß√£o completa
app.get('/api/verificacao/completa', (req, res) => {
    try {
        const resultados = executarVerificacaoCompletaFeedbacks();
        res.json({
            success: true,
            resultados: resultados
        });
    } catch (error) {
        console.error('Erro ao executar verifica√ß√£o completa:', error);
        res.status(500).json({
            success: false,
            error: 'Erro interno do servidor'
        });
    }
});

// Middleware para rotas n√£o encontradas
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Rota n√£o encontrada',
        message: 'A rota solicitada n√£o existe'
    });
});

// ===== INICIALIZA√á√ÉO DO SERVIDOR =====

// Inicializar Google Sheets se habilitado
async function initializeGoogleSheets() {
    try {
        // TEMPORARIAMENTE DESABILITADO PARA ESTABILIZAR O SISTEMA
        console.log('üìä Google Sheets temporariamente desabilitado para estabilizar o sistema');
        return false;
        
        if (process.env.ENABLE_GOOGLE_SHEETS === 'true') {
            console.log('üîß Inicializando integra√ß√£o com Google Sheets...');
            const success = await googleSheetsIntegration.initialize();
            if (success) {
                console.log('‚úÖ Google Sheets integrado com sucesso');
                // Sincronizar dados existentes em background
                setTimeout(() => {
                    googleSheetsIntegration.sincronizarDadosExistentes();
                }, 5000);
            } else {
                console.log('‚ö†Ô∏è Google Sheets n√£o p√¥de ser inicializado');
            }
        } else {
            console.log('üìä Google Sheets desabilitado via configura√ß√£o');
        }
    } catch (error) {
        console.error('‚ùå Erro ao inicializar Google Sheets:', error.message);
        console.log('üìä Sistema funcionando sem Google Sheets');
    }
}

app.listen(PORT, async () => {
    console.log('üöÄ Servidor Velotax Bot iniciado!');
    console.log(`üì° Porta: ${PORT}`);
    console.log(`üåê URL: http://localhost:${PORT}`);
    console.log('üîê Sistema de seguran√ßa ativo');
    console.log('üìÅ Arquivo .env carregado da raiz do projeto');
    
    // Inicializar Google Sheets
    await initializeGoogleSheets();
    console.log('üß† Sistema de aprendizado baseado em feedback ativo');
    console.log('üîç Sistema de verifica√ß√£o autom√°tica de feedbacks ativo');
    console.log('‚úÖ Integra√ß√£o de feedbacks_respostas.json como base de conhecimento ativa');
    console.log('üìÖ Formata√ß√£o de datas em padr√£o brasileiro (DD/MM/AAAA HH:MM:SS) ativa');
    
    // Verificar se arquivo .env existe
    const envPath = path.join(__dirname, '.env');
    if (fs.existsSync(envPath)) {
        console.log('‚úÖ Arquivo .env encontrado na raiz');
    } else {
        console.warn('‚ö†Ô∏è Arquivo .env n√£o encontrado na raiz');
    }
    
    // Verificar sistema de feedbacks
    const feedbacks = loadFeedbacks();
    console.log(`üìö ${feedbacks.respostas.length} feedbacks de respostas salvos`);
    console.log(`üìö ${feedbacks.moderacoes.length} feedbacks de modera√ß√£o salvos`);
    
    // Executar verifica√ß√£o autom√°tica de feedbacks na inicializa√ß√£o
    console.log('üîç Executando verifica√ß√£o autom√°tica de feedbacks...');
    setTimeout(() => {
        executarVerificacaoCompletaFeedbacks();
    }, 2000);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë Encerrando servidor...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë Encerrando servidor...');
    process.exit(0);
});

module.exports = app;

